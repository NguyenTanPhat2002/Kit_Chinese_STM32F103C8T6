
kit_chinese_stm32f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a3c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08006b50  08006b50  00016b50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fc0  08006fc0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08006fc0  08006fc0  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fc0  08006fc0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fc0  08006fc0  00016fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fc4  08006fc4  00016fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200001d4  0800719c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  0800719c  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006709  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016a1  00000000  00000000  00026949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  00027ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005eb  00000000  00000000  000287c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a20  00000000  00000000  00028db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a43b  00000000  00000000  000407d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083e31  00000000  00000000  0004ac0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003378  00000000  00000000  000cea40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000d1db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006b34 	.word	0x08006b34

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006b34 	.word	0x08006b34

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bdc:	f000 faaa 	bl	8001134 <HAL_Init>

  /* USER CODE BEGIN Init */
  TM1640_Init();
 8000be0:	f001 fb5a 	bl	8002298 <TM1640_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be4:	f000 f825 	bl	8000c32 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be8:	f000 f896 	bl	8000d18 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bec:	f000 f866 	bl	8000cbc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Hiển thị số 3 tại địa chỉ hiển thị 0
  TM1640_display(0, 3);
 8000bf0:	2103      	movs	r1, #3
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f001 fb98 	bl	8002328 <TM1640_display>
  TM1640_display(1, 7);
 8000bf8:	2107      	movs	r1, #7
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f001 fb94 	bl	8002328 <TM1640_display>
  TM1640_display(2, 6);
 8000c00:	2106      	movs	r1, #6
 8000c02:	2002      	movs	r0, #2
 8000c04:	f001 fb90 	bl	8002328 <TM1640_display>
  TM1640_display(3, 5);
 8000c08:	2105      	movs	r1, #5
 8000c0a:	2003      	movs	r0, #3
 8000c0c:	f001 fb8c 	bl	8002328 <TM1640_display>
  TM1640_display(4, 1);
 8000c10:	2101      	movs	r1, #1
 8000c12:	2004      	movs	r0, #4
 8000c14:	f001 fb88 	bl	8002328 <TM1640_display>
  TM1640_display(5, 2);
 8000c18:	2102      	movs	r1, #2
 8000c1a:	2005      	movs	r0, #5
 8000c1c:	f001 fb84 	bl	8002328 <TM1640_display>
  TM1640_display(6, 4);
 8000c20:	2104      	movs	r1, #4
 8000c22:	2006      	movs	r0, #6
 8000c24:	f001 fb80 	bl	8002328 <TM1640_display>
  TM1640_display(7, 5);
 8000c28:	2105      	movs	r1, #5
 8000c2a:	2007      	movs	r0, #7
 8000c2c:	f001 fb7c 	bl	8002328 <TM1640_display>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <main+0x58>

08000c32 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b090      	sub	sp, #64	; 0x40
 8000c36:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c38:	f107 0318 	add.w	r3, r7, #24
 8000c3c:	2228      	movs	r2, #40	; 0x28
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 fb52 	bl	80032ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c54:	2301      	movs	r3, #1
 8000c56:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c5c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c62:	2301      	movs	r3, #1
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c66:	2302      	movs	r3, #2
 8000c68:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c70:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c74:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c76:	f107 0318 	add.w	r3, r7, #24
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 fe80 	bl	8001980 <HAL_RCC_OscConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c86:	f000 f8cb 	bl	8000e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2102      	movs	r1, #2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 f8ed 	bl	8001e84 <HAL_RCC_ClockConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cb0:	f000 f8b6 	bl	8000e20 <Error_Handler>
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	3740      	adds	r7, #64	; 0x40
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_I2C1_Init+0x50>)
 8000cc2:	4a13      	ldr	r2, [pc, #76]	; (8000d10 <MX_I2C1_Init+0x54>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_I2C1_Init+0x50>)
 8000cc8:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <MX_I2C1_Init+0x58>)
 8000cca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_I2C1_Init+0x50>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_I2C1_Init+0x50>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_I2C1_Init+0x50>)
 8000cda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <MX_I2C1_Init+0x50>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_I2C1_Init+0x50>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <MX_I2C1_Init+0x50>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_I2C1_Init+0x50>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <MX_I2C1_Init+0x50>)
 8000cfa:	f000 fcfd 	bl	80016f8 <HAL_I2C_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d04:	f000 f88c 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200001f0 	.word	0x200001f0
 8000d10:	40005400 	.word	0x40005400
 8000d14:	000186a0 	.word	0x000186a0

08000d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2c:	4b38      	ldr	r3, [pc, #224]	; (8000e10 <MX_GPIO_Init+0xf8>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a37      	ldr	r2, [pc, #220]	; (8000e10 <MX_GPIO_Init+0xf8>)
 8000d32:	f043 0310 	orr.w	r3, r3, #16
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b35      	ldr	r3, [pc, #212]	; (8000e10 <MX_GPIO_Init+0xf8>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d44:	4b32      	ldr	r3, [pc, #200]	; (8000e10 <MX_GPIO_Init+0xf8>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a31      	ldr	r2, [pc, #196]	; (8000e10 <MX_GPIO_Init+0xf8>)
 8000d4a:	f043 0320 	orr.w	r3, r3, #32
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b2f      	ldr	r3, [pc, #188]	; (8000e10 <MX_GPIO_Init+0xf8>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0320 	and.w	r3, r3, #32
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <MX_GPIO_Init+0xf8>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a2b      	ldr	r2, [pc, #172]	; (8000e10 <MX_GPIO_Init+0xf8>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <MX_GPIO_Init+0xf8>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d74:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <MX_GPIO_Init+0xf8>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a25      	ldr	r2, [pc, #148]	; (8000e10 <MX_GPIO_Init+0xf8>)
 8000d7a:	f043 0308 	orr.w	r3, r3, #8
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <MX_GPIO_Init+0xf8>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0308 	and.w	r3, r3, #8
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d92:	4820      	ldr	r0, [pc, #128]	; (8000e14 <MX_GPIO_Init+0xfc>)
 8000d94:	f000 fc98 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000d9e:	481e      	ldr	r0, [pc, #120]	; (8000e18 <MX_GPIO_Init+0x100>)
 8000da0:	f000 fc92 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2108      	movs	r1, #8
 8000da8:	481c      	ldr	r0, [pc, #112]	; (8000e1c <MX_GPIO_Init+0x104>)
 8000daa:	f000 fc8d 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4813      	ldr	r0, [pc, #76]	; (8000e14 <MX_GPIO_Init+0xfc>)
 8000dc8:	f000 fafa 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000dcc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0310 	add.w	r3, r7, #16
 8000de2:	4619      	mov	r1, r3
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <MX_GPIO_Init+0x100>)
 8000de6:	f000 faeb 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dea:	2308      	movs	r3, #8
 8000dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4806      	ldr	r0, [pc, #24]	; (8000e1c <MX_GPIO_Init+0x104>)
 8000e02:	f000 fadd 	bl	80013c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e06:	bf00      	nop
 8000e08:	3720      	adds	r7, #32
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40011000 	.word	0x40011000
 8000e18:	40010800 	.word	0x40010800
 8000e1c:	40010c00 	.word	0x40010c00

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <Error_Handler+0x8>
	...

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6193      	str	r3, [r2, #24]
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	61d3      	str	r3, [r2, #28]
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_MspInit+0x5c>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_MspInit+0x60>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_MspInit+0x60>)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010000 	.word	0x40010000

08000e90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a15      	ldr	r2, [pc, #84]	; (8000f00 <HAL_I2C_MspInit+0x70>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d123      	bne.n	8000ef8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_I2C_MspInit+0x74>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <HAL_I2C_MspInit+0x74>)
 8000eb6:	f043 0308 	orr.w	r3, r3, #8
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <HAL_I2C_MspInit+0x74>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f003 0308 	and.w	r3, r3, #8
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ec8:	23c0      	movs	r3, #192	; 0xc0
 8000eca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ecc:	2312      	movs	r3, #18
 8000ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480b      	ldr	r0, [pc, #44]	; (8000f08 <HAL_I2C_MspInit+0x78>)
 8000edc:	f000 fa70 	bl	80013c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_I2C_MspInit+0x74>)
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_I2C_MspInit+0x74>)
 8000ee6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eea:	61d3      	str	r3, [r2, #28]
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <HAL_I2C_MspInit+0x74>)
 8000eee:	69db      	ldr	r3, [r3, #28]
 8000ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ef8:	bf00      	nop
 8000efa:	3720      	adds	r7, #32
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40005400 	.word	0x40005400
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010c00 	.word	0x40010c00

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f10:	e7fe      	b.n	8000f10 <NMI_Handler+0x4>

08000f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <MemManage_Handler+0x4>

08000f1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr

08000f4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f52:	f000 f935 	bl	80011c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  return 1;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <_kill>:

int _kill(int pid, int sig)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f72:	f002 fa0d 	bl	8003390 <__errno>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2216      	movs	r2, #22
 8000f7a:	601a      	str	r2, [r3, #0]
  return -1;
 8000f7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <_exit>:

void _exit (int status)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ffe7 	bl	8000f68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f9a:	e7fe      	b.n	8000f9a <_exit+0x12>

08000f9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	e00a      	b.n	8000fc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fae:	f3af 8000 	nop.w
 8000fb2:	4601      	mov	r1, r0
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	60ba      	str	r2, [r7, #8]
 8000fba:	b2ca      	uxtb	r2, r1
 8000fbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	dbf0      	blt.n	8000fae <_read+0x12>
  }

  return len;
 8000fcc:	687b      	ldr	r3, [r7, #4]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60f8      	str	r0, [r7, #12]
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	e009      	b.n	8000ffc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	60ba      	str	r2, [r7, #8]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	429a      	cmp	r2, r3
 8001002:	dbf1      	blt.n	8000fe8 <_write+0x12>
  }
  return len;
 8001004:	687b      	ldr	r3, [r7, #4]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <_close>:

int _close(int file)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001034:	605a      	str	r2, [r3, #4]
  return 0;
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <_isatty>:

int _isatty(int file)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001056:	b480      	push	{r7}
 8001058:	b085      	sub	sp, #20
 800105a:	af00      	add	r7, sp, #0
 800105c:	60f8      	str	r0, [r7, #12]
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
	...

08001070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001078:	4a14      	ldr	r2, [pc, #80]	; (80010cc <_sbrk+0x5c>)
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <_sbrk+0x60>)
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d102      	bne.n	8001092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <_sbrk+0x64>)
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <_sbrk+0x68>)
 8001090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	429a      	cmp	r2, r3
 800109e:	d207      	bcs.n	80010b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a0:	f002 f976 	bl	8003390 <__errno>
 80010a4:	4603      	mov	r3, r0
 80010a6:	220c      	movs	r2, #12
 80010a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	e009      	b.n	80010c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <_sbrk+0x64>)
 80010c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c2:	68fb      	ldr	r3, [r7, #12]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20005000 	.word	0x20005000
 80010d0:	00000400 	.word	0x00000400
 80010d4:	20000244 	.word	0x20000244
 80010d8:	20000398 	.word	0x20000398

080010dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010e8:	f7ff fff8 	bl	80010dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ec:	480b      	ldr	r0, [pc, #44]	; (800111c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010ee:	490c      	ldr	r1, [pc, #48]	; (8001120 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010f0:	4a0c      	ldr	r2, [pc, #48]	; (8001124 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a09      	ldr	r2, [pc, #36]	; (8001128 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001104:	4c09      	ldr	r4, [pc, #36]	; (800112c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001112:	f002 f943 	bl	800339c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001116:	f7ff fd5f 	bl	8000bd8 <main>
  bx lr
 800111a:	4770      	bx	lr
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001120:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001124:	08006fc8 	.word	0x08006fc8
  ldr r2, =_sbss
 8001128:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800112c:	20000398 	.word	0x20000398

08001130 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001130:	e7fe      	b.n	8001130 <ADC1_2_IRQHandler>
	...

08001134 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <HAL_Init+0x28>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a07      	ldr	r2, [pc, #28]	; (800115c <HAL_Init+0x28>)
 800113e:	f043 0310 	orr.w	r3, r3, #16
 8001142:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001144:	2003      	movs	r0, #3
 8001146:	f000 f907 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114a:	200f      	movs	r0, #15
 800114c:	f000 f808 	bl	8001160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001150:	f7ff fe6c 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40022000 	.word	0x40022000

08001160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_InitTick+0x54>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_InitTick+0x58>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001176:	fbb3 f3f1 	udiv	r3, r3, r1
 800117a:	fbb2 f3f3 	udiv	r3, r2, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f000 f911 	bl	80013a6 <HAL_SYSTICK_Config>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e00e      	b.n	80011ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b0f      	cmp	r3, #15
 8001192:	d80a      	bhi.n	80011aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001194:	2200      	movs	r2, #0
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f000 f8e7 	bl	800136e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a0:	4a06      	ldr	r2, [pc, #24]	; (80011bc <HAL_InitTick+0x5c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e000      	b.n	80011ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000000 	.word	0x20000000
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20000004 	.word	0x20000004

080011c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_IncTick+0x1c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <HAL_IncTick+0x20>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a03      	ldr	r2, [pc, #12]	; (80011e0 <HAL_IncTick+0x20>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000248 	.word	0x20000248

080011e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return uwTick;
 80011e8:	4b02      	ldr	r3, [pc, #8]	; (80011f4 <HAL_GetTick+0x10>)
 80011ea:	681b      	ldr	r3, [r3, #0]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	20000248 	.word	0x20000248

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db0a      	blt.n	8001286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	490c      	ldr	r1, [pc, #48]	; (80012a8 <__NVIC_SetPriority+0x4c>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	0112      	lsls	r2, r2, #4
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	440b      	add	r3, r1
 8001280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001284:	e00a      	b.n	800129c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4908      	ldr	r1, [pc, #32]	; (80012ac <__NVIC_SetPriority+0x50>)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	3b04      	subs	r3, #4
 8001294:	0112      	lsls	r2, r2, #4
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	440b      	add	r3, r1
 800129a:	761a      	strb	r2, [r3, #24]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000e100 	.word	0xe000e100
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	; 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f1c3 0307 	rsb	r3, r3, #7
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	bf28      	it	cs
 80012ce:	2304      	movcs	r3, #4
 80012d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3304      	adds	r3, #4
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d902      	bls.n	80012e0 <NVIC_EncodePriority+0x30>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3b03      	subs	r3, #3
 80012de:	e000      	b.n	80012e2 <NVIC_EncodePriority+0x32>
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43da      	mvns	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f8:	f04f 31ff 	mov.w	r1, #4294967295
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43d9      	mvns	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	4313      	orrs	r3, r2
         );
}
 800130a:	4618      	mov	r0, r3
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001324:	d301      	bcc.n	800132a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001326:	2301      	movs	r3, #1
 8001328:	e00f      	b.n	800134a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <SysTick_Config+0x40>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001332:	210f      	movs	r1, #15
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f7ff ff90 	bl	800125c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <SysTick_Config+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SysTick_Config+0x40>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff49 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff5e 	bl	8001240 <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff90 	bl	80012b0 <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5f 	bl	800125c <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffb0 	bl	8001314 <SysTick_Config>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b08b      	sub	sp, #44	; 0x2c
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d2:	e169      	b.n	80016a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013d4:	2201      	movs	r2, #1
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	69fa      	ldr	r2, [r7, #28]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	f040 8158 	bne.w	80016a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	4a9a      	ldr	r2, [pc, #616]	; (8001660 <HAL_GPIO_Init+0x2a0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d05e      	beq.n	80014ba <HAL_GPIO_Init+0xfa>
 80013fc:	4a98      	ldr	r2, [pc, #608]	; (8001660 <HAL_GPIO_Init+0x2a0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d875      	bhi.n	80014ee <HAL_GPIO_Init+0x12e>
 8001402:	4a98      	ldr	r2, [pc, #608]	; (8001664 <HAL_GPIO_Init+0x2a4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d058      	beq.n	80014ba <HAL_GPIO_Init+0xfa>
 8001408:	4a96      	ldr	r2, [pc, #600]	; (8001664 <HAL_GPIO_Init+0x2a4>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d86f      	bhi.n	80014ee <HAL_GPIO_Init+0x12e>
 800140e:	4a96      	ldr	r2, [pc, #600]	; (8001668 <HAL_GPIO_Init+0x2a8>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d052      	beq.n	80014ba <HAL_GPIO_Init+0xfa>
 8001414:	4a94      	ldr	r2, [pc, #592]	; (8001668 <HAL_GPIO_Init+0x2a8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d869      	bhi.n	80014ee <HAL_GPIO_Init+0x12e>
 800141a:	4a94      	ldr	r2, [pc, #592]	; (800166c <HAL_GPIO_Init+0x2ac>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d04c      	beq.n	80014ba <HAL_GPIO_Init+0xfa>
 8001420:	4a92      	ldr	r2, [pc, #584]	; (800166c <HAL_GPIO_Init+0x2ac>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d863      	bhi.n	80014ee <HAL_GPIO_Init+0x12e>
 8001426:	4a92      	ldr	r2, [pc, #584]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d046      	beq.n	80014ba <HAL_GPIO_Init+0xfa>
 800142c:	4a90      	ldr	r2, [pc, #576]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d85d      	bhi.n	80014ee <HAL_GPIO_Init+0x12e>
 8001432:	2b12      	cmp	r3, #18
 8001434:	d82a      	bhi.n	800148c <HAL_GPIO_Init+0xcc>
 8001436:	2b12      	cmp	r3, #18
 8001438:	d859      	bhi.n	80014ee <HAL_GPIO_Init+0x12e>
 800143a:	a201      	add	r2, pc, #4	; (adr r2, 8001440 <HAL_GPIO_Init+0x80>)
 800143c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001440:	080014bb 	.word	0x080014bb
 8001444:	08001495 	.word	0x08001495
 8001448:	080014a7 	.word	0x080014a7
 800144c:	080014e9 	.word	0x080014e9
 8001450:	080014ef 	.word	0x080014ef
 8001454:	080014ef 	.word	0x080014ef
 8001458:	080014ef 	.word	0x080014ef
 800145c:	080014ef 	.word	0x080014ef
 8001460:	080014ef 	.word	0x080014ef
 8001464:	080014ef 	.word	0x080014ef
 8001468:	080014ef 	.word	0x080014ef
 800146c:	080014ef 	.word	0x080014ef
 8001470:	080014ef 	.word	0x080014ef
 8001474:	080014ef 	.word	0x080014ef
 8001478:	080014ef 	.word	0x080014ef
 800147c:	080014ef 	.word	0x080014ef
 8001480:	080014ef 	.word	0x080014ef
 8001484:	0800149d 	.word	0x0800149d
 8001488:	080014b1 	.word	0x080014b1
 800148c:	4a79      	ldr	r2, [pc, #484]	; (8001674 <HAL_GPIO_Init+0x2b4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d013      	beq.n	80014ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001492:	e02c      	b.n	80014ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	623b      	str	r3, [r7, #32]
          break;
 800149a:	e029      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	3304      	adds	r3, #4
 80014a2:	623b      	str	r3, [r7, #32]
          break;
 80014a4:	e024      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	3308      	adds	r3, #8
 80014ac:	623b      	str	r3, [r7, #32]
          break;
 80014ae:	e01f      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	330c      	adds	r3, #12
 80014b6:	623b      	str	r3, [r7, #32]
          break;
 80014b8:	e01a      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d102      	bne.n	80014c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014c2:	2304      	movs	r3, #4
 80014c4:	623b      	str	r3, [r7, #32]
          break;
 80014c6:	e013      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d105      	bne.n	80014dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d0:	2308      	movs	r3, #8
 80014d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	611a      	str	r2, [r3, #16]
          break;
 80014da:	e009      	b.n	80014f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014dc:	2308      	movs	r3, #8
 80014de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69fa      	ldr	r2, [r7, #28]
 80014e4:	615a      	str	r2, [r3, #20]
          break;
 80014e6:	e003      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
          break;
 80014ec:	e000      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          break;
 80014ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2bff      	cmp	r3, #255	; 0xff
 80014f4:	d801      	bhi.n	80014fa <HAL_GPIO_Init+0x13a>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	e001      	b.n	80014fe <HAL_GPIO_Init+0x13e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3304      	adds	r3, #4
 80014fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2bff      	cmp	r3, #255	; 0xff
 8001504:	d802      	bhi.n	800150c <HAL_GPIO_Init+0x14c>
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	e002      	b.n	8001512 <HAL_GPIO_Init+0x152>
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	3b08      	subs	r3, #8
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	210f      	movs	r1, #15
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	401a      	ands	r2, r3
 8001524:	6a39      	ldr	r1, [r7, #32]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	431a      	orrs	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 80b1 	beq.w	80016a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001540:	4b4d      	ldr	r3, [pc, #308]	; (8001678 <HAL_GPIO_Init+0x2b8>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4a4c      	ldr	r2, [pc, #304]	; (8001678 <HAL_GPIO_Init+0x2b8>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6193      	str	r3, [r2, #24]
 800154c:	4b4a      	ldr	r3, [pc, #296]	; (8001678 <HAL_GPIO_Init+0x2b8>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001558:	4a48      	ldr	r2, [pc, #288]	; (800167c <HAL_GPIO_Init+0x2bc>)
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3302      	adds	r3, #2
 8001560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001564:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	220f      	movs	r2, #15
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	4013      	ands	r3, r2
 800157a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a40      	ldr	r2, [pc, #256]	; (8001680 <HAL_GPIO_Init+0x2c0>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d013      	beq.n	80015ac <HAL_GPIO_Init+0x1ec>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a3f      	ldr	r2, [pc, #252]	; (8001684 <HAL_GPIO_Init+0x2c4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d00d      	beq.n	80015a8 <HAL_GPIO_Init+0x1e8>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a3e      	ldr	r2, [pc, #248]	; (8001688 <HAL_GPIO_Init+0x2c8>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d007      	beq.n	80015a4 <HAL_GPIO_Init+0x1e4>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a3d      	ldr	r2, [pc, #244]	; (800168c <HAL_GPIO_Init+0x2cc>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d101      	bne.n	80015a0 <HAL_GPIO_Init+0x1e0>
 800159c:	2303      	movs	r3, #3
 800159e:	e006      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 80015a0:	2304      	movs	r3, #4
 80015a2:	e004      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e002      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 80015ac:	2300      	movs	r3, #0
 80015ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b0:	f002 0203 	and.w	r2, r2, #3
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	4093      	lsls	r3, r2
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015be:	492f      	ldr	r1, [pc, #188]	; (800167c <HAL_GPIO_Init+0x2bc>)
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3302      	adds	r3, #2
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d006      	beq.n	80015e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	492c      	ldr	r1, [pc, #176]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	608b      	str	r3, [r1, #8]
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015e6:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	4928      	ldr	r1, [pc, #160]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001600:	4b23      	ldr	r3, [pc, #140]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	4922      	ldr	r1, [pc, #136]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	60cb      	str	r3, [r1, #12]
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	43db      	mvns	r3, r3
 8001616:	491e      	ldr	r1, [pc, #120]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001618:	4013      	ands	r3, r2
 800161a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d006      	beq.n	8001636 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	4918      	ldr	r1, [pc, #96]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001636:	4b16      	ldr	r3, [pc, #88]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	43db      	mvns	r3, r3
 800163e:	4914      	ldr	r1, [pc, #80]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001640:	4013      	ands	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d021      	beq.n	8001694 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	490e      	ldr	r1, [pc, #56]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	600b      	str	r3, [r1, #0]
 800165c:	e021      	b.n	80016a2 <HAL_GPIO_Init+0x2e2>
 800165e:	bf00      	nop
 8001660:	10320000 	.word	0x10320000
 8001664:	10310000 	.word	0x10310000
 8001668:	10220000 	.word	0x10220000
 800166c:	10210000 	.word	0x10210000
 8001670:	10120000 	.word	0x10120000
 8001674:	10110000 	.word	0x10110000
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000
 8001680:	40010800 	.word	0x40010800
 8001684:	40010c00 	.word	0x40010c00
 8001688:	40011000 	.word	0x40011000
 800168c:	40011400 	.word	0x40011400
 8001690:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_GPIO_Init+0x304>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	43db      	mvns	r3, r3
 800169c:	4909      	ldr	r1, [pc, #36]	; (80016c4 <HAL_GPIO_Init+0x304>)
 800169e:	4013      	ands	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	3301      	adds	r3, #1
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	fa22 f303 	lsr.w	r3, r2, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f47f ae8e 	bne.w	80013d4 <HAL_GPIO_Init+0x14>
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	372c      	adds	r7, #44	; 0x2c
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	40010400 	.word	0x40010400

080016c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
 80016d4:	4613      	mov	r3, r2
 80016d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016d8:	787b      	ldrb	r3, [r7, #1]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016e4:	e003      	b.n	80016ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016e6:	887b      	ldrh	r3, [r7, #2]
 80016e8:	041a      	lsls	r2, r3, #16
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	611a      	str	r2, [r3, #16]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e12b      	b.n	8001962 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d106      	bne.n	8001724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fbb6 	bl	8000e90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2224      	movs	r2, #36	; 0x24
 8001728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800174a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800175a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800175c:	f000 fcda 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8001760:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4a81      	ldr	r2, [pc, #516]	; (800196c <HAL_I2C_Init+0x274>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d807      	bhi.n	800177c <HAL_I2C_Init+0x84>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4a80      	ldr	r2, [pc, #512]	; (8001970 <HAL_I2C_Init+0x278>)
 8001770:	4293      	cmp	r3, r2
 8001772:	bf94      	ite	ls
 8001774:	2301      	movls	r3, #1
 8001776:	2300      	movhi	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	e006      	b.n	800178a <HAL_I2C_Init+0x92>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4a7d      	ldr	r2, [pc, #500]	; (8001974 <HAL_I2C_Init+0x27c>)
 8001780:	4293      	cmp	r3, r2
 8001782:	bf94      	ite	ls
 8001784:	2301      	movls	r3, #1
 8001786:	2300      	movhi	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0e7      	b.n	8001962 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4a78      	ldr	r2, [pc, #480]	; (8001978 <HAL_I2C_Init+0x280>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	0c9b      	lsrs	r3, r3, #18
 800179c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	4a6a      	ldr	r2, [pc, #424]	; (800196c <HAL_I2C_Init+0x274>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d802      	bhi.n	80017cc <HAL_I2C_Init+0xd4>
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	3301      	adds	r3, #1
 80017ca:	e009      	b.n	80017e0 <HAL_I2C_Init+0xe8>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	4a69      	ldr	r2, [pc, #420]	; (800197c <HAL_I2C_Init+0x284>)
 80017d8:	fba2 2303 	umull	r2, r3, r2, r3
 80017dc:	099b      	lsrs	r3, r3, #6
 80017de:	3301      	adds	r3, #1
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	430b      	orrs	r3, r1
 80017e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	495c      	ldr	r1, [pc, #368]	; (800196c <HAL_I2C_Init+0x274>)
 80017fc:	428b      	cmp	r3, r1
 80017fe:	d819      	bhi.n	8001834 <HAL_I2C_Init+0x13c>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1e59      	subs	r1, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fbb1 f3f3 	udiv	r3, r1, r3
 800180e:	1c59      	adds	r1, r3, #1
 8001810:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001814:	400b      	ands	r3, r1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00a      	beq.n	8001830 <HAL_I2C_Init+0x138>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1e59      	subs	r1, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fbb1 f3f3 	udiv	r3, r1, r3
 8001828:	3301      	adds	r3, #1
 800182a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800182e:	e051      	b.n	80018d4 <HAL_I2C_Init+0x1dc>
 8001830:	2304      	movs	r3, #4
 8001832:	e04f      	b.n	80018d4 <HAL_I2C_Init+0x1dc>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d111      	bne.n	8001860 <HAL_I2C_Init+0x168>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1e58      	subs	r0, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	440b      	add	r3, r1
 800184a:	fbb0 f3f3 	udiv	r3, r0, r3
 800184e:	3301      	adds	r3, #1
 8001850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf0c      	ite	eq
 8001858:	2301      	moveq	r3, #1
 800185a:	2300      	movne	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	e012      	b.n	8001886 <HAL_I2C_Init+0x18e>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1e58      	subs	r0, r3, #1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	0099      	lsls	r1, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	fbb0 f3f3 	udiv	r3, r0, r3
 8001876:	3301      	adds	r3, #1
 8001878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800187c:	2b00      	cmp	r3, #0
 800187e:	bf0c      	ite	eq
 8001880:	2301      	moveq	r3, #1
 8001882:	2300      	movne	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_I2C_Init+0x196>
 800188a:	2301      	movs	r3, #1
 800188c:	e022      	b.n	80018d4 <HAL_I2C_Init+0x1dc>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10e      	bne.n	80018b4 <HAL_I2C_Init+0x1bc>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1e58      	subs	r0, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6859      	ldr	r1, [r3, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	440b      	add	r3, r1
 80018a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a8:	3301      	adds	r3, #1
 80018aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b2:	e00f      	b.n	80018d4 <HAL_I2C_Init+0x1dc>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1e58      	subs	r0, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	0099      	lsls	r1, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ca:	3301      	adds	r3, #1
 80018cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	6809      	ldr	r1, [r1, #0]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69da      	ldr	r2, [r3, #28]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001902:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6911      	ldr	r1, [r2, #16]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	68d2      	ldr	r2, [r2, #12]
 800190e:	4311      	orrs	r1, r2
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6812      	ldr	r2, [r2, #0]
 8001914:	430b      	orrs	r3, r1
 8001916:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695a      	ldr	r2, [r3, #20]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2220      	movs	r2, #32
 800194e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	000186a0 	.word	0x000186a0
 8001970:	001e847f 	.word	0x001e847f
 8001974:	003d08ff 	.word	0x003d08ff
 8001978:	431bde83 	.word	0x431bde83
 800197c:	10624dd3 	.word	0x10624dd3

08001980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e272      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 8087 	beq.w	8001aae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a0:	4b92      	ldr	r3, [pc, #584]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d00c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019ac:	4b8f      	ldr	r3, [pc, #572]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d112      	bne.n	80019de <HAL_RCC_OscConfig+0x5e>
 80019b8:	4b8c      	ldr	r3, [pc, #560]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c4:	d10b      	bne.n	80019de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c6:	4b89      	ldr	r3, [pc, #548]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d06c      	beq.n	8001aac <HAL_RCC_OscConfig+0x12c>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d168      	bne.n	8001aac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e24c      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x76>
 80019e8:	4b80      	ldr	r3, [pc, #512]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a7f      	ldr	r2, [pc, #508]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	e02e      	b.n	8001a54 <HAL_RCC_OscConfig+0xd4>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x98>
 80019fe:	4b7b      	ldr	r3, [pc, #492]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a7a      	ldr	r2, [pc, #488]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b78      	ldr	r3, [pc, #480]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a77      	ldr	r2, [pc, #476]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e01d      	b.n	8001a54 <HAL_RCC_OscConfig+0xd4>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0xbc>
 8001a22:	4b72      	ldr	r3, [pc, #456]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a71      	ldr	r2, [pc, #452]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b6f      	ldr	r3, [pc, #444]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a6e      	ldr	r2, [pc, #440]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e00b      	b.n	8001a54 <HAL_RCC_OscConfig+0xd4>
 8001a3c:	4b6b      	ldr	r3, [pc, #428]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a6a      	ldr	r2, [pc, #424]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b68      	ldr	r3, [pc, #416]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a67      	ldr	r2, [pc, #412]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d013      	beq.n	8001a84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fbc2 	bl	80011e4 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff fbbe 	bl	80011e4 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e200      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	4b5d      	ldr	r3, [pc, #372]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0xe4>
 8001a82:	e014      	b.n	8001aae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff fbae 	bl	80011e4 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7ff fbaa 	bl	80011e4 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e1ec      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9e:	4b53      	ldr	r3, [pc, #332]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x10c>
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d063      	beq.n	8001b82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aba:	4b4c      	ldr	r3, [pc, #304]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00b      	beq.n	8001ade <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ac6:	4b49      	ldr	r3, [pc, #292]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d11c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x18c>
 8001ad2:	4b46      	ldr	r3, [pc, #280]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d116      	bne.n	8001b0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ade:	4b43      	ldr	r3, [pc, #268]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d005      	beq.n	8001af6 <HAL_RCC_OscConfig+0x176>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e1c0      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af6:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4939      	ldr	r1, [pc, #228]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0a:	e03a      	b.n	8001b82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d020      	beq.n	8001b56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b14:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff fb63 	bl	80011e4 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b22:	f7ff fb5f 	bl	80011e4 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e1a1      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b34:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b40:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4927      	ldr	r1, [pc, #156]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]
 8001b54:	e015      	b.n	8001b82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fb42 	bl	80011e4 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b64:	f7ff fb3e 	bl	80011e4 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e180      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b76:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d03a      	beq.n	8001c04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d019      	beq.n	8001bca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9c:	f7ff fb22 	bl	80011e4 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba4:	f7ff fb1e 	bl	80011e4 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e160      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	f000 faba 	bl	800213c <RCC_Delay>
 8001bc8:	e01c      	b.n	8001c04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd0:	f7ff fb08 	bl	80011e4 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd6:	e00f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd8:	f7ff fb04 	bl	80011e4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d908      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e146      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	42420000 	.word	0x42420000
 8001bf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf8:	4b92      	ldr	r3, [pc, #584]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1e9      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80a6 	beq.w	8001d5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c16:	4b8b      	ldr	r3, [pc, #556]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10d      	bne.n	8001c3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	4b88      	ldr	r3, [pc, #544]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	4a87      	ldr	r2, [pc, #540]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	61d3      	str	r3, [r2, #28]
 8001c2e:	4b85      	ldr	r3, [pc, #532]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3e:	4b82      	ldr	r3, [pc, #520]	; (8001e48 <HAL_RCC_OscConfig+0x4c8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d118      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c4a:	4b7f      	ldr	r3, [pc, #508]	; (8001e48 <HAL_RCC_OscConfig+0x4c8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a7e      	ldr	r2, [pc, #504]	; (8001e48 <HAL_RCC_OscConfig+0x4c8>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c56:	f7ff fac5 	bl	80011e4 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5e:	f7ff fac1 	bl	80011e4 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b64      	cmp	r3, #100	; 0x64
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e103      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	4b75      	ldr	r3, [pc, #468]	; (8001e48 <HAL_RCC_OscConfig+0x4c8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d106      	bne.n	8001c92 <HAL_RCC_OscConfig+0x312>
 8001c84:	4b6f      	ldr	r3, [pc, #444]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	4a6e      	ldr	r2, [pc, #440]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6213      	str	r3, [r2, #32]
 8001c90:	e02d      	b.n	8001cee <HAL_RCC_OscConfig+0x36e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x334>
 8001c9a:	4b6a      	ldr	r3, [pc, #424]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4a69      	ldr	r2, [pc, #420]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	f023 0301 	bic.w	r3, r3, #1
 8001ca4:	6213      	str	r3, [r2, #32]
 8001ca6:	4b67      	ldr	r3, [pc, #412]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	4a66      	ldr	r2, [pc, #408]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	f023 0304 	bic.w	r3, r3, #4
 8001cb0:	6213      	str	r3, [r2, #32]
 8001cb2:	e01c      	b.n	8001cee <HAL_RCC_OscConfig+0x36e>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	2b05      	cmp	r3, #5
 8001cba:	d10c      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x356>
 8001cbc:	4b61      	ldr	r3, [pc, #388]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	4a60      	ldr	r2, [pc, #384]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	6213      	str	r3, [r2, #32]
 8001cc8:	4b5e      	ldr	r3, [pc, #376]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	4a5d      	ldr	r2, [pc, #372]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6213      	str	r3, [r2, #32]
 8001cd4:	e00b      	b.n	8001cee <HAL_RCC_OscConfig+0x36e>
 8001cd6:	4b5b      	ldr	r3, [pc, #364]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4a5a      	ldr	r2, [pc, #360]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	6213      	str	r3, [r2, #32]
 8001ce2:	4b58      	ldr	r3, [pc, #352]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	4a57      	ldr	r2, [pc, #348]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	f023 0304 	bic.w	r3, r3, #4
 8001cec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d015      	beq.n	8001d22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff fa75 	bl	80011e4 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfe:	f7ff fa71 	bl	80011e4 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e0b1      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d14:	4b4b      	ldr	r3, [pc, #300]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0ee      	beq.n	8001cfe <HAL_RCC_OscConfig+0x37e>
 8001d20:	e014      	b.n	8001d4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d22:	f7ff fa5f 	bl	80011e4 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7ff fa5b 	bl	80011e4 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e09b      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d40:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1ee      	bne.n	8001d2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d105      	bne.n	8001d5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d52:	4b3c      	ldr	r3, [pc, #240]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	4a3b      	ldr	r2, [pc, #236]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8087 	beq.w	8001e76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d68:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d061      	beq.n	8001e38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d146      	bne.n	8001e0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7c:	4b33      	ldr	r3, [pc, #204]	; (8001e4c <HAL_RCC_OscConfig+0x4cc>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d82:	f7ff fa2f 	bl	80011e4 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8a:	f7ff fa2b 	bl	80011e4 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e06d      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9c:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f0      	bne.n	8001d8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db0:	d108      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001db2:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	4921      	ldr	r1, [pc, #132]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a19      	ldr	r1, [r3, #32]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	491b      	ldr	r1, [pc, #108]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_RCC_OscConfig+0x4cc>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7ff f9ff 	bl	80011e4 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dea:	f7ff f9fb 	bl	80011e4 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e03d      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x46a>
 8001e08:	e035      	b.n	8001e76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <HAL_RCC_OscConfig+0x4cc>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7ff f9e8 	bl	80011e4 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e18:	f7ff f9e4 	bl	80011e4 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e026      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x498>
 8001e36:	e01e      	b.n	8001e76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d107      	bne.n	8001e50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e019      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40007000 	.word	0x40007000
 8001e4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_RCC_OscConfig+0x500>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d001      	beq.n	8001e76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000

08001e84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0d0      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b6a      	ldr	r3, [pc, #424]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d910      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b67      	ldr	r3, [pc, #412]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 0207 	bic.w	r2, r3, #7
 8001eae:	4965      	ldr	r1, [pc, #404]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb6:	4b63      	ldr	r3, [pc, #396]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0b8      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d020      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee0:	4b59      	ldr	r3, [pc, #356]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4a58      	ldr	r2, [pc, #352]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef8:	4b53      	ldr	r3, [pc, #332]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a52      	ldr	r2, [pc, #328]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f04:	4b50      	ldr	r3, [pc, #320]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	494d      	ldr	r1, [pc, #308]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d040      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	4b47      	ldr	r3, [pc, #284]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d115      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e07f      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	4b41      	ldr	r3, [pc, #260]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e073      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	4b3d      	ldr	r3, [pc, #244]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e06b      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4b39      	ldr	r3, [pc, #228]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f023 0203 	bic.w	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4936      	ldr	r1, [pc, #216]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f74:	f7ff f936 	bl	80011e4 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7ff f932 	bl	80011e4 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e053      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 020c 	and.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1eb      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d210      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 0207 	bic.w	r2, r3, #7
 8001fba:	4922      	ldr	r1, [pc, #136]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b20      	ldr	r3, [pc, #128]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e032      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4916      	ldr	r1, [pc, #88]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ffe:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	490e      	ldr	r1, [pc, #56]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002012:	f000 f821 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8002016:	4602      	mov	r2, r0
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	490a      	ldr	r1, [pc, #40]	; (800204c <HAL_RCC_ClockConfig+0x1c8>)
 8002024:	5ccb      	ldrb	r3, [r1, r3]
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	4a09      	ldr	r2, [pc, #36]	; (8002050 <HAL_RCC_ClockConfig+0x1cc>)
 800202c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x1d0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff f894 	bl	8001160 <HAL_InitTick>

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40022000 	.word	0x40022000
 8002048:	40021000 	.word	0x40021000
 800204c:	08006b68 	.word	0x08006b68
 8002050:	20000000 	.word	0x20000000
 8002054:	20000004 	.word	0x20000004

08002058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002072:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b04      	cmp	r3, #4
 8002080:	d002      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x30>
 8002082:	2b08      	cmp	r3, #8
 8002084:	d003      	beq.n	800208e <HAL_RCC_GetSysClockFreq+0x36>
 8002086:	e027      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800208a:	613b      	str	r3, [r7, #16]
      break;
 800208c:	e027      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	0c9b      	lsrs	r3, r3, #18
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002098:	5cd3      	ldrb	r3, [r2, r3]
 800209a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d010      	beq.n	80020c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_RCC_GetSysClockFreq+0x94>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	0c5b      	lsrs	r3, r3, #17
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	4a11      	ldr	r2, [pc, #68]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020b2:	5cd3      	ldrb	r3, [r2, r3]
 80020b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a0d      	ldr	r2, [pc, #52]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ba:	fb03 f202 	mul.w	r2, r3, r2
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	e004      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80020cc:	fb02 f303 	mul.w	r3, r2, r3
 80020d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	613b      	str	r3, [r7, #16]
      break;
 80020d6:	e002      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80020da:	613b      	str	r3, [r7, #16]
      break;
 80020dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020de:	693b      	ldr	r3, [r7, #16]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	371c      	adds	r7, #28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	007a1200 	.word	0x007a1200
 80020f4:	08006b80 	.word	0x08006b80
 80020f8:	08006b90 	.word	0x08006b90
 80020fc:	003d0900 	.word	0x003d0900

08002100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002104:	4b02      	ldr	r3, [pc, #8]	; (8002110 <HAL_RCC_GetHCLKFreq+0x10>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr
 8002110:	20000000 	.word	0x20000000

08002114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002118:	f7ff fff2 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 800211c:	4602      	mov	r2, r0
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	4903      	ldr	r1, [pc, #12]	; (8002138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800212a:	5ccb      	ldrb	r3, [r1, r3]
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	08006b78 	.word	0x08006b78

0800213c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002144:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <RCC_Delay+0x34>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <RCC_Delay+0x38>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	0a5b      	lsrs	r3, r3, #9
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002158:	bf00      	nop
  }
  while (Delay --);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1e5a      	subs	r2, r3, #1
 800215e:	60fa      	str	r2, [r7, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f9      	bne.n	8002158 <RCC_Delay+0x1c>
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	20000000 	.word	0x20000000
 8002174:	10624dd3 	.word	0x10624dd3

08002178 <TM1640_start>:
// #define TM1640MEDO_DISPLAY  0x8d   // Độ sáng cao
// #define TM1640MEDO_DISPLAY  0x8f   // Độ sáng tối đa

#define TM1640MEDO_DISPLAY_OFF  0x80   // Tắt hiển thị

void TM1640_start() {
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TM1640_GPIOPORT, TM1640_DIN, GPIO_PIN_SET);
 800217c:	2201      	movs	r2, #1
 800217e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002182:	4810      	ldr	r0, [pc, #64]	; (80021c4 <TM1640_start+0x4c>)
 8002184:	f7ff faa0 	bl	80016c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TM1640_GPIOPORT, TM1640_SCLK, GPIO_PIN_SET);
 8002188:	2201      	movs	r2, #1
 800218a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800218e:	480d      	ldr	r0, [pc, #52]	; (80021c4 <TM1640_start+0x4c>)
 8002190:	f7ff fa9a 	bl	80016c8 <HAL_GPIO_WritePin>
    delay_us(DEL);
 8002194:	2001      	movs	r0, #1
 8002196:	f000 f8f3 	bl	8002380 <delay_us>
    HAL_GPIO_WritePin(TM1640_GPIOPORT, TM1640_DIN, GPIO_PIN_RESET);
 800219a:	2200      	movs	r2, #0
 800219c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021a0:	4808      	ldr	r0, [pc, #32]	; (80021c4 <TM1640_start+0x4c>)
 80021a2:	f7ff fa91 	bl	80016c8 <HAL_GPIO_WritePin>
    delay_us(DEL);
 80021a6:	2001      	movs	r0, #1
 80021a8:	f000 f8ea 	bl	8002380 <delay_us>
    HAL_GPIO_WritePin(TM1640_GPIOPORT, TM1640_SCLK, GPIO_PIN_RESET);
 80021ac:	2200      	movs	r2, #0
 80021ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021b2:	4804      	ldr	r0, [pc, #16]	; (80021c4 <TM1640_start+0x4c>)
 80021b4:	f7ff fa88 	bl	80016c8 <HAL_GPIO_WritePin>
    delay_us(DEL);
 80021b8:	2001      	movs	r0, #1
 80021ba:	f000 f8e1 	bl	8002380 <delay_us>
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40010800 	.word	0x40010800

080021c8 <TM1640_stop>:

void TM1640_stop() {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TM1640_GPIOPORT, TM1640_DIN, GPIO_PIN_RESET);
 80021cc:	2200      	movs	r2, #0
 80021ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021d2:	480b      	ldr	r0, [pc, #44]	; (8002200 <TM1640_stop+0x38>)
 80021d4:	f7ff fa78 	bl	80016c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TM1640_GPIOPORT, TM1640_SCLK, GPIO_PIN_SET);
 80021d8:	2201      	movs	r2, #1
 80021da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021de:	4808      	ldr	r0, [pc, #32]	; (8002200 <TM1640_stop+0x38>)
 80021e0:	f7ff fa72 	bl	80016c8 <HAL_GPIO_WritePin>
    delay_us(DEL);
 80021e4:	2001      	movs	r0, #1
 80021e6:	f000 f8cb 	bl	8002380 <delay_us>
    HAL_GPIO_WritePin(TM1640_GPIOPORT, TM1640_DIN, GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021f0:	4803      	ldr	r0, [pc, #12]	; (8002200 <TM1640_stop+0x38>)
 80021f2:	f7ff fa69 	bl	80016c8 <HAL_GPIO_WritePin>
    delay_us(DEL);
 80021f6:	2001      	movs	r0, #1
 80021f8:	f000 f8c2 	bl	8002380 <delay_us>
}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40010800 	.word	0x40010800

08002204 <TM1640_write>:

void TM1640_write(uint8_t data) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    for (i = 0; i < 8; i++) {
 800220e:	2300      	movs	r3, #0
 8002210:	73fb      	strb	r3, [r7, #15]
 8002212:	e02c      	b.n	800226e <TM1640_write+0x6a>
        HAL_GPIO_WritePin(TM1640_GPIOPORT, TM1640_SCLK, GPIO_PIN_RESET);
 8002214:	2200      	movs	r2, #0
 8002216:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800221a:	481e      	ldr	r0, [pc, #120]	; (8002294 <TM1640_write+0x90>)
 800221c:	f7ff fa54 	bl	80016c8 <HAL_GPIO_WritePin>
        delay_us(DEL);
 8002220:	2001      	movs	r0, #1
 8002222:	f000 f8ad 	bl	8002380 <delay_us>

        if (data & 0x01) {
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <TM1640_write+0x3a>
            HAL_GPIO_WritePin(TM1640_GPIOPORT, TM1640_DIN, GPIO_PIN_SET);
 8002230:	2201      	movs	r2, #1
 8002232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002236:	4817      	ldr	r0, [pc, #92]	; (8002294 <TM1640_write+0x90>)
 8002238:	f7ff fa46 	bl	80016c8 <HAL_GPIO_WritePin>
 800223c:	e005      	b.n	800224a <TM1640_write+0x46>
        } else {
            HAL_GPIO_WritePin(TM1640_GPIOPORT, TM1640_DIN, GPIO_PIN_RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002244:	4813      	ldr	r0, [pc, #76]	; (8002294 <TM1640_write+0x90>)
 8002246:	f7ff fa3f 	bl	80016c8 <HAL_GPIO_WritePin>
        }
        delay_us(DEL);
 800224a:	2001      	movs	r0, #1
 800224c:	f000 f898 	bl	8002380 <delay_us>
        HAL_GPIO_WritePin(TM1640_GPIOPORT, TM1640_SCLK, GPIO_PIN_SET);
 8002250:	2201      	movs	r2, #1
 8002252:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002256:	480f      	ldr	r0, [pc, #60]	; (8002294 <TM1640_write+0x90>)
 8002258:	f7ff fa36 	bl	80016c8 <HAL_GPIO_WritePin>
        delay_us(DEL);
 800225c:	2001      	movs	r0, #1
 800225e:	f000 f88f 	bl	8002380 <delay_us>

        data >>= 1;
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	085b      	lsrs	r3, r3, #1
 8002266:	71fb      	strb	r3, [r7, #7]
    for (i = 0; i < 8; i++) {
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	3301      	adds	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	2b07      	cmp	r3, #7
 8002272:	d9cf      	bls.n	8002214 <TM1640_write+0x10>
    }
    HAL_GPIO_WritePin(TM1640_GPIOPORT, TM1640_DIN, GPIO_PIN_RESET);
 8002274:	2200      	movs	r2, #0
 8002276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800227a:	4806      	ldr	r0, [pc, #24]	; (8002294 <TM1640_write+0x90>)
 800227c:	f7ff fa24 	bl	80016c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TM1640_GPIOPORT, TM1640_SCLK, GPIO_PIN_RESET);
 8002280:	2200      	movs	r2, #0
 8002282:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002286:	4803      	ldr	r0, [pc, #12]	; (8002294 <TM1640_write+0x90>)
 8002288:	f7ff fa1e 	bl	80016c8 <HAL_GPIO_WritePin>
}
 800228c:	bf00      	nop
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40010800 	.word	0x40010800

08002298 <TM1640_Init>:

void TM1640_Init(void) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229e:	f107 0308 	add.w	r3, r7, #8
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]

    // Kích hoạt clock cho GPIO
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ac:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <TM1640_Init+0x88>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <TM1640_Init+0x88>)
 80022b2:	f043 0304 	orr.w	r3, r3, #4
 80022b6:	6193      	str	r3, [r2, #24]
 80022b8:	4b19      	ldr	r3, [pc, #100]	; (8002320 <TM1640_Init+0x88>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]

    // Cấu hình các chân TM1640 làm Output
    GPIO_InitStruct.Pin = TM1640_DIN | TM1640_SCLK;
 80022c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80022c8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ca:	2301      	movs	r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022d2:	2303      	movs	r3, #3
 80022d4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(TM1640_GPIOPORT, &GPIO_InitStruct);
 80022d6:	f107 0308 	add.w	r3, r7, #8
 80022da:	4619      	mov	r1, r3
 80022dc:	4811      	ldr	r0, [pc, #68]	; (8002324 <TM1640_Init+0x8c>)
 80022de:	f7ff f86f 	bl	80013c0 <HAL_GPIO_Init>

    // Đặt trạng thái mặc định cho các chân
    HAL_GPIO_WritePin(TM1640_GPIOPORT, TM1640_DIN, GPIO_PIN_SET);
 80022e2:	2201      	movs	r2, #1
 80022e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022e8:	480e      	ldr	r0, [pc, #56]	; (8002324 <TM1640_Init+0x8c>)
 80022ea:	f7ff f9ed 	bl	80016c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TM1640_GPIOPORT, TM1640_SCLK, GPIO_PIN_SET);
 80022ee:	2201      	movs	r2, #1
 80022f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022f4:	480b      	ldr	r0, [pc, #44]	; (8002324 <TM1640_Init+0x8c>)
 80022f6:	f7ff f9e7 	bl	80016c8 <HAL_GPIO_WritePin>

    TM1640_start();
 80022fa:	f7ff ff3d 	bl	8002178 <TM1640_start>
    TM1640_write(TM1640MEDO_ADD);  // Thiết lập chế độ địa chỉ
 80022fe:	2040      	movs	r0, #64	; 0x40
 8002300:	f7ff ff80 	bl	8002204 <TM1640_write>
    TM1640_stop();
 8002304:	f7ff ff60 	bl	80021c8 <TM1640_stop>

    TM1640_start();
 8002308:	f7ff ff36 	bl	8002178 <TM1640_start>
    TM1640_write(TM1640MEDO_DISPLAY);  // Bật hiển thị với độ sáng đã chọn
 800230c:	208c      	movs	r0, #140	; 0x8c
 800230e:	f7ff ff79 	bl	8002204 <TM1640_write>
    TM1640_stop();
 8002312:	f7ff ff59 	bl	80021c8 <TM1640_stop>
}
 8002316:	bf00      	nop
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
 8002324:	40010800 	.word	0x40010800

08002328 <TM1640_display>:
    TM1640_write(TM1640_LEDPORT);  // Gửi địa chỉ hiển thị
    TM1640_write(data);            // Gửi dữ liệu hiển thị
    TM1640_stop();
}

void TM1640_display(uint8_t address, uint8_t data) {
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	460a      	mov	r2, r1
 8002332:	71fb      	strb	r3, [r7, #7]
 8002334:	4613      	mov	r3, r2
 8002336:	71bb      	strb	r3, [r7, #6]
    const uint8_t buff[21] = {
 8002338:	4b10      	ldr	r3, [pc, #64]	; (800237c <TM1640_display+0x54>)
 800233a:	f107 0408 	add.w	r4, r7, #8
 800233e:	461d      	mov	r5, r3
 8002340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002344:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002348:	6020      	str	r0, [r4, #0]
 800234a:	3404      	adds	r4, #4
 800234c:	7021      	strb	r1, [r4, #0]
        0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f,
        0xbf, 0x86, 0xdb, 0xcf, 0xe6, 0xed, 0xfd, 0x87, 0xff, 0xef, 0x00
    };

    TM1640_start();
 800234e:	f7ff ff13 	bl	8002178 <TM1640_start>
    TM1640_write(0xC0 + address);  // Gửi địa chỉ hiển thị
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	3b40      	subs	r3, #64	; 0x40
 8002356:	b2db      	uxtb	r3, r3
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff53 	bl	8002204 <TM1640_write>
    TM1640_write(buff[data]);      // Gửi dữ liệu hiển thị
 800235e:	79bb      	ldrb	r3, [r7, #6]
 8002360:	3320      	adds	r3, #32
 8002362:	443b      	add	r3, r7
 8002364:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff4b 	bl	8002204 <TM1640_write>
    TM1640_stop();
 800236e:	f7ff ff2b 	bl	80021c8 <TM1640_stop>
}
 8002372:	bf00      	nop
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	bdb0      	pop	{r4, r5, r7, pc}
 800237a:	bf00      	nop
 800237c:	08006b50 	.word	0x08006b50

08002380 <delay_us>:

// Hệ số AHB (theo xung nhịp hệ thống, đơn vị MHz)
#define AHB_INPUT 72

// Hàm delay với đơn vị micro giây
void delay_us(uint32_t uS) {
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
    uint32_t ticks = AHB_INPUT * uS; // Tính số xung nhịp cần để đạt được uS
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	60fb      	str	r3, [r7, #12]
    SysTick->LOAD = ticks;          // Nạp giá trị vào thanh ghi LOAD
 8002394:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <delay_us+0x44>)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;               // Xóa bộ đếm
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <delay_us+0x44>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk; // Bật SysTick với HCLK làm nguồn
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <delay_us+0x44>)
 80023a2:	2205      	movs	r2, #5
 80023a4:	601a      	str	r2, [r3, #0]

    // Đợi đến khi bộ đếm đếm về 0
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk));
 80023a6:	bf00      	nop
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <delay_us+0x44>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f9      	beq.n	80023a8 <delay_us+0x28>

    SysTick->CTRL = 0; // Tắt SysTick
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <delay_us+0x44>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	e000e010 	.word	0xe000e010

080023c8 <__cvt>:
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023ce:	461f      	mov	r7, r3
 80023d0:	bfbb      	ittet	lt
 80023d2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80023d6:	461f      	movlt	r7, r3
 80023d8:	2300      	movge	r3, #0
 80023da:	232d      	movlt	r3, #45	; 0x2d
 80023dc:	b088      	sub	sp, #32
 80023de:	4614      	mov	r4, r2
 80023e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80023e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80023e4:	7013      	strb	r3, [r2, #0]
 80023e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80023e8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80023ec:	f023 0820 	bic.w	r8, r3, #32
 80023f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80023f4:	d005      	beq.n	8002402 <__cvt+0x3a>
 80023f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80023fa:	d100      	bne.n	80023fe <__cvt+0x36>
 80023fc:	3501      	adds	r5, #1
 80023fe:	2302      	movs	r3, #2
 8002400:	e000      	b.n	8002404 <__cvt+0x3c>
 8002402:	2303      	movs	r3, #3
 8002404:	aa07      	add	r2, sp, #28
 8002406:	9204      	str	r2, [sp, #16]
 8002408:	aa06      	add	r2, sp, #24
 800240a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800240e:	e9cd 3500 	strd	r3, r5, [sp]
 8002412:	4622      	mov	r2, r4
 8002414:	463b      	mov	r3, r7
 8002416:	f001 f887 	bl	8003528 <_dtoa_r>
 800241a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800241e:	4606      	mov	r6, r0
 8002420:	d102      	bne.n	8002428 <__cvt+0x60>
 8002422:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002424:	07db      	lsls	r3, r3, #31
 8002426:	d522      	bpl.n	800246e <__cvt+0xa6>
 8002428:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800242c:	eb06 0905 	add.w	r9, r6, r5
 8002430:	d110      	bne.n	8002454 <__cvt+0x8c>
 8002432:	7833      	ldrb	r3, [r6, #0]
 8002434:	2b30      	cmp	r3, #48	; 0x30
 8002436:	d10a      	bne.n	800244e <__cvt+0x86>
 8002438:	2200      	movs	r2, #0
 800243a:	2300      	movs	r3, #0
 800243c:	4620      	mov	r0, r4
 800243e:	4639      	mov	r1, r7
 8002440:	f7fe fab2 	bl	80009a8 <__aeabi_dcmpeq>
 8002444:	b918      	cbnz	r0, 800244e <__cvt+0x86>
 8002446:	f1c5 0501 	rsb	r5, r5, #1
 800244a:	f8ca 5000 	str.w	r5, [sl]
 800244e:	f8da 3000 	ldr.w	r3, [sl]
 8002452:	4499      	add	r9, r3
 8002454:	2200      	movs	r2, #0
 8002456:	2300      	movs	r3, #0
 8002458:	4620      	mov	r0, r4
 800245a:	4639      	mov	r1, r7
 800245c:	f7fe faa4 	bl	80009a8 <__aeabi_dcmpeq>
 8002460:	b108      	cbz	r0, 8002466 <__cvt+0x9e>
 8002462:	f8cd 901c 	str.w	r9, [sp, #28]
 8002466:	2230      	movs	r2, #48	; 0x30
 8002468:	9b07      	ldr	r3, [sp, #28]
 800246a:	454b      	cmp	r3, r9
 800246c:	d307      	bcc.n	800247e <__cvt+0xb6>
 800246e:	4630      	mov	r0, r6
 8002470:	9b07      	ldr	r3, [sp, #28]
 8002472:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002474:	1b9b      	subs	r3, r3, r6
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	b008      	add	sp, #32
 800247a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800247e:	1c59      	adds	r1, r3, #1
 8002480:	9107      	str	r1, [sp, #28]
 8002482:	701a      	strb	r2, [r3, #0]
 8002484:	e7f0      	b.n	8002468 <__cvt+0xa0>

08002486 <__exponent>:
 8002486:	4603      	mov	r3, r0
 8002488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800248a:	2900      	cmp	r1, #0
 800248c:	f803 2b02 	strb.w	r2, [r3], #2
 8002490:	bfb6      	itet	lt
 8002492:	222d      	movlt	r2, #45	; 0x2d
 8002494:	222b      	movge	r2, #43	; 0x2b
 8002496:	4249      	neglt	r1, r1
 8002498:	2909      	cmp	r1, #9
 800249a:	7042      	strb	r2, [r0, #1]
 800249c:	dd2a      	ble.n	80024f4 <__exponent+0x6e>
 800249e:	f10d 0207 	add.w	r2, sp, #7
 80024a2:	4617      	mov	r7, r2
 80024a4:	260a      	movs	r6, #10
 80024a6:	fb91 f5f6 	sdiv	r5, r1, r6
 80024aa:	4694      	mov	ip, r2
 80024ac:	fb06 1415 	mls	r4, r6, r5, r1
 80024b0:	3430      	adds	r4, #48	; 0x30
 80024b2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80024b6:	460c      	mov	r4, r1
 80024b8:	2c63      	cmp	r4, #99	; 0x63
 80024ba:	4629      	mov	r1, r5
 80024bc:	f102 32ff 	add.w	r2, r2, #4294967295
 80024c0:	dcf1      	bgt.n	80024a6 <__exponent+0x20>
 80024c2:	3130      	adds	r1, #48	; 0x30
 80024c4:	f1ac 0402 	sub.w	r4, ip, #2
 80024c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80024cc:	4622      	mov	r2, r4
 80024ce:	1c41      	adds	r1, r0, #1
 80024d0:	42ba      	cmp	r2, r7
 80024d2:	d30a      	bcc.n	80024ea <__exponent+0x64>
 80024d4:	f10d 0209 	add.w	r2, sp, #9
 80024d8:	eba2 020c 	sub.w	r2, r2, ip
 80024dc:	42bc      	cmp	r4, r7
 80024de:	bf88      	it	hi
 80024e0:	2200      	movhi	r2, #0
 80024e2:	4413      	add	r3, r2
 80024e4:	1a18      	subs	r0, r3, r0
 80024e6:	b003      	add	sp, #12
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	f812 5b01 	ldrb.w	r5, [r2], #1
 80024ee:	f801 5f01 	strb.w	r5, [r1, #1]!
 80024f2:	e7ed      	b.n	80024d0 <__exponent+0x4a>
 80024f4:	2330      	movs	r3, #48	; 0x30
 80024f6:	3130      	adds	r1, #48	; 0x30
 80024f8:	7083      	strb	r3, [r0, #2]
 80024fa:	70c1      	strb	r1, [r0, #3]
 80024fc:	1d03      	adds	r3, r0, #4
 80024fe:	e7f1      	b.n	80024e4 <__exponent+0x5e>

08002500 <_printf_float>:
 8002500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002504:	b091      	sub	sp, #68	; 0x44
 8002506:	460c      	mov	r4, r1
 8002508:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800250c:	4616      	mov	r6, r2
 800250e:	461f      	mov	r7, r3
 8002510:	4605      	mov	r5, r0
 8002512:	f000 fef3 	bl	80032fc <_localeconv_r>
 8002516:	6803      	ldr	r3, [r0, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	9309      	str	r3, [sp, #36]	; 0x24
 800251c:	f7fd fe18 	bl	8000150 <strlen>
 8002520:	2300      	movs	r3, #0
 8002522:	930e      	str	r3, [sp, #56]	; 0x38
 8002524:	f8d8 3000 	ldr.w	r3, [r8]
 8002528:	900a      	str	r0, [sp, #40]	; 0x28
 800252a:	3307      	adds	r3, #7
 800252c:	f023 0307 	bic.w	r3, r3, #7
 8002530:	f103 0208 	add.w	r2, r3, #8
 8002534:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002538:	f8d4 b000 	ldr.w	fp, [r4]
 800253c:	f8c8 2000 	str.w	r2, [r8]
 8002540:	e9d3 a800 	ldrd	sl, r8, [r3]
 8002544:	4652      	mov	r2, sl
 8002546:	4643      	mov	r3, r8
 8002548:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800254c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8002550:	930b      	str	r3, [sp, #44]	; 0x2c
 8002552:	f04f 32ff 	mov.w	r2, #4294967295
 8002556:	4650      	mov	r0, sl
 8002558:	4b9c      	ldr	r3, [pc, #624]	; (80027cc <_printf_float+0x2cc>)
 800255a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800255c:	f7fe fa56 	bl	8000a0c <__aeabi_dcmpun>
 8002560:	bb70      	cbnz	r0, 80025c0 <_printf_float+0xc0>
 8002562:	f04f 32ff 	mov.w	r2, #4294967295
 8002566:	4650      	mov	r0, sl
 8002568:	4b98      	ldr	r3, [pc, #608]	; (80027cc <_printf_float+0x2cc>)
 800256a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800256c:	f7fe fa30 	bl	80009d0 <__aeabi_dcmple>
 8002570:	bb30      	cbnz	r0, 80025c0 <_printf_float+0xc0>
 8002572:	2200      	movs	r2, #0
 8002574:	2300      	movs	r3, #0
 8002576:	4650      	mov	r0, sl
 8002578:	4641      	mov	r1, r8
 800257a:	f7fe fa1f 	bl	80009bc <__aeabi_dcmplt>
 800257e:	b110      	cbz	r0, 8002586 <_printf_float+0x86>
 8002580:	232d      	movs	r3, #45	; 0x2d
 8002582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002586:	4a92      	ldr	r2, [pc, #584]	; (80027d0 <_printf_float+0x2d0>)
 8002588:	4b92      	ldr	r3, [pc, #584]	; (80027d4 <_printf_float+0x2d4>)
 800258a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800258e:	bf94      	ite	ls
 8002590:	4690      	movls	r8, r2
 8002592:	4698      	movhi	r8, r3
 8002594:	2303      	movs	r3, #3
 8002596:	f04f 0a00 	mov.w	sl, #0
 800259a:	6123      	str	r3, [r4, #16]
 800259c:	f02b 0304 	bic.w	r3, fp, #4
 80025a0:	6023      	str	r3, [r4, #0]
 80025a2:	4633      	mov	r3, r6
 80025a4:	4621      	mov	r1, r4
 80025a6:	4628      	mov	r0, r5
 80025a8:	9700      	str	r7, [sp, #0]
 80025aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80025ac:	f000 f9d6 	bl	800295c <_printf_common>
 80025b0:	3001      	adds	r0, #1
 80025b2:	f040 8090 	bne.w	80026d6 <_printf_float+0x1d6>
 80025b6:	f04f 30ff 	mov.w	r0, #4294967295
 80025ba:	b011      	add	sp, #68	; 0x44
 80025bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025c0:	4652      	mov	r2, sl
 80025c2:	4643      	mov	r3, r8
 80025c4:	4650      	mov	r0, sl
 80025c6:	4641      	mov	r1, r8
 80025c8:	f7fe fa20 	bl	8000a0c <__aeabi_dcmpun>
 80025cc:	b148      	cbz	r0, 80025e2 <_printf_float+0xe2>
 80025ce:	f1b8 0f00 	cmp.w	r8, #0
 80025d2:	bfb8      	it	lt
 80025d4:	232d      	movlt	r3, #45	; 0x2d
 80025d6:	4a80      	ldr	r2, [pc, #512]	; (80027d8 <_printf_float+0x2d8>)
 80025d8:	bfb8      	it	lt
 80025da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80025de:	4b7f      	ldr	r3, [pc, #508]	; (80027dc <_printf_float+0x2dc>)
 80025e0:	e7d3      	b.n	800258a <_printf_float+0x8a>
 80025e2:	6863      	ldr	r3, [r4, #4]
 80025e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	d142      	bne.n	8002672 <_printf_float+0x172>
 80025ec:	2306      	movs	r3, #6
 80025ee:	6063      	str	r3, [r4, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	9206      	str	r2, [sp, #24]
 80025f4:	aa0e      	add	r2, sp, #56	; 0x38
 80025f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80025fa:	aa0d      	add	r2, sp, #52	; 0x34
 80025fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002600:	9203      	str	r2, [sp, #12]
 8002602:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002606:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800260a:	6023      	str	r3, [r4, #0]
 800260c:	6863      	ldr	r3, [r4, #4]
 800260e:	4652      	mov	r2, sl
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	4628      	mov	r0, r5
 8002614:	4643      	mov	r3, r8
 8002616:	910b      	str	r1, [sp, #44]	; 0x2c
 8002618:	f7ff fed6 	bl	80023c8 <__cvt>
 800261c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800261e:	4680      	mov	r8, r0
 8002620:	2947      	cmp	r1, #71	; 0x47
 8002622:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002624:	d108      	bne.n	8002638 <_printf_float+0x138>
 8002626:	1cc8      	adds	r0, r1, #3
 8002628:	db02      	blt.n	8002630 <_printf_float+0x130>
 800262a:	6863      	ldr	r3, [r4, #4]
 800262c:	4299      	cmp	r1, r3
 800262e:	dd40      	ble.n	80026b2 <_printf_float+0x1b2>
 8002630:	f1a9 0902 	sub.w	r9, r9, #2
 8002634:	fa5f f989 	uxtb.w	r9, r9
 8002638:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800263c:	d81f      	bhi.n	800267e <_printf_float+0x17e>
 800263e:	464a      	mov	r2, r9
 8002640:	3901      	subs	r1, #1
 8002642:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002646:	910d      	str	r1, [sp, #52]	; 0x34
 8002648:	f7ff ff1d 	bl	8002486 <__exponent>
 800264c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800264e:	4682      	mov	sl, r0
 8002650:	1813      	adds	r3, r2, r0
 8002652:	2a01      	cmp	r2, #1
 8002654:	6123      	str	r3, [r4, #16]
 8002656:	dc02      	bgt.n	800265e <_printf_float+0x15e>
 8002658:	6822      	ldr	r2, [r4, #0]
 800265a:	07d2      	lsls	r2, r2, #31
 800265c:	d501      	bpl.n	8002662 <_printf_float+0x162>
 800265e:	3301      	adds	r3, #1
 8002660:	6123      	str	r3, [r4, #16]
 8002662:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002666:	2b00      	cmp	r3, #0
 8002668:	d09b      	beq.n	80025a2 <_printf_float+0xa2>
 800266a:	232d      	movs	r3, #45	; 0x2d
 800266c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002670:	e797      	b.n	80025a2 <_printf_float+0xa2>
 8002672:	2947      	cmp	r1, #71	; 0x47
 8002674:	d1bc      	bne.n	80025f0 <_printf_float+0xf0>
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1ba      	bne.n	80025f0 <_printf_float+0xf0>
 800267a:	2301      	movs	r3, #1
 800267c:	e7b7      	b.n	80025ee <_printf_float+0xee>
 800267e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002682:	d118      	bne.n	80026b6 <_printf_float+0x1b6>
 8002684:	2900      	cmp	r1, #0
 8002686:	6863      	ldr	r3, [r4, #4]
 8002688:	dd0b      	ble.n	80026a2 <_printf_float+0x1a2>
 800268a:	6121      	str	r1, [r4, #16]
 800268c:	b913      	cbnz	r3, 8002694 <_printf_float+0x194>
 800268e:	6822      	ldr	r2, [r4, #0]
 8002690:	07d0      	lsls	r0, r2, #31
 8002692:	d502      	bpl.n	800269a <_printf_float+0x19a>
 8002694:	3301      	adds	r3, #1
 8002696:	440b      	add	r3, r1
 8002698:	6123      	str	r3, [r4, #16]
 800269a:	f04f 0a00 	mov.w	sl, #0
 800269e:	65a1      	str	r1, [r4, #88]	; 0x58
 80026a0:	e7df      	b.n	8002662 <_printf_float+0x162>
 80026a2:	b913      	cbnz	r3, 80026aa <_printf_float+0x1aa>
 80026a4:	6822      	ldr	r2, [r4, #0]
 80026a6:	07d2      	lsls	r2, r2, #31
 80026a8:	d501      	bpl.n	80026ae <_printf_float+0x1ae>
 80026aa:	3302      	adds	r3, #2
 80026ac:	e7f4      	b.n	8002698 <_printf_float+0x198>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e7f2      	b.n	8002698 <_printf_float+0x198>
 80026b2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80026b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80026b8:	4299      	cmp	r1, r3
 80026ba:	db05      	blt.n	80026c8 <_printf_float+0x1c8>
 80026bc:	6823      	ldr	r3, [r4, #0]
 80026be:	6121      	str	r1, [r4, #16]
 80026c0:	07d8      	lsls	r0, r3, #31
 80026c2:	d5ea      	bpl.n	800269a <_printf_float+0x19a>
 80026c4:	1c4b      	adds	r3, r1, #1
 80026c6:	e7e7      	b.n	8002698 <_printf_float+0x198>
 80026c8:	2900      	cmp	r1, #0
 80026ca:	bfcc      	ite	gt
 80026cc:	2201      	movgt	r2, #1
 80026ce:	f1c1 0202 	rsble	r2, r1, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	e7e0      	b.n	8002698 <_printf_float+0x198>
 80026d6:	6823      	ldr	r3, [r4, #0]
 80026d8:	055a      	lsls	r2, r3, #21
 80026da:	d407      	bmi.n	80026ec <_printf_float+0x1ec>
 80026dc:	6923      	ldr	r3, [r4, #16]
 80026de:	4642      	mov	r2, r8
 80026e0:	4631      	mov	r1, r6
 80026e2:	4628      	mov	r0, r5
 80026e4:	47b8      	blx	r7
 80026e6:	3001      	adds	r0, #1
 80026e8:	d12b      	bne.n	8002742 <_printf_float+0x242>
 80026ea:	e764      	b.n	80025b6 <_printf_float+0xb6>
 80026ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80026f0:	f240 80dd 	bls.w	80028ae <_printf_float+0x3ae>
 80026f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80026f8:	2200      	movs	r2, #0
 80026fa:	2300      	movs	r3, #0
 80026fc:	f7fe f954 	bl	80009a8 <__aeabi_dcmpeq>
 8002700:	2800      	cmp	r0, #0
 8002702:	d033      	beq.n	800276c <_printf_float+0x26c>
 8002704:	2301      	movs	r3, #1
 8002706:	4631      	mov	r1, r6
 8002708:	4628      	mov	r0, r5
 800270a:	4a35      	ldr	r2, [pc, #212]	; (80027e0 <_printf_float+0x2e0>)
 800270c:	47b8      	blx	r7
 800270e:	3001      	adds	r0, #1
 8002710:	f43f af51 	beq.w	80025b6 <_printf_float+0xb6>
 8002714:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002718:	429a      	cmp	r2, r3
 800271a:	db02      	blt.n	8002722 <_printf_float+0x222>
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	07d8      	lsls	r0, r3, #31
 8002720:	d50f      	bpl.n	8002742 <_printf_float+0x242>
 8002722:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002726:	4631      	mov	r1, r6
 8002728:	4628      	mov	r0, r5
 800272a:	47b8      	blx	r7
 800272c:	3001      	adds	r0, #1
 800272e:	f43f af42 	beq.w	80025b6 <_printf_float+0xb6>
 8002732:	f04f 0800 	mov.w	r8, #0
 8002736:	f104 091a 	add.w	r9, r4, #26
 800273a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800273c:	3b01      	subs	r3, #1
 800273e:	4543      	cmp	r3, r8
 8002740:	dc09      	bgt.n	8002756 <_printf_float+0x256>
 8002742:	6823      	ldr	r3, [r4, #0]
 8002744:	079b      	lsls	r3, r3, #30
 8002746:	f100 8104 	bmi.w	8002952 <_printf_float+0x452>
 800274a:	68e0      	ldr	r0, [r4, #12]
 800274c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800274e:	4298      	cmp	r0, r3
 8002750:	bfb8      	it	lt
 8002752:	4618      	movlt	r0, r3
 8002754:	e731      	b.n	80025ba <_printf_float+0xba>
 8002756:	2301      	movs	r3, #1
 8002758:	464a      	mov	r2, r9
 800275a:	4631      	mov	r1, r6
 800275c:	4628      	mov	r0, r5
 800275e:	47b8      	blx	r7
 8002760:	3001      	adds	r0, #1
 8002762:	f43f af28 	beq.w	80025b6 <_printf_float+0xb6>
 8002766:	f108 0801 	add.w	r8, r8, #1
 800276a:	e7e6      	b.n	800273a <_printf_float+0x23a>
 800276c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800276e:	2b00      	cmp	r3, #0
 8002770:	dc38      	bgt.n	80027e4 <_printf_float+0x2e4>
 8002772:	2301      	movs	r3, #1
 8002774:	4631      	mov	r1, r6
 8002776:	4628      	mov	r0, r5
 8002778:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <_printf_float+0x2e0>)
 800277a:	47b8      	blx	r7
 800277c:	3001      	adds	r0, #1
 800277e:	f43f af1a 	beq.w	80025b6 <_printf_float+0xb6>
 8002782:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002786:	4313      	orrs	r3, r2
 8002788:	d102      	bne.n	8002790 <_printf_float+0x290>
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	07d9      	lsls	r1, r3, #31
 800278e:	d5d8      	bpl.n	8002742 <_printf_float+0x242>
 8002790:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002794:	4631      	mov	r1, r6
 8002796:	4628      	mov	r0, r5
 8002798:	47b8      	blx	r7
 800279a:	3001      	adds	r0, #1
 800279c:	f43f af0b 	beq.w	80025b6 <_printf_float+0xb6>
 80027a0:	f04f 0900 	mov.w	r9, #0
 80027a4:	f104 0a1a 	add.w	sl, r4, #26
 80027a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80027aa:	425b      	negs	r3, r3
 80027ac:	454b      	cmp	r3, r9
 80027ae:	dc01      	bgt.n	80027b4 <_printf_float+0x2b4>
 80027b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80027b2:	e794      	b.n	80026de <_printf_float+0x1de>
 80027b4:	2301      	movs	r3, #1
 80027b6:	4652      	mov	r2, sl
 80027b8:	4631      	mov	r1, r6
 80027ba:	4628      	mov	r0, r5
 80027bc:	47b8      	blx	r7
 80027be:	3001      	adds	r0, #1
 80027c0:	f43f aef9 	beq.w	80025b6 <_printf_float+0xb6>
 80027c4:	f109 0901 	add.w	r9, r9, #1
 80027c8:	e7ee      	b.n	80027a8 <_printf_float+0x2a8>
 80027ca:	bf00      	nop
 80027cc:	7fefffff 	.word	0x7fefffff
 80027d0:	08006b92 	.word	0x08006b92
 80027d4:	08006b96 	.word	0x08006b96
 80027d8:	08006b9a 	.word	0x08006b9a
 80027dc:	08006b9e 	.word	0x08006b9e
 80027e0:	08006ba2 	.word	0x08006ba2
 80027e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80027e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027e8:	429a      	cmp	r2, r3
 80027ea:	bfa8      	it	ge
 80027ec:	461a      	movge	r2, r3
 80027ee:	2a00      	cmp	r2, #0
 80027f0:	4691      	mov	r9, r2
 80027f2:	dc37      	bgt.n	8002864 <_printf_float+0x364>
 80027f4:	f04f 0b00 	mov.w	fp, #0
 80027f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80027fc:	f104 021a 	add.w	r2, r4, #26
 8002800:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002804:	ebaa 0309 	sub.w	r3, sl, r9
 8002808:	455b      	cmp	r3, fp
 800280a:	dc33      	bgt.n	8002874 <_printf_float+0x374>
 800280c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002810:	429a      	cmp	r2, r3
 8002812:	db3b      	blt.n	800288c <_printf_float+0x38c>
 8002814:	6823      	ldr	r3, [r4, #0]
 8002816:	07da      	lsls	r2, r3, #31
 8002818:	d438      	bmi.n	800288c <_printf_float+0x38c>
 800281a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800281e:	eba2 0903 	sub.w	r9, r2, r3
 8002822:	eba2 020a 	sub.w	r2, r2, sl
 8002826:	4591      	cmp	r9, r2
 8002828:	bfa8      	it	ge
 800282a:	4691      	movge	r9, r2
 800282c:	f1b9 0f00 	cmp.w	r9, #0
 8002830:	dc34      	bgt.n	800289c <_printf_float+0x39c>
 8002832:	f04f 0800 	mov.w	r8, #0
 8002836:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800283a:	f104 0a1a 	add.w	sl, r4, #26
 800283e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002842:	1a9b      	subs	r3, r3, r2
 8002844:	eba3 0309 	sub.w	r3, r3, r9
 8002848:	4543      	cmp	r3, r8
 800284a:	f77f af7a 	ble.w	8002742 <_printf_float+0x242>
 800284e:	2301      	movs	r3, #1
 8002850:	4652      	mov	r2, sl
 8002852:	4631      	mov	r1, r6
 8002854:	4628      	mov	r0, r5
 8002856:	47b8      	blx	r7
 8002858:	3001      	adds	r0, #1
 800285a:	f43f aeac 	beq.w	80025b6 <_printf_float+0xb6>
 800285e:	f108 0801 	add.w	r8, r8, #1
 8002862:	e7ec      	b.n	800283e <_printf_float+0x33e>
 8002864:	4613      	mov	r3, r2
 8002866:	4631      	mov	r1, r6
 8002868:	4642      	mov	r2, r8
 800286a:	4628      	mov	r0, r5
 800286c:	47b8      	blx	r7
 800286e:	3001      	adds	r0, #1
 8002870:	d1c0      	bne.n	80027f4 <_printf_float+0x2f4>
 8002872:	e6a0      	b.n	80025b6 <_printf_float+0xb6>
 8002874:	2301      	movs	r3, #1
 8002876:	4631      	mov	r1, r6
 8002878:	4628      	mov	r0, r5
 800287a:	920b      	str	r2, [sp, #44]	; 0x2c
 800287c:	47b8      	blx	r7
 800287e:	3001      	adds	r0, #1
 8002880:	f43f ae99 	beq.w	80025b6 <_printf_float+0xb6>
 8002884:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002886:	f10b 0b01 	add.w	fp, fp, #1
 800288a:	e7b9      	b.n	8002800 <_printf_float+0x300>
 800288c:	4631      	mov	r1, r6
 800288e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002892:	4628      	mov	r0, r5
 8002894:	47b8      	blx	r7
 8002896:	3001      	adds	r0, #1
 8002898:	d1bf      	bne.n	800281a <_printf_float+0x31a>
 800289a:	e68c      	b.n	80025b6 <_printf_float+0xb6>
 800289c:	464b      	mov	r3, r9
 800289e:	4631      	mov	r1, r6
 80028a0:	4628      	mov	r0, r5
 80028a2:	eb08 020a 	add.w	r2, r8, sl
 80028a6:	47b8      	blx	r7
 80028a8:	3001      	adds	r0, #1
 80028aa:	d1c2      	bne.n	8002832 <_printf_float+0x332>
 80028ac:	e683      	b.n	80025b6 <_printf_float+0xb6>
 80028ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80028b0:	2a01      	cmp	r2, #1
 80028b2:	dc01      	bgt.n	80028b8 <_printf_float+0x3b8>
 80028b4:	07db      	lsls	r3, r3, #31
 80028b6:	d539      	bpl.n	800292c <_printf_float+0x42c>
 80028b8:	2301      	movs	r3, #1
 80028ba:	4642      	mov	r2, r8
 80028bc:	4631      	mov	r1, r6
 80028be:	4628      	mov	r0, r5
 80028c0:	47b8      	blx	r7
 80028c2:	3001      	adds	r0, #1
 80028c4:	f43f ae77 	beq.w	80025b6 <_printf_float+0xb6>
 80028c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80028cc:	4631      	mov	r1, r6
 80028ce:	4628      	mov	r0, r5
 80028d0:	47b8      	blx	r7
 80028d2:	3001      	adds	r0, #1
 80028d4:	f43f ae6f 	beq.w	80025b6 <_printf_float+0xb6>
 80028d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80028dc:	2200      	movs	r2, #0
 80028de:	2300      	movs	r3, #0
 80028e0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80028e4:	f7fe f860 	bl	80009a8 <__aeabi_dcmpeq>
 80028e8:	b9d8      	cbnz	r0, 8002922 <_printf_float+0x422>
 80028ea:	f109 33ff 	add.w	r3, r9, #4294967295
 80028ee:	f108 0201 	add.w	r2, r8, #1
 80028f2:	4631      	mov	r1, r6
 80028f4:	4628      	mov	r0, r5
 80028f6:	47b8      	blx	r7
 80028f8:	3001      	adds	r0, #1
 80028fa:	d10e      	bne.n	800291a <_printf_float+0x41a>
 80028fc:	e65b      	b.n	80025b6 <_printf_float+0xb6>
 80028fe:	2301      	movs	r3, #1
 8002900:	464a      	mov	r2, r9
 8002902:	4631      	mov	r1, r6
 8002904:	4628      	mov	r0, r5
 8002906:	47b8      	blx	r7
 8002908:	3001      	adds	r0, #1
 800290a:	f43f ae54 	beq.w	80025b6 <_printf_float+0xb6>
 800290e:	f108 0801 	add.w	r8, r8, #1
 8002912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002914:	3b01      	subs	r3, #1
 8002916:	4543      	cmp	r3, r8
 8002918:	dcf1      	bgt.n	80028fe <_printf_float+0x3fe>
 800291a:	4653      	mov	r3, sl
 800291c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002920:	e6de      	b.n	80026e0 <_printf_float+0x1e0>
 8002922:	f04f 0800 	mov.w	r8, #0
 8002926:	f104 091a 	add.w	r9, r4, #26
 800292a:	e7f2      	b.n	8002912 <_printf_float+0x412>
 800292c:	2301      	movs	r3, #1
 800292e:	4642      	mov	r2, r8
 8002930:	e7df      	b.n	80028f2 <_printf_float+0x3f2>
 8002932:	2301      	movs	r3, #1
 8002934:	464a      	mov	r2, r9
 8002936:	4631      	mov	r1, r6
 8002938:	4628      	mov	r0, r5
 800293a:	47b8      	blx	r7
 800293c:	3001      	adds	r0, #1
 800293e:	f43f ae3a 	beq.w	80025b6 <_printf_float+0xb6>
 8002942:	f108 0801 	add.w	r8, r8, #1
 8002946:	68e3      	ldr	r3, [r4, #12]
 8002948:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800294a:	1a5b      	subs	r3, r3, r1
 800294c:	4543      	cmp	r3, r8
 800294e:	dcf0      	bgt.n	8002932 <_printf_float+0x432>
 8002950:	e6fb      	b.n	800274a <_printf_float+0x24a>
 8002952:	f04f 0800 	mov.w	r8, #0
 8002956:	f104 0919 	add.w	r9, r4, #25
 800295a:	e7f4      	b.n	8002946 <_printf_float+0x446>

0800295c <_printf_common>:
 800295c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002960:	4616      	mov	r6, r2
 8002962:	4699      	mov	r9, r3
 8002964:	688a      	ldr	r2, [r1, #8]
 8002966:	690b      	ldr	r3, [r1, #16]
 8002968:	4607      	mov	r7, r0
 800296a:	4293      	cmp	r3, r2
 800296c:	bfb8      	it	lt
 800296e:	4613      	movlt	r3, r2
 8002970:	6033      	str	r3, [r6, #0]
 8002972:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002976:	460c      	mov	r4, r1
 8002978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800297c:	b10a      	cbz	r2, 8002982 <_printf_common+0x26>
 800297e:	3301      	adds	r3, #1
 8002980:	6033      	str	r3, [r6, #0]
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	0699      	lsls	r1, r3, #26
 8002986:	bf42      	ittt	mi
 8002988:	6833      	ldrmi	r3, [r6, #0]
 800298a:	3302      	addmi	r3, #2
 800298c:	6033      	strmi	r3, [r6, #0]
 800298e:	6825      	ldr	r5, [r4, #0]
 8002990:	f015 0506 	ands.w	r5, r5, #6
 8002994:	d106      	bne.n	80029a4 <_printf_common+0x48>
 8002996:	f104 0a19 	add.w	sl, r4, #25
 800299a:	68e3      	ldr	r3, [r4, #12]
 800299c:	6832      	ldr	r2, [r6, #0]
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	42ab      	cmp	r3, r5
 80029a2:	dc2b      	bgt.n	80029fc <_printf_common+0xa0>
 80029a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80029a8:	1e13      	subs	r3, r2, #0
 80029aa:	6822      	ldr	r2, [r4, #0]
 80029ac:	bf18      	it	ne
 80029ae:	2301      	movne	r3, #1
 80029b0:	0692      	lsls	r2, r2, #26
 80029b2:	d430      	bmi.n	8002a16 <_printf_common+0xba>
 80029b4:	4649      	mov	r1, r9
 80029b6:	4638      	mov	r0, r7
 80029b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029bc:	47c0      	blx	r8
 80029be:	3001      	adds	r0, #1
 80029c0:	d023      	beq.n	8002a0a <_printf_common+0xae>
 80029c2:	6823      	ldr	r3, [r4, #0]
 80029c4:	6922      	ldr	r2, [r4, #16]
 80029c6:	f003 0306 	and.w	r3, r3, #6
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	bf14      	ite	ne
 80029ce:	2500      	movne	r5, #0
 80029d0:	6833      	ldreq	r3, [r6, #0]
 80029d2:	f04f 0600 	mov.w	r6, #0
 80029d6:	bf08      	it	eq
 80029d8:	68e5      	ldreq	r5, [r4, #12]
 80029da:	f104 041a 	add.w	r4, r4, #26
 80029de:	bf08      	it	eq
 80029e0:	1aed      	subeq	r5, r5, r3
 80029e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80029e6:	bf08      	it	eq
 80029e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029ec:	4293      	cmp	r3, r2
 80029ee:	bfc4      	itt	gt
 80029f0:	1a9b      	subgt	r3, r3, r2
 80029f2:	18ed      	addgt	r5, r5, r3
 80029f4:	42b5      	cmp	r5, r6
 80029f6:	d11a      	bne.n	8002a2e <_printf_common+0xd2>
 80029f8:	2000      	movs	r0, #0
 80029fa:	e008      	b.n	8002a0e <_printf_common+0xb2>
 80029fc:	2301      	movs	r3, #1
 80029fe:	4652      	mov	r2, sl
 8002a00:	4649      	mov	r1, r9
 8002a02:	4638      	mov	r0, r7
 8002a04:	47c0      	blx	r8
 8002a06:	3001      	adds	r0, #1
 8002a08:	d103      	bne.n	8002a12 <_printf_common+0xb6>
 8002a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a12:	3501      	adds	r5, #1
 8002a14:	e7c1      	b.n	800299a <_printf_common+0x3e>
 8002a16:	2030      	movs	r0, #48	; 0x30
 8002a18:	18e1      	adds	r1, r4, r3
 8002a1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a24:	4422      	add	r2, r4
 8002a26:	3302      	adds	r3, #2
 8002a28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a2c:	e7c2      	b.n	80029b4 <_printf_common+0x58>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	4622      	mov	r2, r4
 8002a32:	4649      	mov	r1, r9
 8002a34:	4638      	mov	r0, r7
 8002a36:	47c0      	blx	r8
 8002a38:	3001      	adds	r0, #1
 8002a3a:	d0e6      	beq.n	8002a0a <_printf_common+0xae>
 8002a3c:	3601      	adds	r6, #1
 8002a3e:	e7d9      	b.n	80029f4 <_printf_common+0x98>

08002a40 <_printf_i>:
 8002a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a44:	7e0f      	ldrb	r7, [r1, #24]
 8002a46:	4691      	mov	r9, r2
 8002a48:	2f78      	cmp	r7, #120	; 0x78
 8002a4a:	4680      	mov	r8, r0
 8002a4c:	460c      	mov	r4, r1
 8002a4e:	469a      	mov	sl, r3
 8002a50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002a52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002a56:	d807      	bhi.n	8002a68 <_printf_i+0x28>
 8002a58:	2f62      	cmp	r7, #98	; 0x62
 8002a5a:	d80a      	bhi.n	8002a72 <_printf_i+0x32>
 8002a5c:	2f00      	cmp	r7, #0
 8002a5e:	f000 80d5 	beq.w	8002c0c <_printf_i+0x1cc>
 8002a62:	2f58      	cmp	r7, #88	; 0x58
 8002a64:	f000 80c1 	beq.w	8002bea <_printf_i+0x1aa>
 8002a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a70:	e03a      	b.n	8002ae8 <_printf_i+0xa8>
 8002a72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a76:	2b15      	cmp	r3, #21
 8002a78:	d8f6      	bhi.n	8002a68 <_printf_i+0x28>
 8002a7a:	a101      	add	r1, pc, #4	; (adr r1, 8002a80 <_printf_i+0x40>)
 8002a7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a80:	08002ad9 	.word	0x08002ad9
 8002a84:	08002aed 	.word	0x08002aed
 8002a88:	08002a69 	.word	0x08002a69
 8002a8c:	08002a69 	.word	0x08002a69
 8002a90:	08002a69 	.word	0x08002a69
 8002a94:	08002a69 	.word	0x08002a69
 8002a98:	08002aed 	.word	0x08002aed
 8002a9c:	08002a69 	.word	0x08002a69
 8002aa0:	08002a69 	.word	0x08002a69
 8002aa4:	08002a69 	.word	0x08002a69
 8002aa8:	08002a69 	.word	0x08002a69
 8002aac:	08002bf3 	.word	0x08002bf3
 8002ab0:	08002b19 	.word	0x08002b19
 8002ab4:	08002bad 	.word	0x08002bad
 8002ab8:	08002a69 	.word	0x08002a69
 8002abc:	08002a69 	.word	0x08002a69
 8002ac0:	08002c15 	.word	0x08002c15
 8002ac4:	08002a69 	.word	0x08002a69
 8002ac8:	08002b19 	.word	0x08002b19
 8002acc:	08002a69 	.word	0x08002a69
 8002ad0:	08002a69 	.word	0x08002a69
 8002ad4:	08002bb5 	.word	0x08002bb5
 8002ad8:	682b      	ldr	r3, [r5, #0]
 8002ada:	1d1a      	adds	r2, r3, #4
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	602a      	str	r2, [r5, #0]
 8002ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0a0      	b.n	8002c2e <_printf_i+0x1ee>
 8002aec:	6820      	ldr	r0, [r4, #0]
 8002aee:	682b      	ldr	r3, [r5, #0]
 8002af0:	0607      	lsls	r7, r0, #24
 8002af2:	f103 0104 	add.w	r1, r3, #4
 8002af6:	6029      	str	r1, [r5, #0]
 8002af8:	d501      	bpl.n	8002afe <_printf_i+0xbe>
 8002afa:	681e      	ldr	r6, [r3, #0]
 8002afc:	e003      	b.n	8002b06 <_printf_i+0xc6>
 8002afe:	0646      	lsls	r6, r0, #25
 8002b00:	d5fb      	bpl.n	8002afa <_printf_i+0xba>
 8002b02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002b06:	2e00      	cmp	r6, #0
 8002b08:	da03      	bge.n	8002b12 <_printf_i+0xd2>
 8002b0a:	232d      	movs	r3, #45	; 0x2d
 8002b0c:	4276      	negs	r6, r6
 8002b0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b12:	230a      	movs	r3, #10
 8002b14:	4859      	ldr	r0, [pc, #356]	; (8002c7c <_printf_i+0x23c>)
 8002b16:	e012      	b.n	8002b3e <_printf_i+0xfe>
 8002b18:	682b      	ldr	r3, [r5, #0]
 8002b1a:	6820      	ldr	r0, [r4, #0]
 8002b1c:	1d19      	adds	r1, r3, #4
 8002b1e:	6029      	str	r1, [r5, #0]
 8002b20:	0605      	lsls	r5, r0, #24
 8002b22:	d501      	bpl.n	8002b28 <_printf_i+0xe8>
 8002b24:	681e      	ldr	r6, [r3, #0]
 8002b26:	e002      	b.n	8002b2e <_printf_i+0xee>
 8002b28:	0641      	lsls	r1, r0, #25
 8002b2a:	d5fb      	bpl.n	8002b24 <_printf_i+0xe4>
 8002b2c:	881e      	ldrh	r6, [r3, #0]
 8002b2e:	2f6f      	cmp	r7, #111	; 0x6f
 8002b30:	bf0c      	ite	eq
 8002b32:	2308      	moveq	r3, #8
 8002b34:	230a      	movne	r3, #10
 8002b36:	4851      	ldr	r0, [pc, #324]	; (8002c7c <_printf_i+0x23c>)
 8002b38:	2100      	movs	r1, #0
 8002b3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b3e:	6865      	ldr	r5, [r4, #4]
 8002b40:	2d00      	cmp	r5, #0
 8002b42:	bfa8      	it	ge
 8002b44:	6821      	ldrge	r1, [r4, #0]
 8002b46:	60a5      	str	r5, [r4, #8]
 8002b48:	bfa4      	itt	ge
 8002b4a:	f021 0104 	bicge.w	r1, r1, #4
 8002b4e:	6021      	strge	r1, [r4, #0]
 8002b50:	b90e      	cbnz	r6, 8002b56 <_printf_i+0x116>
 8002b52:	2d00      	cmp	r5, #0
 8002b54:	d04b      	beq.n	8002bee <_printf_i+0x1ae>
 8002b56:	4615      	mov	r5, r2
 8002b58:	fbb6 f1f3 	udiv	r1, r6, r3
 8002b5c:	fb03 6711 	mls	r7, r3, r1, r6
 8002b60:	5dc7      	ldrb	r7, [r0, r7]
 8002b62:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002b66:	4637      	mov	r7, r6
 8002b68:	42bb      	cmp	r3, r7
 8002b6a:	460e      	mov	r6, r1
 8002b6c:	d9f4      	bls.n	8002b58 <_printf_i+0x118>
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d10b      	bne.n	8002b8a <_printf_i+0x14a>
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	07de      	lsls	r6, r3, #31
 8002b76:	d508      	bpl.n	8002b8a <_printf_i+0x14a>
 8002b78:	6923      	ldr	r3, [r4, #16]
 8002b7a:	6861      	ldr	r1, [r4, #4]
 8002b7c:	4299      	cmp	r1, r3
 8002b7e:	bfde      	ittt	le
 8002b80:	2330      	movle	r3, #48	; 0x30
 8002b82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b8a:	1b52      	subs	r2, r2, r5
 8002b8c:	6122      	str	r2, [r4, #16]
 8002b8e:	464b      	mov	r3, r9
 8002b90:	4621      	mov	r1, r4
 8002b92:	4640      	mov	r0, r8
 8002b94:	f8cd a000 	str.w	sl, [sp]
 8002b98:	aa03      	add	r2, sp, #12
 8002b9a:	f7ff fedf 	bl	800295c <_printf_common>
 8002b9e:	3001      	adds	r0, #1
 8002ba0:	d14a      	bne.n	8002c38 <_printf_i+0x1f8>
 8002ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba6:	b004      	add	sp, #16
 8002ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	f043 0320 	orr.w	r3, r3, #32
 8002bb2:	6023      	str	r3, [r4, #0]
 8002bb4:	2778      	movs	r7, #120	; 0x78
 8002bb6:	4832      	ldr	r0, [pc, #200]	; (8002c80 <_printf_i+0x240>)
 8002bb8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	6829      	ldr	r1, [r5, #0]
 8002bc0:	061f      	lsls	r7, r3, #24
 8002bc2:	f851 6b04 	ldr.w	r6, [r1], #4
 8002bc6:	d402      	bmi.n	8002bce <_printf_i+0x18e>
 8002bc8:	065f      	lsls	r7, r3, #25
 8002bca:	bf48      	it	mi
 8002bcc:	b2b6      	uxthmi	r6, r6
 8002bce:	07df      	lsls	r7, r3, #31
 8002bd0:	bf48      	it	mi
 8002bd2:	f043 0320 	orrmi.w	r3, r3, #32
 8002bd6:	6029      	str	r1, [r5, #0]
 8002bd8:	bf48      	it	mi
 8002bda:	6023      	strmi	r3, [r4, #0]
 8002bdc:	b91e      	cbnz	r6, 8002be6 <_printf_i+0x1a6>
 8002bde:	6823      	ldr	r3, [r4, #0]
 8002be0:	f023 0320 	bic.w	r3, r3, #32
 8002be4:	6023      	str	r3, [r4, #0]
 8002be6:	2310      	movs	r3, #16
 8002be8:	e7a6      	b.n	8002b38 <_printf_i+0xf8>
 8002bea:	4824      	ldr	r0, [pc, #144]	; (8002c7c <_printf_i+0x23c>)
 8002bec:	e7e4      	b.n	8002bb8 <_printf_i+0x178>
 8002bee:	4615      	mov	r5, r2
 8002bf0:	e7bd      	b.n	8002b6e <_printf_i+0x12e>
 8002bf2:	682b      	ldr	r3, [r5, #0]
 8002bf4:	6826      	ldr	r6, [r4, #0]
 8002bf6:	1d18      	adds	r0, r3, #4
 8002bf8:	6961      	ldr	r1, [r4, #20]
 8002bfa:	6028      	str	r0, [r5, #0]
 8002bfc:	0635      	lsls	r5, r6, #24
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	d501      	bpl.n	8002c06 <_printf_i+0x1c6>
 8002c02:	6019      	str	r1, [r3, #0]
 8002c04:	e002      	b.n	8002c0c <_printf_i+0x1cc>
 8002c06:	0670      	lsls	r0, r6, #25
 8002c08:	d5fb      	bpl.n	8002c02 <_printf_i+0x1c2>
 8002c0a:	8019      	strh	r1, [r3, #0]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	4615      	mov	r5, r2
 8002c10:	6123      	str	r3, [r4, #16]
 8002c12:	e7bc      	b.n	8002b8e <_printf_i+0x14e>
 8002c14:	682b      	ldr	r3, [r5, #0]
 8002c16:	2100      	movs	r1, #0
 8002c18:	1d1a      	adds	r2, r3, #4
 8002c1a:	602a      	str	r2, [r5, #0]
 8002c1c:	681d      	ldr	r5, [r3, #0]
 8002c1e:	6862      	ldr	r2, [r4, #4]
 8002c20:	4628      	mov	r0, r5
 8002c22:	f000 fbe2 	bl	80033ea <memchr>
 8002c26:	b108      	cbz	r0, 8002c2c <_printf_i+0x1ec>
 8002c28:	1b40      	subs	r0, r0, r5
 8002c2a:	6060      	str	r0, [r4, #4]
 8002c2c:	6863      	ldr	r3, [r4, #4]
 8002c2e:	6123      	str	r3, [r4, #16]
 8002c30:	2300      	movs	r3, #0
 8002c32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c36:	e7aa      	b.n	8002b8e <_printf_i+0x14e>
 8002c38:	462a      	mov	r2, r5
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	4640      	mov	r0, r8
 8002c3e:	6923      	ldr	r3, [r4, #16]
 8002c40:	47d0      	blx	sl
 8002c42:	3001      	adds	r0, #1
 8002c44:	d0ad      	beq.n	8002ba2 <_printf_i+0x162>
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	079b      	lsls	r3, r3, #30
 8002c4a:	d413      	bmi.n	8002c74 <_printf_i+0x234>
 8002c4c:	68e0      	ldr	r0, [r4, #12]
 8002c4e:	9b03      	ldr	r3, [sp, #12]
 8002c50:	4298      	cmp	r0, r3
 8002c52:	bfb8      	it	lt
 8002c54:	4618      	movlt	r0, r3
 8002c56:	e7a6      	b.n	8002ba6 <_printf_i+0x166>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	4632      	mov	r2, r6
 8002c5c:	4649      	mov	r1, r9
 8002c5e:	4640      	mov	r0, r8
 8002c60:	47d0      	blx	sl
 8002c62:	3001      	adds	r0, #1
 8002c64:	d09d      	beq.n	8002ba2 <_printf_i+0x162>
 8002c66:	3501      	adds	r5, #1
 8002c68:	68e3      	ldr	r3, [r4, #12]
 8002c6a:	9903      	ldr	r1, [sp, #12]
 8002c6c:	1a5b      	subs	r3, r3, r1
 8002c6e:	42ab      	cmp	r3, r5
 8002c70:	dcf2      	bgt.n	8002c58 <_printf_i+0x218>
 8002c72:	e7eb      	b.n	8002c4c <_printf_i+0x20c>
 8002c74:	2500      	movs	r5, #0
 8002c76:	f104 0619 	add.w	r6, r4, #25
 8002c7a:	e7f5      	b.n	8002c68 <_printf_i+0x228>
 8002c7c:	08006ba4 	.word	0x08006ba4
 8002c80:	08006bb5 	.word	0x08006bb5

08002c84 <_scanf_float>:
 8002c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c88:	b087      	sub	sp, #28
 8002c8a:	9303      	str	r3, [sp, #12]
 8002c8c:	688b      	ldr	r3, [r1, #8]
 8002c8e:	4617      	mov	r7, r2
 8002c90:	1e5a      	subs	r2, r3, #1
 8002c92:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002c96:	bf85      	ittet	hi
 8002c98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002c9c:	195b      	addhi	r3, r3, r5
 8002c9e:	2300      	movls	r3, #0
 8002ca0:	9302      	strhi	r3, [sp, #8]
 8002ca2:	bf88      	it	hi
 8002ca4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002ca8:	468b      	mov	fp, r1
 8002caa:	f04f 0500 	mov.w	r5, #0
 8002cae:	bf8c      	ite	hi
 8002cb0:	608b      	strhi	r3, [r1, #8]
 8002cb2:	9302      	strls	r3, [sp, #8]
 8002cb4:	680b      	ldr	r3, [r1, #0]
 8002cb6:	4680      	mov	r8, r0
 8002cb8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8002cbc:	f84b 3b1c 	str.w	r3, [fp], #28
 8002cc0:	460c      	mov	r4, r1
 8002cc2:	465e      	mov	r6, fp
 8002cc4:	46aa      	mov	sl, r5
 8002cc6:	46a9      	mov	r9, r5
 8002cc8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8002ccc:	9501      	str	r5, [sp, #4]
 8002cce:	68a2      	ldr	r2, [r4, #8]
 8002cd0:	b152      	cbz	r2, 8002ce8 <_scanf_float+0x64>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b4e      	cmp	r3, #78	; 0x4e
 8002cd8:	d864      	bhi.n	8002da4 <_scanf_float+0x120>
 8002cda:	2b40      	cmp	r3, #64	; 0x40
 8002cdc:	d83c      	bhi.n	8002d58 <_scanf_float+0xd4>
 8002cde:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8002ce2:	b2c8      	uxtb	r0, r1
 8002ce4:	280e      	cmp	r0, #14
 8002ce6:	d93a      	bls.n	8002d5e <_scanf_float+0xda>
 8002ce8:	f1b9 0f00 	cmp.w	r9, #0
 8002cec:	d003      	beq.n	8002cf6 <_scanf_float+0x72>
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cf4:	6023      	str	r3, [r4, #0]
 8002cf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002cfa:	f1ba 0f01 	cmp.w	sl, #1
 8002cfe:	f200 8113 	bhi.w	8002f28 <_scanf_float+0x2a4>
 8002d02:	455e      	cmp	r6, fp
 8002d04:	f200 8105 	bhi.w	8002f12 <_scanf_float+0x28e>
 8002d08:	2501      	movs	r5, #1
 8002d0a:	4628      	mov	r0, r5
 8002d0c:	b007      	add	sp, #28
 8002d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d12:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002d16:	2a0d      	cmp	r2, #13
 8002d18:	d8e6      	bhi.n	8002ce8 <_scanf_float+0x64>
 8002d1a:	a101      	add	r1, pc, #4	; (adr r1, 8002d20 <_scanf_float+0x9c>)
 8002d1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002d20:	08002e5f 	.word	0x08002e5f
 8002d24:	08002ce9 	.word	0x08002ce9
 8002d28:	08002ce9 	.word	0x08002ce9
 8002d2c:	08002ce9 	.word	0x08002ce9
 8002d30:	08002ebf 	.word	0x08002ebf
 8002d34:	08002e97 	.word	0x08002e97
 8002d38:	08002ce9 	.word	0x08002ce9
 8002d3c:	08002ce9 	.word	0x08002ce9
 8002d40:	08002e6d 	.word	0x08002e6d
 8002d44:	08002ce9 	.word	0x08002ce9
 8002d48:	08002ce9 	.word	0x08002ce9
 8002d4c:	08002ce9 	.word	0x08002ce9
 8002d50:	08002ce9 	.word	0x08002ce9
 8002d54:	08002e25 	.word	0x08002e25
 8002d58:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002d5c:	e7db      	b.n	8002d16 <_scanf_float+0x92>
 8002d5e:	290e      	cmp	r1, #14
 8002d60:	d8c2      	bhi.n	8002ce8 <_scanf_float+0x64>
 8002d62:	a001      	add	r0, pc, #4	; (adr r0, 8002d68 <_scanf_float+0xe4>)
 8002d64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002d68:	08002e17 	.word	0x08002e17
 8002d6c:	08002ce9 	.word	0x08002ce9
 8002d70:	08002e17 	.word	0x08002e17
 8002d74:	08002eab 	.word	0x08002eab
 8002d78:	08002ce9 	.word	0x08002ce9
 8002d7c:	08002dc5 	.word	0x08002dc5
 8002d80:	08002e01 	.word	0x08002e01
 8002d84:	08002e01 	.word	0x08002e01
 8002d88:	08002e01 	.word	0x08002e01
 8002d8c:	08002e01 	.word	0x08002e01
 8002d90:	08002e01 	.word	0x08002e01
 8002d94:	08002e01 	.word	0x08002e01
 8002d98:	08002e01 	.word	0x08002e01
 8002d9c:	08002e01 	.word	0x08002e01
 8002da0:	08002e01 	.word	0x08002e01
 8002da4:	2b6e      	cmp	r3, #110	; 0x6e
 8002da6:	d809      	bhi.n	8002dbc <_scanf_float+0x138>
 8002da8:	2b60      	cmp	r3, #96	; 0x60
 8002daa:	d8b2      	bhi.n	8002d12 <_scanf_float+0x8e>
 8002dac:	2b54      	cmp	r3, #84	; 0x54
 8002dae:	d077      	beq.n	8002ea0 <_scanf_float+0x21c>
 8002db0:	2b59      	cmp	r3, #89	; 0x59
 8002db2:	d199      	bne.n	8002ce8 <_scanf_float+0x64>
 8002db4:	2d07      	cmp	r5, #7
 8002db6:	d197      	bne.n	8002ce8 <_scanf_float+0x64>
 8002db8:	2508      	movs	r5, #8
 8002dba:	e029      	b.n	8002e10 <_scanf_float+0x18c>
 8002dbc:	2b74      	cmp	r3, #116	; 0x74
 8002dbe:	d06f      	beq.n	8002ea0 <_scanf_float+0x21c>
 8002dc0:	2b79      	cmp	r3, #121	; 0x79
 8002dc2:	e7f6      	b.n	8002db2 <_scanf_float+0x12e>
 8002dc4:	6821      	ldr	r1, [r4, #0]
 8002dc6:	05c8      	lsls	r0, r1, #23
 8002dc8:	d51a      	bpl.n	8002e00 <_scanf_float+0x17c>
 8002dca:	9b02      	ldr	r3, [sp, #8]
 8002dcc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002dd0:	6021      	str	r1, [r4, #0]
 8002dd2:	f109 0901 	add.w	r9, r9, #1
 8002dd6:	b11b      	cbz	r3, 8002de0 <_scanf_float+0x15c>
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	3201      	adds	r2, #1
 8002ddc:	9302      	str	r3, [sp, #8]
 8002dde:	60a2      	str	r2, [r4, #8]
 8002de0:	68a3      	ldr	r3, [r4, #8]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	60a3      	str	r3, [r4, #8]
 8002de6:	6923      	ldr	r3, [r4, #16]
 8002de8:	3301      	adds	r3, #1
 8002dea:	6123      	str	r3, [r4, #16]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	607b      	str	r3, [r7, #4]
 8002df4:	f340 8084 	ble.w	8002f00 <_scanf_float+0x27c>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	e766      	b.n	8002cce <_scanf_float+0x4a>
 8002e00:	eb1a 0f05 	cmn.w	sl, r5
 8002e04:	f47f af70 	bne.w	8002ce8 <_scanf_float+0x64>
 8002e08:	6822      	ldr	r2, [r4, #0]
 8002e0a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8002e0e:	6022      	str	r2, [r4, #0]
 8002e10:	f806 3b01 	strb.w	r3, [r6], #1
 8002e14:	e7e4      	b.n	8002de0 <_scanf_float+0x15c>
 8002e16:	6822      	ldr	r2, [r4, #0]
 8002e18:	0610      	lsls	r0, r2, #24
 8002e1a:	f57f af65 	bpl.w	8002ce8 <_scanf_float+0x64>
 8002e1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e22:	e7f4      	b.n	8002e0e <_scanf_float+0x18a>
 8002e24:	f1ba 0f00 	cmp.w	sl, #0
 8002e28:	d10e      	bne.n	8002e48 <_scanf_float+0x1c4>
 8002e2a:	f1b9 0f00 	cmp.w	r9, #0
 8002e2e:	d10e      	bne.n	8002e4e <_scanf_float+0x1ca>
 8002e30:	6822      	ldr	r2, [r4, #0]
 8002e32:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8002e36:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002e3a:	d108      	bne.n	8002e4e <_scanf_float+0x1ca>
 8002e3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002e40:	f04f 0a01 	mov.w	sl, #1
 8002e44:	6022      	str	r2, [r4, #0]
 8002e46:	e7e3      	b.n	8002e10 <_scanf_float+0x18c>
 8002e48:	f1ba 0f02 	cmp.w	sl, #2
 8002e4c:	d055      	beq.n	8002efa <_scanf_float+0x276>
 8002e4e:	2d01      	cmp	r5, #1
 8002e50:	d002      	beq.n	8002e58 <_scanf_float+0x1d4>
 8002e52:	2d04      	cmp	r5, #4
 8002e54:	f47f af48 	bne.w	8002ce8 <_scanf_float+0x64>
 8002e58:	3501      	adds	r5, #1
 8002e5a:	b2ed      	uxtb	r5, r5
 8002e5c:	e7d8      	b.n	8002e10 <_scanf_float+0x18c>
 8002e5e:	f1ba 0f01 	cmp.w	sl, #1
 8002e62:	f47f af41 	bne.w	8002ce8 <_scanf_float+0x64>
 8002e66:	f04f 0a02 	mov.w	sl, #2
 8002e6a:	e7d1      	b.n	8002e10 <_scanf_float+0x18c>
 8002e6c:	b97d      	cbnz	r5, 8002e8e <_scanf_float+0x20a>
 8002e6e:	f1b9 0f00 	cmp.w	r9, #0
 8002e72:	f47f af3c 	bne.w	8002cee <_scanf_float+0x6a>
 8002e76:	6822      	ldr	r2, [r4, #0]
 8002e78:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8002e7c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002e80:	f47f af39 	bne.w	8002cf6 <_scanf_float+0x72>
 8002e84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002e88:	2501      	movs	r5, #1
 8002e8a:	6022      	str	r2, [r4, #0]
 8002e8c:	e7c0      	b.n	8002e10 <_scanf_float+0x18c>
 8002e8e:	2d03      	cmp	r5, #3
 8002e90:	d0e2      	beq.n	8002e58 <_scanf_float+0x1d4>
 8002e92:	2d05      	cmp	r5, #5
 8002e94:	e7de      	b.n	8002e54 <_scanf_float+0x1d0>
 8002e96:	2d02      	cmp	r5, #2
 8002e98:	f47f af26 	bne.w	8002ce8 <_scanf_float+0x64>
 8002e9c:	2503      	movs	r5, #3
 8002e9e:	e7b7      	b.n	8002e10 <_scanf_float+0x18c>
 8002ea0:	2d06      	cmp	r5, #6
 8002ea2:	f47f af21 	bne.w	8002ce8 <_scanf_float+0x64>
 8002ea6:	2507      	movs	r5, #7
 8002ea8:	e7b2      	b.n	8002e10 <_scanf_float+0x18c>
 8002eaa:	6822      	ldr	r2, [r4, #0]
 8002eac:	0591      	lsls	r1, r2, #22
 8002eae:	f57f af1b 	bpl.w	8002ce8 <_scanf_float+0x64>
 8002eb2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8002eb6:	6022      	str	r2, [r4, #0]
 8002eb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8002ebc:	e7a8      	b.n	8002e10 <_scanf_float+0x18c>
 8002ebe:	6822      	ldr	r2, [r4, #0]
 8002ec0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8002ec4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8002ec8:	d006      	beq.n	8002ed8 <_scanf_float+0x254>
 8002eca:	0550      	lsls	r0, r2, #21
 8002ecc:	f57f af0c 	bpl.w	8002ce8 <_scanf_float+0x64>
 8002ed0:	f1b9 0f00 	cmp.w	r9, #0
 8002ed4:	f43f af0f 	beq.w	8002cf6 <_scanf_float+0x72>
 8002ed8:	0591      	lsls	r1, r2, #22
 8002eda:	bf58      	it	pl
 8002edc:	9901      	ldrpl	r1, [sp, #4]
 8002ede:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002ee2:	bf58      	it	pl
 8002ee4:	eba9 0101 	subpl.w	r1, r9, r1
 8002ee8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8002eec:	f04f 0900 	mov.w	r9, #0
 8002ef0:	bf58      	it	pl
 8002ef2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8002ef6:	6022      	str	r2, [r4, #0]
 8002ef8:	e78a      	b.n	8002e10 <_scanf_float+0x18c>
 8002efa:	f04f 0a03 	mov.w	sl, #3
 8002efe:	e787      	b.n	8002e10 <_scanf_float+0x18c>
 8002f00:	4639      	mov	r1, r7
 8002f02:	4640      	mov	r0, r8
 8002f04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002f08:	4798      	blx	r3
 8002f0a:	2800      	cmp	r0, #0
 8002f0c:	f43f aedf 	beq.w	8002cce <_scanf_float+0x4a>
 8002f10:	e6ea      	b.n	8002ce8 <_scanf_float+0x64>
 8002f12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002f16:	463a      	mov	r2, r7
 8002f18:	4640      	mov	r0, r8
 8002f1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002f1e:	4798      	blx	r3
 8002f20:	6923      	ldr	r3, [r4, #16]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	6123      	str	r3, [r4, #16]
 8002f26:	e6ec      	b.n	8002d02 <_scanf_float+0x7e>
 8002f28:	1e6b      	subs	r3, r5, #1
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d825      	bhi.n	8002f7a <_scanf_float+0x2f6>
 8002f2e:	2d02      	cmp	r5, #2
 8002f30:	d836      	bhi.n	8002fa0 <_scanf_float+0x31c>
 8002f32:	455e      	cmp	r6, fp
 8002f34:	f67f aee8 	bls.w	8002d08 <_scanf_float+0x84>
 8002f38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002f3c:	463a      	mov	r2, r7
 8002f3e:	4640      	mov	r0, r8
 8002f40:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002f44:	4798      	blx	r3
 8002f46:	6923      	ldr	r3, [r4, #16]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	6123      	str	r3, [r4, #16]
 8002f4c:	e7f1      	b.n	8002f32 <_scanf_float+0x2ae>
 8002f4e:	9802      	ldr	r0, [sp, #8]
 8002f50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002f54:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8002f58:	463a      	mov	r2, r7
 8002f5a:	9002      	str	r0, [sp, #8]
 8002f5c:	4640      	mov	r0, r8
 8002f5e:	4798      	blx	r3
 8002f60:	6923      	ldr	r3, [r4, #16]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	6123      	str	r3, [r4, #16]
 8002f66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002f6a:	fa5f fa8a 	uxtb.w	sl, sl
 8002f6e:	f1ba 0f02 	cmp.w	sl, #2
 8002f72:	d1ec      	bne.n	8002f4e <_scanf_float+0x2ca>
 8002f74:	3d03      	subs	r5, #3
 8002f76:	b2ed      	uxtb	r5, r5
 8002f78:	1b76      	subs	r6, r6, r5
 8002f7a:	6823      	ldr	r3, [r4, #0]
 8002f7c:	05da      	lsls	r2, r3, #23
 8002f7e:	d52f      	bpl.n	8002fe0 <_scanf_float+0x35c>
 8002f80:	055b      	lsls	r3, r3, #21
 8002f82:	d510      	bpl.n	8002fa6 <_scanf_float+0x322>
 8002f84:	455e      	cmp	r6, fp
 8002f86:	f67f aebf 	bls.w	8002d08 <_scanf_float+0x84>
 8002f8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002f8e:	463a      	mov	r2, r7
 8002f90:	4640      	mov	r0, r8
 8002f92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002f96:	4798      	blx	r3
 8002f98:	6923      	ldr	r3, [r4, #16]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	6123      	str	r3, [r4, #16]
 8002f9e:	e7f1      	b.n	8002f84 <_scanf_float+0x300>
 8002fa0:	46aa      	mov	sl, r5
 8002fa2:	9602      	str	r6, [sp, #8]
 8002fa4:	e7df      	b.n	8002f66 <_scanf_float+0x2e2>
 8002fa6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8002faa:	6923      	ldr	r3, [r4, #16]
 8002fac:	2965      	cmp	r1, #101	; 0x65
 8002fae:	f103 33ff 	add.w	r3, r3, #4294967295
 8002fb2:	f106 35ff 	add.w	r5, r6, #4294967295
 8002fb6:	6123      	str	r3, [r4, #16]
 8002fb8:	d00c      	beq.n	8002fd4 <_scanf_float+0x350>
 8002fba:	2945      	cmp	r1, #69	; 0x45
 8002fbc:	d00a      	beq.n	8002fd4 <_scanf_float+0x350>
 8002fbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002fc2:	463a      	mov	r2, r7
 8002fc4:	4640      	mov	r0, r8
 8002fc6:	4798      	blx	r3
 8002fc8:	6923      	ldr	r3, [r4, #16]
 8002fca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	1eb5      	subs	r5, r6, #2
 8002fd2:	6123      	str	r3, [r4, #16]
 8002fd4:	463a      	mov	r2, r7
 8002fd6:	4640      	mov	r0, r8
 8002fd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002fdc:	4798      	blx	r3
 8002fde:	462e      	mov	r6, r5
 8002fe0:	6825      	ldr	r5, [r4, #0]
 8002fe2:	f015 0510 	ands.w	r5, r5, #16
 8002fe6:	d155      	bne.n	8003094 <_scanf_float+0x410>
 8002fe8:	7035      	strb	r5, [r6, #0]
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff4:	d11d      	bne.n	8003032 <_scanf_float+0x3ae>
 8002ff6:	9b01      	ldr	r3, [sp, #4]
 8002ff8:	454b      	cmp	r3, r9
 8002ffa:	eba3 0209 	sub.w	r2, r3, r9
 8002ffe:	d125      	bne.n	800304c <_scanf_float+0x3c8>
 8003000:	2200      	movs	r2, #0
 8003002:	4659      	mov	r1, fp
 8003004:	4640      	mov	r0, r8
 8003006:	f002 fc23 	bl	8005850 <_strtod_r>
 800300a:	9b03      	ldr	r3, [sp, #12]
 800300c:	f8d4 c000 	ldr.w	ip, [r4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f01c 0f02 	tst.w	ip, #2
 8003016:	4606      	mov	r6, r0
 8003018:	460f      	mov	r7, r1
 800301a:	f103 0204 	add.w	r2, r3, #4
 800301e:	d020      	beq.n	8003062 <_scanf_float+0x3de>
 8003020:	9903      	ldr	r1, [sp, #12]
 8003022:	600a      	str	r2, [r1, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	e9c3 6700 	strd	r6, r7, [r3]
 800302a:	68e3      	ldr	r3, [r4, #12]
 800302c:	3301      	adds	r3, #1
 800302e:	60e3      	str	r3, [r4, #12]
 8003030:	e66b      	b.n	8002d0a <_scanf_float+0x86>
 8003032:	9b04      	ldr	r3, [sp, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0e3      	beq.n	8003000 <_scanf_float+0x37c>
 8003038:	9905      	ldr	r1, [sp, #20]
 800303a:	230a      	movs	r3, #10
 800303c:	462a      	mov	r2, r5
 800303e:	4640      	mov	r0, r8
 8003040:	3101      	adds	r1, #1
 8003042:	f002 fc89 	bl	8005958 <_strtol_r>
 8003046:	9b04      	ldr	r3, [sp, #16]
 8003048:	9e05      	ldr	r6, [sp, #20]
 800304a:	1ac2      	subs	r2, r0, r3
 800304c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003050:	429e      	cmp	r6, r3
 8003052:	bf28      	it	cs
 8003054:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003058:	4630      	mov	r0, r6
 800305a:	490f      	ldr	r1, [pc, #60]	; (8003098 <_scanf_float+0x414>)
 800305c:	f000 f8e2 	bl	8003224 <siprintf>
 8003060:	e7ce      	b.n	8003000 <_scanf_float+0x37c>
 8003062:	f01c 0f04 	tst.w	ip, #4
 8003066:	d1db      	bne.n	8003020 <_scanf_float+0x39c>
 8003068:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800306c:	f8cc 2000 	str.w	r2, [ip]
 8003070:	f8d3 8000 	ldr.w	r8, [r3]
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	f7fd fcc8 	bl	8000a0c <__aeabi_dcmpun>
 800307c:	b128      	cbz	r0, 800308a <_scanf_float+0x406>
 800307e:	4807      	ldr	r0, [pc, #28]	; (800309c <_scanf_float+0x418>)
 8003080:	f000 f9c2 	bl	8003408 <nanf>
 8003084:	f8c8 0000 	str.w	r0, [r8]
 8003088:	e7cf      	b.n	800302a <_scanf_float+0x3a6>
 800308a:	4630      	mov	r0, r6
 800308c:	4639      	mov	r1, r7
 800308e:	f7fd fd1b 	bl	8000ac8 <__aeabi_d2f>
 8003092:	e7f7      	b.n	8003084 <_scanf_float+0x400>
 8003094:	2500      	movs	r5, #0
 8003096:	e638      	b.n	8002d0a <_scanf_float+0x86>
 8003098:	08006bc6 	.word	0x08006bc6
 800309c:	08006f5d 	.word	0x08006f5d

080030a0 <std>:
 80030a0:	2300      	movs	r3, #0
 80030a2:	b510      	push	{r4, lr}
 80030a4:	4604      	mov	r4, r0
 80030a6:	e9c0 3300 	strd	r3, r3, [r0]
 80030aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030ae:	6083      	str	r3, [r0, #8]
 80030b0:	8181      	strh	r1, [r0, #12]
 80030b2:	6643      	str	r3, [r0, #100]	; 0x64
 80030b4:	81c2      	strh	r2, [r0, #14]
 80030b6:	6183      	str	r3, [r0, #24]
 80030b8:	4619      	mov	r1, r3
 80030ba:	2208      	movs	r2, #8
 80030bc:	305c      	adds	r0, #92	; 0x5c
 80030be:	f000 f914 	bl	80032ea <memset>
 80030c2:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <std+0x58>)
 80030c4:	6224      	str	r4, [r4, #32]
 80030c6:	6263      	str	r3, [r4, #36]	; 0x24
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <std+0x5c>)
 80030ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <std+0x60>)
 80030ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <std+0x64>)
 80030d2:	6323      	str	r3, [r4, #48]	; 0x30
 80030d4:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <std+0x68>)
 80030d6:	429c      	cmp	r4, r3
 80030d8:	d006      	beq.n	80030e8 <std+0x48>
 80030da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80030de:	4294      	cmp	r4, r2
 80030e0:	d002      	beq.n	80030e8 <std+0x48>
 80030e2:	33d0      	adds	r3, #208	; 0xd0
 80030e4:	429c      	cmp	r4, r3
 80030e6:	d105      	bne.n	80030f4 <std+0x54>
 80030e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80030ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030f0:	f000 b978 	b.w	80033e4 <__retarget_lock_init_recursive>
 80030f4:	bd10      	pop	{r4, pc}
 80030f6:	bf00      	nop
 80030f8:	08003265 	.word	0x08003265
 80030fc:	08003287 	.word	0x08003287
 8003100:	080032bf 	.word	0x080032bf
 8003104:	080032e3 	.word	0x080032e3
 8003108:	2000024c 	.word	0x2000024c

0800310c <stdio_exit_handler>:
 800310c:	4a02      	ldr	r2, [pc, #8]	; (8003118 <stdio_exit_handler+0xc>)
 800310e:	4903      	ldr	r1, [pc, #12]	; (800311c <stdio_exit_handler+0x10>)
 8003110:	4803      	ldr	r0, [pc, #12]	; (8003120 <stdio_exit_handler+0x14>)
 8003112:	f000 b869 	b.w	80031e8 <_fwalk_sglue>
 8003116:	bf00      	nop
 8003118:	2000000c 	.word	0x2000000c
 800311c:	08005d11 	.word	0x08005d11
 8003120:	20000018 	.word	0x20000018

08003124 <cleanup_stdio>:
 8003124:	6841      	ldr	r1, [r0, #4]
 8003126:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <cleanup_stdio+0x34>)
 8003128:	b510      	push	{r4, lr}
 800312a:	4299      	cmp	r1, r3
 800312c:	4604      	mov	r4, r0
 800312e:	d001      	beq.n	8003134 <cleanup_stdio+0x10>
 8003130:	f002 fdee 	bl	8005d10 <_fflush_r>
 8003134:	68a1      	ldr	r1, [r4, #8]
 8003136:	4b09      	ldr	r3, [pc, #36]	; (800315c <cleanup_stdio+0x38>)
 8003138:	4299      	cmp	r1, r3
 800313a:	d002      	beq.n	8003142 <cleanup_stdio+0x1e>
 800313c:	4620      	mov	r0, r4
 800313e:	f002 fde7 	bl	8005d10 <_fflush_r>
 8003142:	68e1      	ldr	r1, [r4, #12]
 8003144:	4b06      	ldr	r3, [pc, #24]	; (8003160 <cleanup_stdio+0x3c>)
 8003146:	4299      	cmp	r1, r3
 8003148:	d004      	beq.n	8003154 <cleanup_stdio+0x30>
 800314a:	4620      	mov	r0, r4
 800314c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003150:	f002 bdde 	b.w	8005d10 <_fflush_r>
 8003154:	bd10      	pop	{r4, pc}
 8003156:	bf00      	nop
 8003158:	2000024c 	.word	0x2000024c
 800315c:	200002b4 	.word	0x200002b4
 8003160:	2000031c 	.word	0x2000031c

08003164 <global_stdio_init.part.0>:
 8003164:	b510      	push	{r4, lr}
 8003166:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <global_stdio_init.part.0+0x30>)
 8003168:	4c0b      	ldr	r4, [pc, #44]	; (8003198 <global_stdio_init.part.0+0x34>)
 800316a:	4a0c      	ldr	r2, [pc, #48]	; (800319c <global_stdio_init.part.0+0x38>)
 800316c:	4620      	mov	r0, r4
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	2104      	movs	r1, #4
 8003172:	2200      	movs	r2, #0
 8003174:	f7ff ff94 	bl	80030a0 <std>
 8003178:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800317c:	2201      	movs	r2, #1
 800317e:	2109      	movs	r1, #9
 8003180:	f7ff ff8e 	bl	80030a0 <std>
 8003184:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003188:	2202      	movs	r2, #2
 800318a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800318e:	2112      	movs	r1, #18
 8003190:	f7ff bf86 	b.w	80030a0 <std>
 8003194:	20000384 	.word	0x20000384
 8003198:	2000024c 	.word	0x2000024c
 800319c:	0800310d 	.word	0x0800310d

080031a0 <__sfp_lock_acquire>:
 80031a0:	4801      	ldr	r0, [pc, #4]	; (80031a8 <__sfp_lock_acquire+0x8>)
 80031a2:	f000 b920 	b.w	80033e6 <__retarget_lock_acquire_recursive>
 80031a6:	bf00      	nop
 80031a8:	2000038d 	.word	0x2000038d

080031ac <__sfp_lock_release>:
 80031ac:	4801      	ldr	r0, [pc, #4]	; (80031b4 <__sfp_lock_release+0x8>)
 80031ae:	f000 b91b 	b.w	80033e8 <__retarget_lock_release_recursive>
 80031b2:	bf00      	nop
 80031b4:	2000038d 	.word	0x2000038d

080031b8 <__sinit>:
 80031b8:	b510      	push	{r4, lr}
 80031ba:	4604      	mov	r4, r0
 80031bc:	f7ff fff0 	bl	80031a0 <__sfp_lock_acquire>
 80031c0:	6a23      	ldr	r3, [r4, #32]
 80031c2:	b11b      	cbz	r3, 80031cc <__sinit+0x14>
 80031c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031c8:	f7ff bff0 	b.w	80031ac <__sfp_lock_release>
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <__sinit+0x28>)
 80031ce:	6223      	str	r3, [r4, #32]
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <__sinit+0x2c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f5      	bne.n	80031c4 <__sinit+0xc>
 80031d8:	f7ff ffc4 	bl	8003164 <global_stdio_init.part.0>
 80031dc:	e7f2      	b.n	80031c4 <__sinit+0xc>
 80031de:	bf00      	nop
 80031e0:	08003125 	.word	0x08003125
 80031e4:	20000384 	.word	0x20000384

080031e8 <_fwalk_sglue>:
 80031e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031ec:	4607      	mov	r7, r0
 80031ee:	4688      	mov	r8, r1
 80031f0:	4614      	mov	r4, r2
 80031f2:	2600      	movs	r6, #0
 80031f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031f8:	f1b9 0901 	subs.w	r9, r9, #1
 80031fc:	d505      	bpl.n	800320a <_fwalk_sglue+0x22>
 80031fe:	6824      	ldr	r4, [r4, #0]
 8003200:	2c00      	cmp	r4, #0
 8003202:	d1f7      	bne.n	80031f4 <_fwalk_sglue+0xc>
 8003204:	4630      	mov	r0, r6
 8003206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800320a:	89ab      	ldrh	r3, [r5, #12]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d907      	bls.n	8003220 <_fwalk_sglue+0x38>
 8003210:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003214:	3301      	adds	r3, #1
 8003216:	d003      	beq.n	8003220 <_fwalk_sglue+0x38>
 8003218:	4629      	mov	r1, r5
 800321a:	4638      	mov	r0, r7
 800321c:	47c0      	blx	r8
 800321e:	4306      	orrs	r6, r0
 8003220:	3568      	adds	r5, #104	; 0x68
 8003222:	e7e9      	b.n	80031f8 <_fwalk_sglue+0x10>

08003224 <siprintf>:
 8003224:	b40e      	push	{r1, r2, r3}
 8003226:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800322a:	b500      	push	{lr}
 800322c:	b09c      	sub	sp, #112	; 0x70
 800322e:	ab1d      	add	r3, sp, #116	; 0x74
 8003230:	9002      	str	r0, [sp, #8]
 8003232:	9006      	str	r0, [sp, #24]
 8003234:	9107      	str	r1, [sp, #28]
 8003236:	9104      	str	r1, [sp, #16]
 8003238:	4808      	ldr	r0, [pc, #32]	; (800325c <siprintf+0x38>)
 800323a:	4909      	ldr	r1, [pc, #36]	; (8003260 <siprintf+0x3c>)
 800323c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003240:	9105      	str	r1, [sp, #20]
 8003242:	6800      	ldr	r0, [r0, #0]
 8003244:	a902      	add	r1, sp, #8
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	f002 fbe2 	bl	8005a10 <_svfiprintf_r>
 800324c:	2200      	movs	r2, #0
 800324e:	9b02      	ldr	r3, [sp, #8]
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	b01c      	add	sp, #112	; 0x70
 8003254:	f85d eb04 	ldr.w	lr, [sp], #4
 8003258:	b003      	add	sp, #12
 800325a:	4770      	bx	lr
 800325c:	20000064 	.word	0x20000064
 8003260:	ffff0208 	.word	0xffff0208

08003264 <__sread>:
 8003264:	b510      	push	{r4, lr}
 8003266:	460c      	mov	r4, r1
 8003268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800326c:	f000 f86c 	bl	8003348 <_read_r>
 8003270:	2800      	cmp	r0, #0
 8003272:	bfab      	itete	ge
 8003274:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003276:	89a3      	ldrhlt	r3, [r4, #12]
 8003278:	181b      	addge	r3, r3, r0
 800327a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800327e:	bfac      	ite	ge
 8003280:	6563      	strge	r3, [r4, #84]	; 0x54
 8003282:	81a3      	strhlt	r3, [r4, #12]
 8003284:	bd10      	pop	{r4, pc}

08003286 <__swrite>:
 8003286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800328a:	461f      	mov	r7, r3
 800328c:	898b      	ldrh	r3, [r1, #12]
 800328e:	4605      	mov	r5, r0
 8003290:	05db      	lsls	r3, r3, #23
 8003292:	460c      	mov	r4, r1
 8003294:	4616      	mov	r6, r2
 8003296:	d505      	bpl.n	80032a4 <__swrite+0x1e>
 8003298:	2302      	movs	r3, #2
 800329a:	2200      	movs	r2, #0
 800329c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032a0:	f000 f840 	bl	8003324 <_lseek_r>
 80032a4:	89a3      	ldrh	r3, [r4, #12]
 80032a6:	4632      	mov	r2, r6
 80032a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032ac:	81a3      	strh	r3, [r4, #12]
 80032ae:	4628      	mov	r0, r5
 80032b0:	463b      	mov	r3, r7
 80032b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032ba:	f000 b857 	b.w	800336c <_write_r>

080032be <__sseek>:
 80032be:	b510      	push	{r4, lr}
 80032c0:	460c      	mov	r4, r1
 80032c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032c6:	f000 f82d 	bl	8003324 <_lseek_r>
 80032ca:	1c43      	adds	r3, r0, #1
 80032cc:	89a3      	ldrh	r3, [r4, #12]
 80032ce:	bf15      	itete	ne
 80032d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80032d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80032d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80032da:	81a3      	strheq	r3, [r4, #12]
 80032dc:	bf18      	it	ne
 80032de:	81a3      	strhne	r3, [r4, #12]
 80032e0:	bd10      	pop	{r4, pc}

080032e2 <__sclose>:
 80032e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032e6:	f000 b80d 	b.w	8003304 <_close_r>

080032ea <memset>:
 80032ea:	4603      	mov	r3, r0
 80032ec:	4402      	add	r2, r0
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d100      	bne.n	80032f4 <memset+0xa>
 80032f2:	4770      	bx	lr
 80032f4:	f803 1b01 	strb.w	r1, [r3], #1
 80032f8:	e7f9      	b.n	80032ee <memset+0x4>
	...

080032fc <_localeconv_r>:
 80032fc:	4800      	ldr	r0, [pc, #0]	; (8003300 <_localeconv_r+0x4>)
 80032fe:	4770      	bx	lr
 8003300:	20000158 	.word	0x20000158

08003304 <_close_r>:
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	2300      	movs	r3, #0
 8003308:	4d05      	ldr	r5, [pc, #20]	; (8003320 <_close_r+0x1c>)
 800330a:	4604      	mov	r4, r0
 800330c:	4608      	mov	r0, r1
 800330e:	602b      	str	r3, [r5, #0]
 8003310:	f7fd fe7d 	bl	800100e <_close>
 8003314:	1c43      	adds	r3, r0, #1
 8003316:	d102      	bne.n	800331e <_close_r+0x1a>
 8003318:	682b      	ldr	r3, [r5, #0]
 800331a:	b103      	cbz	r3, 800331e <_close_r+0x1a>
 800331c:	6023      	str	r3, [r4, #0]
 800331e:	bd38      	pop	{r3, r4, r5, pc}
 8003320:	20000388 	.word	0x20000388

08003324 <_lseek_r>:
 8003324:	b538      	push	{r3, r4, r5, lr}
 8003326:	4604      	mov	r4, r0
 8003328:	4608      	mov	r0, r1
 800332a:	4611      	mov	r1, r2
 800332c:	2200      	movs	r2, #0
 800332e:	4d05      	ldr	r5, [pc, #20]	; (8003344 <_lseek_r+0x20>)
 8003330:	602a      	str	r2, [r5, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	f7fd fe8f 	bl	8001056 <_lseek>
 8003338:	1c43      	adds	r3, r0, #1
 800333a:	d102      	bne.n	8003342 <_lseek_r+0x1e>
 800333c:	682b      	ldr	r3, [r5, #0]
 800333e:	b103      	cbz	r3, 8003342 <_lseek_r+0x1e>
 8003340:	6023      	str	r3, [r4, #0]
 8003342:	bd38      	pop	{r3, r4, r5, pc}
 8003344:	20000388 	.word	0x20000388

08003348 <_read_r>:
 8003348:	b538      	push	{r3, r4, r5, lr}
 800334a:	4604      	mov	r4, r0
 800334c:	4608      	mov	r0, r1
 800334e:	4611      	mov	r1, r2
 8003350:	2200      	movs	r2, #0
 8003352:	4d05      	ldr	r5, [pc, #20]	; (8003368 <_read_r+0x20>)
 8003354:	602a      	str	r2, [r5, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	f7fd fe20 	bl	8000f9c <_read>
 800335c:	1c43      	adds	r3, r0, #1
 800335e:	d102      	bne.n	8003366 <_read_r+0x1e>
 8003360:	682b      	ldr	r3, [r5, #0]
 8003362:	b103      	cbz	r3, 8003366 <_read_r+0x1e>
 8003364:	6023      	str	r3, [r4, #0]
 8003366:	bd38      	pop	{r3, r4, r5, pc}
 8003368:	20000388 	.word	0x20000388

0800336c <_write_r>:
 800336c:	b538      	push	{r3, r4, r5, lr}
 800336e:	4604      	mov	r4, r0
 8003370:	4608      	mov	r0, r1
 8003372:	4611      	mov	r1, r2
 8003374:	2200      	movs	r2, #0
 8003376:	4d05      	ldr	r5, [pc, #20]	; (800338c <_write_r+0x20>)
 8003378:	602a      	str	r2, [r5, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	f7fd fe2b 	bl	8000fd6 <_write>
 8003380:	1c43      	adds	r3, r0, #1
 8003382:	d102      	bne.n	800338a <_write_r+0x1e>
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	b103      	cbz	r3, 800338a <_write_r+0x1e>
 8003388:	6023      	str	r3, [r4, #0]
 800338a:	bd38      	pop	{r3, r4, r5, pc}
 800338c:	20000388 	.word	0x20000388

08003390 <__errno>:
 8003390:	4b01      	ldr	r3, [pc, #4]	; (8003398 <__errno+0x8>)
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20000064 	.word	0x20000064

0800339c <__libc_init_array>:
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	2600      	movs	r6, #0
 80033a0:	4d0c      	ldr	r5, [pc, #48]	; (80033d4 <__libc_init_array+0x38>)
 80033a2:	4c0d      	ldr	r4, [pc, #52]	; (80033d8 <__libc_init_array+0x3c>)
 80033a4:	1b64      	subs	r4, r4, r5
 80033a6:	10a4      	asrs	r4, r4, #2
 80033a8:	42a6      	cmp	r6, r4
 80033aa:	d109      	bne.n	80033c0 <__libc_init_array+0x24>
 80033ac:	f003 fbc2 	bl	8006b34 <_init>
 80033b0:	2600      	movs	r6, #0
 80033b2:	4d0a      	ldr	r5, [pc, #40]	; (80033dc <__libc_init_array+0x40>)
 80033b4:	4c0a      	ldr	r4, [pc, #40]	; (80033e0 <__libc_init_array+0x44>)
 80033b6:	1b64      	subs	r4, r4, r5
 80033b8:	10a4      	asrs	r4, r4, #2
 80033ba:	42a6      	cmp	r6, r4
 80033bc:	d105      	bne.n	80033ca <__libc_init_array+0x2e>
 80033be:	bd70      	pop	{r4, r5, r6, pc}
 80033c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c4:	4798      	blx	r3
 80033c6:	3601      	adds	r6, #1
 80033c8:	e7ee      	b.n	80033a8 <__libc_init_array+0xc>
 80033ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ce:	4798      	blx	r3
 80033d0:	3601      	adds	r6, #1
 80033d2:	e7f2      	b.n	80033ba <__libc_init_array+0x1e>
 80033d4:	08006fc0 	.word	0x08006fc0
 80033d8:	08006fc0 	.word	0x08006fc0
 80033dc:	08006fc0 	.word	0x08006fc0
 80033e0:	08006fc4 	.word	0x08006fc4

080033e4 <__retarget_lock_init_recursive>:
 80033e4:	4770      	bx	lr

080033e6 <__retarget_lock_acquire_recursive>:
 80033e6:	4770      	bx	lr

080033e8 <__retarget_lock_release_recursive>:
 80033e8:	4770      	bx	lr

080033ea <memchr>:
 80033ea:	4603      	mov	r3, r0
 80033ec:	b510      	push	{r4, lr}
 80033ee:	b2c9      	uxtb	r1, r1
 80033f0:	4402      	add	r2, r0
 80033f2:	4293      	cmp	r3, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	d101      	bne.n	80033fc <memchr+0x12>
 80033f8:	2000      	movs	r0, #0
 80033fa:	e003      	b.n	8003404 <memchr+0x1a>
 80033fc:	7804      	ldrb	r4, [r0, #0]
 80033fe:	3301      	adds	r3, #1
 8003400:	428c      	cmp	r4, r1
 8003402:	d1f6      	bne.n	80033f2 <memchr+0x8>
 8003404:	bd10      	pop	{r4, pc}
	...

08003408 <nanf>:
 8003408:	4800      	ldr	r0, [pc, #0]	; (800340c <nanf+0x4>)
 800340a:	4770      	bx	lr
 800340c:	7fc00000 	.word	0x7fc00000

08003410 <quorem>:
 8003410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003414:	6903      	ldr	r3, [r0, #16]
 8003416:	690c      	ldr	r4, [r1, #16]
 8003418:	4607      	mov	r7, r0
 800341a:	42a3      	cmp	r3, r4
 800341c:	db7f      	blt.n	800351e <quorem+0x10e>
 800341e:	3c01      	subs	r4, #1
 8003420:	f100 0514 	add.w	r5, r0, #20
 8003424:	f101 0814 	add.w	r8, r1, #20
 8003428:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800342c:	9301      	str	r3, [sp, #4]
 800342e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003432:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003436:	3301      	adds	r3, #1
 8003438:	429a      	cmp	r2, r3
 800343a:	fbb2 f6f3 	udiv	r6, r2, r3
 800343e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003442:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003446:	d331      	bcc.n	80034ac <quorem+0x9c>
 8003448:	f04f 0e00 	mov.w	lr, #0
 800344c:	4640      	mov	r0, r8
 800344e:	46ac      	mov	ip, r5
 8003450:	46f2      	mov	sl, lr
 8003452:	f850 2b04 	ldr.w	r2, [r0], #4
 8003456:	b293      	uxth	r3, r2
 8003458:	fb06 e303 	mla	r3, r6, r3, lr
 800345c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003460:	0c1a      	lsrs	r2, r3, #16
 8003462:	b29b      	uxth	r3, r3
 8003464:	fb06 220e 	mla	r2, r6, lr, r2
 8003468:	ebaa 0303 	sub.w	r3, sl, r3
 800346c:	f8dc a000 	ldr.w	sl, [ip]
 8003470:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003474:	fa1f fa8a 	uxth.w	sl, sl
 8003478:	4453      	add	r3, sl
 800347a:	f8dc a000 	ldr.w	sl, [ip]
 800347e:	b292      	uxth	r2, r2
 8003480:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003484:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003488:	b29b      	uxth	r3, r3
 800348a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800348e:	4581      	cmp	r9, r0
 8003490:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003494:	f84c 3b04 	str.w	r3, [ip], #4
 8003498:	d2db      	bcs.n	8003452 <quorem+0x42>
 800349a:	f855 300b 	ldr.w	r3, [r5, fp]
 800349e:	b92b      	cbnz	r3, 80034ac <quorem+0x9c>
 80034a0:	9b01      	ldr	r3, [sp, #4]
 80034a2:	3b04      	subs	r3, #4
 80034a4:	429d      	cmp	r5, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	d32d      	bcc.n	8003506 <quorem+0xf6>
 80034aa:	613c      	str	r4, [r7, #16]
 80034ac:	4638      	mov	r0, r7
 80034ae:	f001 f9df 	bl	8004870 <__mcmp>
 80034b2:	2800      	cmp	r0, #0
 80034b4:	db23      	blt.n	80034fe <quorem+0xee>
 80034b6:	4629      	mov	r1, r5
 80034b8:	2000      	movs	r0, #0
 80034ba:	3601      	adds	r6, #1
 80034bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80034c0:	f8d1 c000 	ldr.w	ip, [r1]
 80034c4:	b293      	uxth	r3, r2
 80034c6:	1ac3      	subs	r3, r0, r3
 80034c8:	0c12      	lsrs	r2, r2, #16
 80034ca:	fa1f f08c 	uxth.w	r0, ip
 80034ce:	4403      	add	r3, r0
 80034d0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80034d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80034d8:	b29b      	uxth	r3, r3
 80034da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80034de:	45c1      	cmp	r9, r8
 80034e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80034e4:	f841 3b04 	str.w	r3, [r1], #4
 80034e8:	d2e8      	bcs.n	80034bc <quorem+0xac>
 80034ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80034ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80034f2:	b922      	cbnz	r2, 80034fe <quorem+0xee>
 80034f4:	3b04      	subs	r3, #4
 80034f6:	429d      	cmp	r5, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	d30a      	bcc.n	8003512 <quorem+0x102>
 80034fc:	613c      	str	r4, [r7, #16]
 80034fe:	4630      	mov	r0, r6
 8003500:	b003      	add	sp, #12
 8003502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	3b04      	subs	r3, #4
 800350a:	2a00      	cmp	r2, #0
 800350c:	d1cd      	bne.n	80034aa <quorem+0x9a>
 800350e:	3c01      	subs	r4, #1
 8003510:	e7c8      	b.n	80034a4 <quorem+0x94>
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	3b04      	subs	r3, #4
 8003516:	2a00      	cmp	r2, #0
 8003518:	d1f0      	bne.n	80034fc <quorem+0xec>
 800351a:	3c01      	subs	r4, #1
 800351c:	e7eb      	b.n	80034f6 <quorem+0xe6>
 800351e:	2000      	movs	r0, #0
 8003520:	e7ee      	b.n	8003500 <quorem+0xf0>
 8003522:	0000      	movs	r0, r0
 8003524:	0000      	movs	r0, r0
	...

08003528 <_dtoa_r>:
 8003528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800352c:	4616      	mov	r6, r2
 800352e:	461f      	mov	r7, r3
 8003530:	69c4      	ldr	r4, [r0, #28]
 8003532:	b099      	sub	sp, #100	; 0x64
 8003534:	4605      	mov	r5, r0
 8003536:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800353a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800353e:	b974      	cbnz	r4, 800355e <_dtoa_r+0x36>
 8003540:	2010      	movs	r0, #16
 8003542:	f000 fe1d 	bl	8004180 <malloc>
 8003546:	4602      	mov	r2, r0
 8003548:	61e8      	str	r0, [r5, #28]
 800354a:	b920      	cbnz	r0, 8003556 <_dtoa_r+0x2e>
 800354c:	21ef      	movs	r1, #239	; 0xef
 800354e:	4bac      	ldr	r3, [pc, #688]	; (8003800 <_dtoa_r+0x2d8>)
 8003550:	48ac      	ldr	r0, [pc, #688]	; (8003804 <_dtoa_r+0x2dc>)
 8003552:	f002 fc55 	bl	8005e00 <__assert_func>
 8003556:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800355a:	6004      	str	r4, [r0, #0]
 800355c:	60c4      	str	r4, [r0, #12]
 800355e:	69eb      	ldr	r3, [r5, #28]
 8003560:	6819      	ldr	r1, [r3, #0]
 8003562:	b151      	cbz	r1, 800357a <_dtoa_r+0x52>
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	2301      	movs	r3, #1
 8003568:	4093      	lsls	r3, r2
 800356a:	604a      	str	r2, [r1, #4]
 800356c:	608b      	str	r3, [r1, #8]
 800356e:	4628      	mov	r0, r5
 8003570:	f000 fefa 	bl	8004368 <_Bfree>
 8003574:	2200      	movs	r2, #0
 8003576:	69eb      	ldr	r3, [r5, #28]
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	1e3b      	subs	r3, r7, #0
 800357c:	bfaf      	iteee	ge
 800357e:	2300      	movge	r3, #0
 8003580:	2201      	movlt	r2, #1
 8003582:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003586:	9305      	strlt	r3, [sp, #20]
 8003588:	bfa8      	it	ge
 800358a:	f8c8 3000 	strge.w	r3, [r8]
 800358e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003592:	4b9d      	ldr	r3, [pc, #628]	; (8003808 <_dtoa_r+0x2e0>)
 8003594:	bfb8      	it	lt
 8003596:	f8c8 2000 	strlt.w	r2, [r8]
 800359a:	ea33 0309 	bics.w	r3, r3, r9
 800359e:	d119      	bne.n	80035d4 <_dtoa_r+0xac>
 80035a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80035a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80035ac:	4333      	orrs	r3, r6
 80035ae:	f000 8589 	beq.w	80040c4 <_dtoa_r+0xb9c>
 80035b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80035b4:	b953      	cbnz	r3, 80035cc <_dtoa_r+0xa4>
 80035b6:	4b95      	ldr	r3, [pc, #596]	; (800380c <_dtoa_r+0x2e4>)
 80035b8:	e023      	b.n	8003602 <_dtoa_r+0xda>
 80035ba:	4b95      	ldr	r3, [pc, #596]	; (8003810 <_dtoa_r+0x2e8>)
 80035bc:	9303      	str	r3, [sp, #12]
 80035be:	3308      	adds	r3, #8
 80035c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	9803      	ldr	r0, [sp, #12]
 80035c6:	b019      	add	sp, #100	; 0x64
 80035c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035cc:	4b8f      	ldr	r3, [pc, #572]	; (800380c <_dtoa_r+0x2e4>)
 80035ce:	9303      	str	r3, [sp, #12]
 80035d0:	3303      	adds	r3, #3
 80035d2:	e7f5      	b.n	80035c0 <_dtoa_r+0x98>
 80035d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80035d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80035dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80035e0:	2200      	movs	r2, #0
 80035e2:	2300      	movs	r3, #0
 80035e4:	f7fd f9e0 	bl	80009a8 <__aeabi_dcmpeq>
 80035e8:	4680      	mov	r8, r0
 80035ea:	b160      	cbz	r0, 8003606 <_dtoa_r+0xde>
 80035ec:	2301      	movs	r3, #1
 80035ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8562 	beq.w	80040be <_dtoa_r+0xb96>
 80035fa:	4b86      	ldr	r3, [pc, #536]	; (8003814 <_dtoa_r+0x2ec>)
 80035fc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	3b01      	subs	r3, #1
 8003602:	9303      	str	r3, [sp, #12]
 8003604:	e7de      	b.n	80035c4 <_dtoa_r+0x9c>
 8003606:	ab16      	add	r3, sp, #88	; 0x58
 8003608:	9301      	str	r3, [sp, #4]
 800360a:	ab17      	add	r3, sp, #92	; 0x5c
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	4628      	mov	r0, r5
 8003610:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003614:	f001 fa3c 	bl	8004a90 <__d2b>
 8003618:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800361c:	4682      	mov	sl, r0
 800361e:	2c00      	cmp	r4, #0
 8003620:	d07e      	beq.n	8003720 <_dtoa_r+0x1f8>
 8003622:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003628:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800362c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003630:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003634:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003638:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800363c:	4619      	mov	r1, r3
 800363e:	2200      	movs	r2, #0
 8003640:	4b75      	ldr	r3, [pc, #468]	; (8003818 <_dtoa_r+0x2f0>)
 8003642:	f7fc fd91 	bl	8000168 <__aeabi_dsub>
 8003646:	a368      	add	r3, pc, #416	; (adr r3, 80037e8 <_dtoa_r+0x2c0>)
 8003648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364c:	f7fc ff44 	bl	80004d8 <__aeabi_dmul>
 8003650:	a367      	add	r3, pc, #412	; (adr r3, 80037f0 <_dtoa_r+0x2c8>)
 8003652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003656:	f7fc fd89 	bl	800016c <__adddf3>
 800365a:	4606      	mov	r6, r0
 800365c:	4620      	mov	r0, r4
 800365e:	460f      	mov	r7, r1
 8003660:	f7fc fed0 	bl	8000404 <__aeabi_i2d>
 8003664:	a364      	add	r3, pc, #400	; (adr r3, 80037f8 <_dtoa_r+0x2d0>)
 8003666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366a:	f7fc ff35 	bl	80004d8 <__aeabi_dmul>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4630      	mov	r0, r6
 8003674:	4639      	mov	r1, r7
 8003676:	f7fc fd79 	bl	800016c <__adddf3>
 800367a:	4606      	mov	r6, r0
 800367c:	460f      	mov	r7, r1
 800367e:	f7fd f9db 	bl	8000a38 <__aeabi_d2iz>
 8003682:	2200      	movs	r2, #0
 8003684:	4683      	mov	fp, r0
 8003686:	2300      	movs	r3, #0
 8003688:	4630      	mov	r0, r6
 800368a:	4639      	mov	r1, r7
 800368c:	f7fd f996 	bl	80009bc <__aeabi_dcmplt>
 8003690:	b148      	cbz	r0, 80036a6 <_dtoa_r+0x17e>
 8003692:	4658      	mov	r0, fp
 8003694:	f7fc feb6 	bl	8000404 <__aeabi_i2d>
 8003698:	4632      	mov	r2, r6
 800369a:	463b      	mov	r3, r7
 800369c:	f7fd f984 	bl	80009a8 <__aeabi_dcmpeq>
 80036a0:	b908      	cbnz	r0, 80036a6 <_dtoa_r+0x17e>
 80036a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80036a6:	f1bb 0f16 	cmp.w	fp, #22
 80036aa:	d857      	bhi.n	800375c <_dtoa_r+0x234>
 80036ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80036b0:	4b5a      	ldr	r3, [pc, #360]	; (800381c <_dtoa_r+0x2f4>)
 80036b2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	f7fd f97f 	bl	80009bc <__aeabi_dcmplt>
 80036be:	2800      	cmp	r0, #0
 80036c0:	d04e      	beq.n	8003760 <_dtoa_r+0x238>
 80036c2:	2300      	movs	r3, #0
 80036c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80036c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80036ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80036cc:	1b1b      	subs	r3, r3, r4
 80036ce:	1e5a      	subs	r2, r3, #1
 80036d0:	bf46      	itte	mi
 80036d2:	f1c3 0901 	rsbmi	r9, r3, #1
 80036d6:	2300      	movmi	r3, #0
 80036d8:	f04f 0900 	movpl.w	r9, #0
 80036dc:	9209      	str	r2, [sp, #36]	; 0x24
 80036de:	bf48      	it	mi
 80036e0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80036e2:	f1bb 0f00 	cmp.w	fp, #0
 80036e6:	db3d      	blt.n	8003764 <_dtoa_r+0x23c>
 80036e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036ea:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80036ee:	445b      	add	r3, fp
 80036f0:	9309      	str	r3, [sp, #36]	; 0x24
 80036f2:	2300      	movs	r3, #0
 80036f4:	930a      	str	r3, [sp, #40]	; 0x28
 80036f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80036f8:	2b09      	cmp	r3, #9
 80036fa:	d867      	bhi.n	80037cc <_dtoa_r+0x2a4>
 80036fc:	2b05      	cmp	r3, #5
 80036fe:	bfc4      	itt	gt
 8003700:	3b04      	subgt	r3, #4
 8003702:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003704:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003706:	bfc8      	it	gt
 8003708:	2400      	movgt	r4, #0
 800370a:	f1a3 0302 	sub.w	r3, r3, #2
 800370e:	bfd8      	it	le
 8003710:	2401      	movle	r4, #1
 8003712:	2b03      	cmp	r3, #3
 8003714:	f200 8086 	bhi.w	8003824 <_dtoa_r+0x2fc>
 8003718:	e8df f003 	tbb	[pc, r3]
 800371c:	5637392c 	.word	0x5637392c
 8003720:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003724:	441c      	add	r4, r3
 8003726:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800372a:	2b20      	cmp	r3, #32
 800372c:	bfc1      	itttt	gt
 800372e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003732:	fa09 f903 	lslgt.w	r9, r9, r3
 8003736:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800373a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800373e:	bfd6      	itet	le
 8003740:	f1c3 0320 	rsble	r3, r3, #32
 8003744:	ea49 0003 	orrgt.w	r0, r9, r3
 8003748:	fa06 f003 	lslle.w	r0, r6, r3
 800374c:	f7fc fe4a 	bl	80003e4 <__aeabi_ui2d>
 8003750:	2201      	movs	r2, #1
 8003752:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003756:	3c01      	subs	r4, #1
 8003758:	9213      	str	r2, [sp, #76]	; 0x4c
 800375a:	e76f      	b.n	800363c <_dtoa_r+0x114>
 800375c:	2301      	movs	r3, #1
 800375e:	e7b3      	b.n	80036c8 <_dtoa_r+0x1a0>
 8003760:	900f      	str	r0, [sp, #60]	; 0x3c
 8003762:	e7b2      	b.n	80036ca <_dtoa_r+0x1a2>
 8003764:	f1cb 0300 	rsb	r3, fp, #0
 8003768:	930a      	str	r3, [sp, #40]	; 0x28
 800376a:	2300      	movs	r3, #0
 800376c:	eba9 090b 	sub.w	r9, r9, fp
 8003770:	930e      	str	r3, [sp, #56]	; 0x38
 8003772:	e7c0      	b.n	80036f6 <_dtoa_r+0x1ce>
 8003774:	2300      	movs	r3, #0
 8003776:	930b      	str	r3, [sp, #44]	; 0x2c
 8003778:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800377a:	2b00      	cmp	r3, #0
 800377c:	dc55      	bgt.n	800382a <_dtoa_r+0x302>
 800377e:	2301      	movs	r3, #1
 8003780:	461a      	mov	r2, r3
 8003782:	9306      	str	r3, [sp, #24]
 8003784:	9308      	str	r3, [sp, #32]
 8003786:	9223      	str	r2, [sp, #140]	; 0x8c
 8003788:	e00b      	b.n	80037a2 <_dtoa_r+0x27a>
 800378a:	2301      	movs	r3, #1
 800378c:	e7f3      	b.n	8003776 <_dtoa_r+0x24e>
 800378e:	2300      	movs	r3, #0
 8003790:	930b      	str	r3, [sp, #44]	; 0x2c
 8003792:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003794:	445b      	add	r3, fp
 8003796:	9306      	str	r3, [sp, #24]
 8003798:	3301      	adds	r3, #1
 800379a:	2b01      	cmp	r3, #1
 800379c:	9308      	str	r3, [sp, #32]
 800379e:	bfb8      	it	lt
 80037a0:	2301      	movlt	r3, #1
 80037a2:	2100      	movs	r1, #0
 80037a4:	2204      	movs	r2, #4
 80037a6:	69e8      	ldr	r0, [r5, #28]
 80037a8:	f102 0614 	add.w	r6, r2, #20
 80037ac:	429e      	cmp	r6, r3
 80037ae:	d940      	bls.n	8003832 <_dtoa_r+0x30a>
 80037b0:	6041      	str	r1, [r0, #4]
 80037b2:	4628      	mov	r0, r5
 80037b4:	f000 fd98 	bl	80042e8 <_Balloc>
 80037b8:	9003      	str	r0, [sp, #12]
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d13c      	bne.n	8003838 <_dtoa_r+0x310>
 80037be:	4602      	mov	r2, r0
 80037c0:	f240 11af 	movw	r1, #431	; 0x1af
 80037c4:	4b16      	ldr	r3, [pc, #88]	; (8003820 <_dtoa_r+0x2f8>)
 80037c6:	e6c3      	b.n	8003550 <_dtoa_r+0x28>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e7e1      	b.n	8003790 <_dtoa_r+0x268>
 80037cc:	2401      	movs	r4, #1
 80037ce:	2300      	movs	r3, #0
 80037d0:	940b      	str	r4, [sp, #44]	; 0x2c
 80037d2:	9322      	str	r3, [sp, #136]	; 0x88
 80037d4:	f04f 33ff 	mov.w	r3, #4294967295
 80037d8:	2200      	movs	r2, #0
 80037da:	9306      	str	r3, [sp, #24]
 80037dc:	9308      	str	r3, [sp, #32]
 80037de:	2312      	movs	r3, #18
 80037e0:	e7d1      	b.n	8003786 <_dtoa_r+0x25e>
 80037e2:	bf00      	nop
 80037e4:	f3af 8000 	nop.w
 80037e8:	636f4361 	.word	0x636f4361
 80037ec:	3fd287a7 	.word	0x3fd287a7
 80037f0:	8b60c8b3 	.word	0x8b60c8b3
 80037f4:	3fc68a28 	.word	0x3fc68a28
 80037f8:	509f79fb 	.word	0x509f79fb
 80037fc:	3fd34413 	.word	0x3fd34413
 8003800:	08006bd8 	.word	0x08006bd8
 8003804:	08006bef 	.word	0x08006bef
 8003808:	7ff00000 	.word	0x7ff00000
 800380c:	08006bd4 	.word	0x08006bd4
 8003810:	08006bcb 	.word	0x08006bcb
 8003814:	08006ba3 	.word	0x08006ba3
 8003818:	3ff80000 	.word	0x3ff80000
 800381c:	08006ce0 	.word	0x08006ce0
 8003820:	08006c47 	.word	0x08006c47
 8003824:	2301      	movs	r3, #1
 8003826:	930b      	str	r3, [sp, #44]	; 0x2c
 8003828:	e7d4      	b.n	80037d4 <_dtoa_r+0x2ac>
 800382a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800382c:	9306      	str	r3, [sp, #24]
 800382e:	9308      	str	r3, [sp, #32]
 8003830:	e7b7      	b.n	80037a2 <_dtoa_r+0x27a>
 8003832:	3101      	adds	r1, #1
 8003834:	0052      	lsls	r2, r2, #1
 8003836:	e7b7      	b.n	80037a8 <_dtoa_r+0x280>
 8003838:	69eb      	ldr	r3, [r5, #28]
 800383a:	9a03      	ldr	r2, [sp, #12]
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	9b08      	ldr	r3, [sp, #32]
 8003840:	2b0e      	cmp	r3, #14
 8003842:	f200 80a8 	bhi.w	8003996 <_dtoa_r+0x46e>
 8003846:	2c00      	cmp	r4, #0
 8003848:	f000 80a5 	beq.w	8003996 <_dtoa_r+0x46e>
 800384c:	f1bb 0f00 	cmp.w	fp, #0
 8003850:	dd34      	ble.n	80038bc <_dtoa_r+0x394>
 8003852:	4b9a      	ldr	r3, [pc, #616]	; (8003abc <_dtoa_r+0x594>)
 8003854:	f00b 020f 	and.w	r2, fp, #15
 8003858:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800385c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003860:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003864:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003868:	ea4f 142b 	mov.w	r4, fp, asr #4
 800386c:	d016      	beq.n	800389c <_dtoa_r+0x374>
 800386e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003872:	4b93      	ldr	r3, [pc, #588]	; (8003ac0 <_dtoa_r+0x598>)
 8003874:	2703      	movs	r7, #3
 8003876:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800387a:	f7fc ff57 	bl	800072c <__aeabi_ddiv>
 800387e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003882:	f004 040f 	and.w	r4, r4, #15
 8003886:	4e8e      	ldr	r6, [pc, #568]	; (8003ac0 <_dtoa_r+0x598>)
 8003888:	b954      	cbnz	r4, 80038a0 <_dtoa_r+0x378>
 800388a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800388e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003892:	f7fc ff4b 	bl	800072c <__aeabi_ddiv>
 8003896:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800389a:	e029      	b.n	80038f0 <_dtoa_r+0x3c8>
 800389c:	2702      	movs	r7, #2
 800389e:	e7f2      	b.n	8003886 <_dtoa_r+0x35e>
 80038a0:	07e1      	lsls	r1, r4, #31
 80038a2:	d508      	bpl.n	80038b6 <_dtoa_r+0x38e>
 80038a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80038a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80038ac:	f7fc fe14 	bl	80004d8 <__aeabi_dmul>
 80038b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80038b4:	3701      	adds	r7, #1
 80038b6:	1064      	asrs	r4, r4, #1
 80038b8:	3608      	adds	r6, #8
 80038ba:	e7e5      	b.n	8003888 <_dtoa_r+0x360>
 80038bc:	f000 80a5 	beq.w	8003a0a <_dtoa_r+0x4e2>
 80038c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80038c4:	f1cb 0400 	rsb	r4, fp, #0
 80038c8:	4b7c      	ldr	r3, [pc, #496]	; (8003abc <_dtoa_r+0x594>)
 80038ca:	f004 020f 	and.w	r2, r4, #15
 80038ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80038d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d6:	f7fc fdff 	bl	80004d8 <__aeabi_dmul>
 80038da:	2702      	movs	r7, #2
 80038dc:	2300      	movs	r3, #0
 80038de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80038e2:	4e77      	ldr	r6, [pc, #476]	; (8003ac0 <_dtoa_r+0x598>)
 80038e4:	1124      	asrs	r4, r4, #4
 80038e6:	2c00      	cmp	r4, #0
 80038e8:	f040 8084 	bne.w	80039f4 <_dtoa_r+0x4cc>
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1d2      	bne.n	8003896 <_dtoa_r+0x36e>
 80038f0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80038f4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80038f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 8087 	beq.w	8003a0e <_dtoa_r+0x4e6>
 8003900:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003904:	2200      	movs	r2, #0
 8003906:	4b6f      	ldr	r3, [pc, #444]	; (8003ac4 <_dtoa_r+0x59c>)
 8003908:	f7fd f858 	bl	80009bc <__aeabi_dcmplt>
 800390c:	2800      	cmp	r0, #0
 800390e:	d07e      	beq.n	8003a0e <_dtoa_r+0x4e6>
 8003910:	9b08      	ldr	r3, [sp, #32]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d07b      	beq.n	8003a0e <_dtoa_r+0x4e6>
 8003916:	9b06      	ldr	r3, [sp, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	dd38      	ble.n	800398e <_dtoa_r+0x466>
 800391c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003920:	2200      	movs	r2, #0
 8003922:	4b69      	ldr	r3, [pc, #420]	; (8003ac8 <_dtoa_r+0x5a0>)
 8003924:	f7fc fdd8 	bl	80004d8 <__aeabi_dmul>
 8003928:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800392c:	9c06      	ldr	r4, [sp, #24]
 800392e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8003932:	3701      	adds	r7, #1
 8003934:	4638      	mov	r0, r7
 8003936:	f7fc fd65 	bl	8000404 <__aeabi_i2d>
 800393a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800393e:	f7fc fdcb 	bl	80004d8 <__aeabi_dmul>
 8003942:	2200      	movs	r2, #0
 8003944:	4b61      	ldr	r3, [pc, #388]	; (8003acc <_dtoa_r+0x5a4>)
 8003946:	f7fc fc11 	bl	800016c <__adddf3>
 800394a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800394e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003952:	9611      	str	r6, [sp, #68]	; 0x44
 8003954:	2c00      	cmp	r4, #0
 8003956:	d15d      	bne.n	8003a14 <_dtoa_r+0x4ec>
 8003958:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800395c:	2200      	movs	r2, #0
 800395e:	4b5c      	ldr	r3, [pc, #368]	; (8003ad0 <_dtoa_r+0x5a8>)
 8003960:	f7fc fc02 	bl	8000168 <__aeabi_dsub>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800396c:	4633      	mov	r3, r6
 800396e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003970:	f7fd f842 	bl	80009f8 <__aeabi_dcmpgt>
 8003974:	2800      	cmp	r0, #0
 8003976:	f040 8295 	bne.w	8003ea4 <_dtoa_r+0x97c>
 800397a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800397e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003980:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003984:	f7fd f81a 	bl	80009bc <__aeabi_dcmplt>
 8003988:	2800      	cmp	r0, #0
 800398a:	f040 8289 	bne.w	8003ea0 <_dtoa_r+0x978>
 800398e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003992:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003996:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003998:	2b00      	cmp	r3, #0
 800399a:	f2c0 8151 	blt.w	8003c40 <_dtoa_r+0x718>
 800399e:	f1bb 0f0e 	cmp.w	fp, #14
 80039a2:	f300 814d 	bgt.w	8003c40 <_dtoa_r+0x718>
 80039a6:	4b45      	ldr	r3, [pc, #276]	; (8003abc <_dtoa_r+0x594>)
 80039a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80039ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039b0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80039b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f280 80da 	bge.w	8003b70 <_dtoa_r+0x648>
 80039bc:	9b08      	ldr	r3, [sp, #32]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f300 80d6 	bgt.w	8003b70 <_dtoa_r+0x648>
 80039c4:	f040 826b 	bne.w	8003e9e <_dtoa_r+0x976>
 80039c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039cc:	2200      	movs	r2, #0
 80039ce:	4b40      	ldr	r3, [pc, #256]	; (8003ad0 <_dtoa_r+0x5a8>)
 80039d0:	f7fc fd82 	bl	80004d8 <__aeabi_dmul>
 80039d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039d8:	f7fd f804 	bl	80009e4 <__aeabi_dcmpge>
 80039dc:	9c08      	ldr	r4, [sp, #32]
 80039de:	4626      	mov	r6, r4
 80039e0:	2800      	cmp	r0, #0
 80039e2:	f040 8241 	bne.w	8003e68 <_dtoa_r+0x940>
 80039e6:	2331      	movs	r3, #49	; 0x31
 80039e8:	9f03      	ldr	r7, [sp, #12]
 80039ea:	f10b 0b01 	add.w	fp, fp, #1
 80039ee:	f807 3b01 	strb.w	r3, [r7], #1
 80039f2:	e23d      	b.n	8003e70 <_dtoa_r+0x948>
 80039f4:	07e2      	lsls	r2, r4, #31
 80039f6:	d505      	bpl.n	8003a04 <_dtoa_r+0x4dc>
 80039f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80039fc:	f7fc fd6c 	bl	80004d8 <__aeabi_dmul>
 8003a00:	2301      	movs	r3, #1
 8003a02:	3701      	adds	r7, #1
 8003a04:	1064      	asrs	r4, r4, #1
 8003a06:	3608      	adds	r6, #8
 8003a08:	e76d      	b.n	80038e6 <_dtoa_r+0x3be>
 8003a0a:	2702      	movs	r7, #2
 8003a0c:	e770      	b.n	80038f0 <_dtoa_r+0x3c8>
 8003a0e:	46d8      	mov	r8, fp
 8003a10:	9c08      	ldr	r4, [sp, #32]
 8003a12:	e78f      	b.n	8003934 <_dtoa_r+0x40c>
 8003a14:	9903      	ldr	r1, [sp, #12]
 8003a16:	4b29      	ldr	r3, [pc, #164]	; (8003abc <_dtoa_r+0x594>)
 8003a18:	4421      	add	r1, r4
 8003a1a:	9112      	str	r1, [sp, #72]	; 0x48
 8003a1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a1e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003a22:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003a26:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003a2a:	2900      	cmp	r1, #0
 8003a2c:	d054      	beq.n	8003ad8 <_dtoa_r+0x5b0>
 8003a2e:	2000      	movs	r0, #0
 8003a30:	4928      	ldr	r1, [pc, #160]	; (8003ad4 <_dtoa_r+0x5ac>)
 8003a32:	f7fc fe7b 	bl	800072c <__aeabi_ddiv>
 8003a36:	463b      	mov	r3, r7
 8003a38:	4632      	mov	r2, r6
 8003a3a:	f7fc fb95 	bl	8000168 <__aeabi_dsub>
 8003a3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003a42:	9f03      	ldr	r7, [sp, #12]
 8003a44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a48:	f7fc fff6 	bl	8000a38 <__aeabi_d2iz>
 8003a4c:	4604      	mov	r4, r0
 8003a4e:	f7fc fcd9 	bl	8000404 <__aeabi_i2d>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a5a:	f7fc fb85 	bl	8000168 <__aeabi_dsub>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	3430      	adds	r4, #48	; 0x30
 8003a64:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003a68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003a6c:	f807 4b01 	strb.w	r4, [r7], #1
 8003a70:	f7fc ffa4 	bl	80009bc <__aeabi_dcmplt>
 8003a74:	2800      	cmp	r0, #0
 8003a76:	d173      	bne.n	8003b60 <_dtoa_r+0x638>
 8003a78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	4911      	ldr	r1, [pc, #68]	; (8003ac4 <_dtoa_r+0x59c>)
 8003a80:	f7fc fb72 	bl	8000168 <__aeabi_dsub>
 8003a84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003a88:	f7fc ff98 	bl	80009bc <__aeabi_dcmplt>
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	f040 80b6 	bne.w	8003bfe <_dtoa_r+0x6d6>
 8003a92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003a94:	429f      	cmp	r7, r3
 8003a96:	f43f af7a 	beq.w	800398e <_dtoa_r+0x466>
 8003a9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <_dtoa_r+0x5a0>)
 8003aa2:	f7fc fd19 	bl	80004d8 <__aeabi_dmul>
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003aac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <_dtoa_r+0x5a0>)
 8003ab2:	f7fc fd11 	bl	80004d8 <__aeabi_dmul>
 8003ab6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003aba:	e7c3      	b.n	8003a44 <_dtoa_r+0x51c>
 8003abc:	08006ce0 	.word	0x08006ce0
 8003ac0:	08006cb8 	.word	0x08006cb8
 8003ac4:	3ff00000 	.word	0x3ff00000
 8003ac8:	40240000 	.word	0x40240000
 8003acc:	401c0000 	.word	0x401c0000
 8003ad0:	40140000 	.word	0x40140000
 8003ad4:	3fe00000 	.word	0x3fe00000
 8003ad8:	4630      	mov	r0, r6
 8003ada:	4639      	mov	r1, r7
 8003adc:	f7fc fcfc 	bl	80004d8 <__aeabi_dmul>
 8003ae0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003ae2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003ae6:	9c03      	ldr	r4, [sp, #12]
 8003ae8:	9314      	str	r3, [sp, #80]	; 0x50
 8003aea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003aee:	f7fc ffa3 	bl	8000a38 <__aeabi_d2iz>
 8003af2:	9015      	str	r0, [sp, #84]	; 0x54
 8003af4:	f7fc fc86 	bl	8000404 <__aeabi_i2d>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b00:	f7fc fb32 	bl	8000168 <__aeabi_dsub>
 8003b04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003b06:	4606      	mov	r6, r0
 8003b08:	3330      	adds	r3, #48	; 0x30
 8003b0a:	f804 3b01 	strb.w	r3, [r4], #1
 8003b0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003b10:	460f      	mov	r7, r1
 8003b12:	429c      	cmp	r4, r3
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	d124      	bne.n	8003b64 <_dtoa_r+0x63c>
 8003b1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003b1e:	4baf      	ldr	r3, [pc, #700]	; (8003ddc <_dtoa_r+0x8b4>)
 8003b20:	f7fc fb24 	bl	800016c <__adddf3>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4630      	mov	r0, r6
 8003b2a:	4639      	mov	r1, r7
 8003b2c:	f7fc ff64 	bl	80009f8 <__aeabi_dcmpgt>
 8003b30:	2800      	cmp	r0, #0
 8003b32:	d163      	bne.n	8003bfc <_dtoa_r+0x6d4>
 8003b34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003b38:	2000      	movs	r0, #0
 8003b3a:	49a8      	ldr	r1, [pc, #672]	; (8003ddc <_dtoa_r+0x8b4>)
 8003b3c:	f7fc fb14 	bl	8000168 <__aeabi_dsub>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4630      	mov	r0, r6
 8003b46:	4639      	mov	r1, r7
 8003b48:	f7fc ff38 	bl	80009bc <__aeabi_dcmplt>
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	f43f af1e 	beq.w	800398e <_dtoa_r+0x466>
 8003b52:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003b54:	1e7b      	subs	r3, r7, #1
 8003b56:	9314      	str	r3, [sp, #80]	; 0x50
 8003b58:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003b5c:	2b30      	cmp	r3, #48	; 0x30
 8003b5e:	d0f8      	beq.n	8003b52 <_dtoa_r+0x62a>
 8003b60:	46c3      	mov	fp, r8
 8003b62:	e03b      	b.n	8003bdc <_dtoa_r+0x6b4>
 8003b64:	4b9e      	ldr	r3, [pc, #632]	; (8003de0 <_dtoa_r+0x8b8>)
 8003b66:	f7fc fcb7 	bl	80004d8 <__aeabi_dmul>
 8003b6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003b6e:	e7bc      	b.n	8003aea <_dtoa_r+0x5c2>
 8003b70:	9f03      	ldr	r7, [sp, #12]
 8003b72:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003b76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b7a:	4640      	mov	r0, r8
 8003b7c:	4649      	mov	r1, r9
 8003b7e:	f7fc fdd5 	bl	800072c <__aeabi_ddiv>
 8003b82:	f7fc ff59 	bl	8000a38 <__aeabi_d2iz>
 8003b86:	4604      	mov	r4, r0
 8003b88:	f7fc fc3c 	bl	8000404 <__aeabi_i2d>
 8003b8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b90:	f7fc fca2 	bl	80004d8 <__aeabi_dmul>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4640      	mov	r0, r8
 8003b9a:	4649      	mov	r1, r9
 8003b9c:	f7fc fae4 	bl	8000168 <__aeabi_dsub>
 8003ba0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003ba4:	f807 6b01 	strb.w	r6, [r7], #1
 8003ba8:	9e03      	ldr	r6, [sp, #12]
 8003baa:	f8dd c020 	ldr.w	ip, [sp, #32]
 8003bae:	1bbe      	subs	r6, r7, r6
 8003bb0:	45b4      	cmp	ip, r6
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	d136      	bne.n	8003c26 <_dtoa_r+0x6fe>
 8003bb8:	f7fc fad8 	bl	800016c <__adddf3>
 8003bbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003bc0:	4680      	mov	r8, r0
 8003bc2:	4689      	mov	r9, r1
 8003bc4:	f7fc ff18 	bl	80009f8 <__aeabi_dcmpgt>
 8003bc8:	bb58      	cbnz	r0, 8003c22 <_dtoa_r+0x6fa>
 8003bca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003bce:	4640      	mov	r0, r8
 8003bd0:	4649      	mov	r1, r9
 8003bd2:	f7fc fee9 	bl	80009a8 <__aeabi_dcmpeq>
 8003bd6:	b108      	cbz	r0, 8003bdc <_dtoa_r+0x6b4>
 8003bd8:	07e3      	lsls	r3, r4, #31
 8003bda:	d422      	bmi.n	8003c22 <_dtoa_r+0x6fa>
 8003bdc:	4651      	mov	r1, sl
 8003bde:	4628      	mov	r0, r5
 8003be0:	f000 fbc2 	bl	8004368 <_Bfree>
 8003be4:	2300      	movs	r3, #0
 8003be6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003be8:	703b      	strb	r3, [r7, #0]
 8003bea:	f10b 0301 	add.w	r3, fp, #1
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f43f ace6 	beq.w	80035c4 <_dtoa_r+0x9c>
 8003bf8:	601f      	str	r7, [r3, #0]
 8003bfa:	e4e3      	b.n	80035c4 <_dtoa_r+0x9c>
 8003bfc:	4627      	mov	r7, r4
 8003bfe:	463b      	mov	r3, r7
 8003c00:	461f      	mov	r7, r3
 8003c02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003c06:	2a39      	cmp	r2, #57	; 0x39
 8003c08:	d107      	bne.n	8003c1a <_dtoa_r+0x6f2>
 8003c0a:	9a03      	ldr	r2, [sp, #12]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d1f7      	bne.n	8003c00 <_dtoa_r+0x6d8>
 8003c10:	2230      	movs	r2, #48	; 0x30
 8003c12:	9903      	ldr	r1, [sp, #12]
 8003c14:	f108 0801 	add.w	r8, r8, #1
 8003c18:	700a      	strb	r2, [r1, #0]
 8003c1a:	781a      	ldrb	r2, [r3, #0]
 8003c1c:	3201      	adds	r2, #1
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	e79e      	b.n	8003b60 <_dtoa_r+0x638>
 8003c22:	46d8      	mov	r8, fp
 8003c24:	e7eb      	b.n	8003bfe <_dtoa_r+0x6d6>
 8003c26:	2200      	movs	r2, #0
 8003c28:	4b6d      	ldr	r3, [pc, #436]	; (8003de0 <_dtoa_r+0x8b8>)
 8003c2a:	f7fc fc55 	bl	80004d8 <__aeabi_dmul>
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2300      	movs	r3, #0
 8003c32:	4680      	mov	r8, r0
 8003c34:	4689      	mov	r9, r1
 8003c36:	f7fc feb7 	bl	80009a8 <__aeabi_dcmpeq>
 8003c3a:	2800      	cmp	r0, #0
 8003c3c:	d09b      	beq.n	8003b76 <_dtoa_r+0x64e>
 8003c3e:	e7cd      	b.n	8003bdc <_dtoa_r+0x6b4>
 8003c40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003c42:	2a00      	cmp	r2, #0
 8003c44:	f000 80c4 	beq.w	8003dd0 <_dtoa_r+0x8a8>
 8003c48:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003c4a:	2a01      	cmp	r2, #1
 8003c4c:	f300 80a8 	bgt.w	8003da0 <_dtoa_r+0x878>
 8003c50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003c52:	2a00      	cmp	r2, #0
 8003c54:	f000 80a0 	beq.w	8003d98 <_dtoa_r+0x870>
 8003c58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003c5c:	464f      	mov	r7, r9
 8003c5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c62:	2101      	movs	r1, #1
 8003c64:	441a      	add	r2, r3
 8003c66:	4628      	mov	r0, r5
 8003c68:	4499      	add	r9, r3
 8003c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8003c6c:	f000 fc7c 	bl	8004568 <__i2b>
 8003c70:	4606      	mov	r6, r0
 8003c72:	b15f      	cbz	r7, 8003c8c <_dtoa_r+0x764>
 8003c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	dd08      	ble.n	8003c8c <_dtoa_r+0x764>
 8003c7a:	42bb      	cmp	r3, r7
 8003c7c:	bfa8      	it	ge
 8003c7e:	463b      	movge	r3, r7
 8003c80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c82:	eba9 0903 	sub.w	r9, r9, r3
 8003c86:	1aff      	subs	r7, r7, r3
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c8e:	b1f3      	cbz	r3, 8003cce <_dtoa_r+0x7a6>
 8003c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 80a0 	beq.w	8003dd8 <_dtoa_r+0x8b0>
 8003c98:	2c00      	cmp	r4, #0
 8003c9a:	dd10      	ble.n	8003cbe <_dtoa_r+0x796>
 8003c9c:	4631      	mov	r1, r6
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	f000 fd1f 	bl	80046e4 <__pow5mult>
 8003ca6:	4652      	mov	r2, sl
 8003ca8:	4601      	mov	r1, r0
 8003caa:	4606      	mov	r6, r0
 8003cac:	4628      	mov	r0, r5
 8003cae:	f000 fc71 	bl	8004594 <__multiply>
 8003cb2:	4680      	mov	r8, r0
 8003cb4:	4651      	mov	r1, sl
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	f000 fb56 	bl	8004368 <_Bfree>
 8003cbc:	46c2      	mov	sl, r8
 8003cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cc0:	1b1a      	subs	r2, r3, r4
 8003cc2:	d004      	beq.n	8003cce <_dtoa_r+0x7a6>
 8003cc4:	4651      	mov	r1, sl
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	f000 fd0c 	bl	80046e4 <__pow5mult>
 8003ccc:	4682      	mov	sl, r0
 8003cce:	2101      	movs	r1, #1
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	f000 fc49 	bl	8004568 <__i2b>
 8003cd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cd8:	4604      	mov	r4, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f340 8082 	ble.w	8003de4 <_dtoa_r+0x8bc>
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4601      	mov	r1, r0
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	f000 fcfd 	bl	80046e4 <__pow5mult>
 8003cea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003cec:	4604      	mov	r4, r0
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	dd7b      	ble.n	8003dea <_dtoa_r+0x8c2>
 8003cf2:	f04f 0800 	mov.w	r8, #0
 8003cf6:	6923      	ldr	r3, [r4, #16]
 8003cf8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003cfc:	6918      	ldr	r0, [r3, #16]
 8003cfe:	f000 fbe5 	bl	80044cc <__hi0bits>
 8003d02:	f1c0 0020 	rsb	r0, r0, #32
 8003d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d08:	4418      	add	r0, r3
 8003d0a:	f010 001f 	ands.w	r0, r0, #31
 8003d0e:	f000 8092 	beq.w	8003e36 <_dtoa_r+0x90e>
 8003d12:	f1c0 0320 	rsb	r3, r0, #32
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	f340 8085 	ble.w	8003e26 <_dtoa_r+0x8fe>
 8003d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d1e:	f1c0 001c 	rsb	r0, r0, #28
 8003d22:	4403      	add	r3, r0
 8003d24:	4481      	add	r9, r0
 8003d26:	4407      	add	r7, r0
 8003d28:	9309      	str	r3, [sp, #36]	; 0x24
 8003d2a:	f1b9 0f00 	cmp.w	r9, #0
 8003d2e:	dd05      	ble.n	8003d3c <_dtoa_r+0x814>
 8003d30:	4651      	mov	r1, sl
 8003d32:	464a      	mov	r2, r9
 8003d34:	4628      	mov	r0, r5
 8003d36:	f000 fd2f 	bl	8004798 <__lshift>
 8003d3a:	4682      	mov	sl, r0
 8003d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	dd05      	ble.n	8003d4e <_dtoa_r+0x826>
 8003d42:	4621      	mov	r1, r4
 8003d44:	461a      	mov	r2, r3
 8003d46:	4628      	mov	r0, r5
 8003d48:	f000 fd26 	bl	8004798 <__lshift>
 8003d4c:	4604      	mov	r4, r0
 8003d4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d072      	beq.n	8003e3a <_dtoa_r+0x912>
 8003d54:	4621      	mov	r1, r4
 8003d56:	4650      	mov	r0, sl
 8003d58:	f000 fd8a 	bl	8004870 <__mcmp>
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	da6c      	bge.n	8003e3a <_dtoa_r+0x912>
 8003d60:	2300      	movs	r3, #0
 8003d62:	4651      	mov	r1, sl
 8003d64:	220a      	movs	r2, #10
 8003d66:	4628      	mov	r0, r5
 8003d68:	f000 fb20 	bl	80043ac <__multadd>
 8003d6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d6e:	4682      	mov	sl, r0
 8003d70:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 81ac 	beq.w	80040d2 <_dtoa_r+0xbaa>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	4631      	mov	r1, r6
 8003d7e:	220a      	movs	r2, #10
 8003d80:	4628      	mov	r0, r5
 8003d82:	f000 fb13 	bl	80043ac <__multadd>
 8003d86:	9b06      	ldr	r3, [sp, #24]
 8003d88:	4606      	mov	r6, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f300 8093 	bgt.w	8003eb6 <_dtoa_r+0x98e>
 8003d90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	dc59      	bgt.n	8003e4a <_dtoa_r+0x922>
 8003d96:	e08e      	b.n	8003eb6 <_dtoa_r+0x98e>
 8003d98:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003d9a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003d9e:	e75d      	b.n	8003c5c <_dtoa_r+0x734>
 8003da0:	9b08      	ldr	r3, [sp, #32]
 8003da2:	1e5c      	subs	r4, r3, #1
 8003da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003da6:	42a3      	cmp	r3, r4
 8003da8:	bfbf      	itttt	lt
 8003daa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003dac:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8003dae:	1ae3      	sublt	r3, r4, r3
 8003db0:	18d2      	addlt	r2, r2, r3
 8003db2:	bfa8      	it	ge
 8003db4:	1b1c      	subge	r4, r3, r4
 8003db6:	9b08      	ldr	r3, [sp, #32]
 8003db8:	bfbe      	ittt	lt
 8003dba:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003dbc:	920e      	strlt	r2, [sp, #56]	; 0x38
 8003dbe:	2400      	movlt	r4, #0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	bfb5      	itete	lt
 8003dc4:	eba9 0703 	sublt.w	r7, r9, r3
 8003dc8:	464f      	movge	r7, r9
 8003dca:	2300      	movlt	r3, #0
 8003dcc:	9b08      	ldrge	r3, [sp, #32]
 8003dce:	e747      	b.n	8003c60 <_dtoa_r+0x738>
 8003dd0:	464f      	mov	r7, r9
 8003dd2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003dd4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003dd6:	e74c      	b.n	8003c72 <_dtoa_r+0x74a>
 8003dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003dda:	e773      	b.n	8003cc4 <_dtoa_r+0x79c>
 8003ddc:	3fe00000 	.word	0x3fe00000
 8003de0:	40240000 	.word	0x40240000
 8003de4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	dc18      	bgt.n	8003e1c <_dtoa_r+0x8f4>
 8003dea:	9b04      	ldr	r3, [sp, #16]
 8003dec:	b9b3      	cbnz	r3, 8003e1c <_dtoa_r+0x8f4>
 8003dee:	9b05      	ldr	r3, [sp, #20]
 8003df0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003df4:	b993      	cbnz	r3, 8003e1c <_dtoa_r+0x8f4>
 8003df6:	9b05      	ldr	r3, [sp, #20]
 8003df8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dfc:	0d1b      	lsrs	r3, r3, #20
 8003dfe:	051b      	lsls	r3, r3, #20
 8003e00:	b17b      	cbz	r3, 8003e22 <_dtoa_r+0x8fa>
 8003e02:	f04f 0801 	mov.w	r8, #1
 8003e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e08:	f109 0901 	add.w	r9, r9, #1
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f47f af6f 	bne.w	8003cf6 <_dtoa_r+0x7ce>
 8003e18:	2001      	movs	r0, #1
 8003e1a:	e774      	b.n	8003d06 <_dtoa_r+0x7de>
 8003e1c:	f04f 0800 	mov.w	r8, #0
 8003e20:	e7f6      	b.n	8003e10 <_dtoa_r+0x8e8>
 8003e22:	4698      	mov	r8, r3
 8003e24:	e7f4      	b.n	8003e10 <_dtoa_r+0x8e8>
 8003e26:	d080      	beq.n	8003d2a <_dtoa_r+0x802>
 8003e28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e2a:	331c      	adds	r3, #28
 8003e2c:	441a      	add	r2, r3
 8003e2e:	4499      	add	r9, r3
 8003e30:	441f      	add	r7, r3
 8003e32:	9209      	str	r2, [sp, #36]	; 0x24
 8003e34:	e779      	b.n	8003d2a <_dtoa_r+0x802>
 8003e36:	4603      	mov	r3, r0
 8003e38:	e7f6      	b.n	8003e28 <_dtoa_r+0x900>
 8003e3a:	9b08      	ldr	r3, [sp, #32]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	dc34      	bgt.n	8003eaa <_dtoa_r+0x982>
 8003e40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	dd31      	ble.n	8003eaa <_dtoa_r+0x982>
 8003e46:	9b08      	ldr	r3, [sp, #32]
 8003e48:	9306      	str	r3, [sp, #24]
 8003e4a:	9b06      	ldr	r3, [sp, #24]
 8003e4c:	b963      	cbnz	r3, 8003e68 <_dtoa_r+0x940>
 8003e4e:	4621      	mov	r1, r4
 8003e50:	2205      	movs	r2, #5
 8003e52:	4628      	mov	r0, r5
 8003e54:	f000 faaa 	bl	80043ac <__multadd>
 8003e58:	4601      	mov	r1, r0
 8003e5a:	4604      	mov	r4, r0
 8003e5c:	4650      	mov	r0, sl
 8003e5e:	f000 fd07 	bl	8004870 <__mcmp>
 8003e62:	2800      	cmp	r0, #0
 8003e64:	f73f adbf 	bgt.w	80039e6 <_dtoa_r+0x4be>
 8003e68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e6a:	9f03      	ldr	r7, [sp, #12]
 8003e6c:	ea6f 0b03 	mvn.w	fp, r3
 8003e70:	f04f 0800 	mov.w	r8, #0
 8003e74:	4621      	mov	r1, r4
 8003e76:	4628      	mov	r0, r5
 8003e78:	f000 fa76 	bl	8004368 <_Bfree>
 8003e7c:	2e00      	cmp	r6, #0
 8003e7e:	f43f aead 	beq.w	8003bdc <_dtoa_r+0x6b4>
 8003e82:	f1b8 0f00 	cmp.w	r8, #0
 8003e86:	d005      	beq.n	8003e94 <_dtoa_r+0x96c>
 8003e88:	45b0      	cmp	r8, r6
 8003e8a:	d003      	beq.n	8003e94 <_dtoa_r+0x96c>
 8003e8c:	4641      	mov	r1, r8
 8003e8e:	4628      	mov	r0, r5
 8003e90:	f000 fa6a 	bl	8004368 <_Bfree>
 8003e94:	4631      	mov	r1, r6
 8003e96:	4628      	mov	r0, r5
 8003e98:	f000 fa66 	bl	8004368 <_Bfree>
 8003e9c:	e69e      	b.n	8003bdc <_dtoa_r+0x6b4>
 8003e9e:	2400      	movs	r4, #0
 8003ea0:	4626      	mov	r6, r4
 8003ea2:	e7e1      	b.n	8003e68 <_dtoa_r+0x940>
 8003ea4:	46c3      	mov	fp, r8
 8003ea6:	4626      	mov	r6, r4
 8003ea8:	e59d      	b.n	80039e6 <_dtoa_r+0x4be>
 8003eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80c8 	beq.w	8004042 <_dtoa_r+0xb1a>
 8003eb2:	9b08      	ldr	r3, [sp, #32]
 8003eb4:	9306      	str	r3, [sp, #24]
 8003eb6:	2f00      	cmp	r7, #0
 8003eb8:	dd05      	ble.n	8003ec6 <_dtoa_r+0x99e>
 8003eba:	4631      	mov	r1, r6
 8003ebc:	463a      	mov	r2, r7
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	f000 fc6a 	bl	8004798 <__lshift>
 8003ec4:	4606      	mov	r6, r0
 8003ec6:	f1b8 0f00 	cmp.w	r8, #0
 8003eca:	d05b      	beq.n	8003f84 <_dtoa_r+0xa5c>
 8003ecc:	4628      	mov	r0, r5
 8003ece:	6871      	ldr	r1, [r6, #4]
 8003ed0:	f000 fa0a 	bl	80042e8 <_Balloc>
 8003ed4:	4607      	mov	r7, r0
 8003ed6:	b928      	cbnz	r0, 8003ee4 <_dtoa_r+0x9bc>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	f240 21ef 	movw	r1, #751	; 0x2ef
 8003ede:	4b81      	ldr	r3, [pc, #516]	; (80040e4 <_dtoa_r+0xbbc>)
 8003ee0:	f7ff bb36 	b.w	8003550 <_dtoa_r+0x28>
 8003ee4:	6932      	ldr	r2, [r6, #16]
 8003ee6:	f106 010c 	add.w	r1, r6, #12
 8003eea:	3202      	adds	r2, #2
 8003eec:	0092      	lsls	r2, r2, #2
 8003eee:	300c      	adds	r0, #12
 8003ef0:	f001 ff72 	bl	8005dd8 <memcpy>
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	4639      	mov	r1, r7
 8003ef8:	4628      	mov	r0, r5
 8003efa:	f000 fc4d 	bl	8004798 <__lshift>
 8003efe:	46b0      	mov	r8, r6
 8003f00:	4606      	mov	r6, r0
 8003f02:	9b03      	ldr	r3, [sp, #12]
 8003f04:	9a03      	ldr	r2, [sp, #12]
 8003f06:	3301      	adds	r3, #1
 8003f08:	9308      	str	r3, [sp, #32]
 8003f0a:	9b06      	ldr	r3, [sp, #24]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f10:	9b04      	ldr	r3, [sp, #16]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	930a      	str	r3, [sp, #40]	; 0x28
 8003f18:	9b08      	ldr	r3, [sp, #32]
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	4650      	mov	r0, sl
 8003f20:	9304      	str	r3, [sp, #16]
 8003f22:	f7ff fa75 	bl	8003410 <quorem>
 8003f26:	4641      	mov	r1, r8
 8003f28:	9006      	str	r0, [sp, #24]
 8003f2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003f2e:	4650      	mov	r0, sl
 8003f30:	f000 fc9e 	bl	8004870 <__mcmp>
 8003f34:	4632      	mov	r2, r6
 8003f36:	9009      	str	r0, [sp, #36]	; 0x24
 8003f38:	4621      	mov	r1, r4
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	f000 fcb4 	bl	80048a8 <__mdiff>
 8003f40:	68c2      	ldr	r2, [r0, #12]
 8003f42:	4607      	mov	r7, r0
 8003f44:	bb02      	cbnz	r2, 8003f88 <_dtoa_r+0xa60>
 8003f46:	4601      	mov	r1, r0
 8003f48:	4650      	mov	r0, sl
 8003f4a:	f000 fc91 	bl	8004870 <__mcmp>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	4639      	mov	r1, r7
 8003f52:	4628      	mov	r0, r5
 8003f54:	920c      	str	r2, [sp, #48]	; 0x30
 8003f56:	f000 fa07 	bl	8004368 <_Bfree>
 8003f5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f5e:	9f08      	ldr	r7, [sp, #32]
 8003f60:	ea43 0102 	orr.w	r1, r3, r2
 8003f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f66:	4319      	orrs	r1, r3
 8003f68:	d110      	bne.n	8003f8c <_dtoa_r+0xa64>
 8003f6a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003f6e:	d029      	beq.n	8003fc4 <_dtoa_r+0xa9c>
 8003f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	dd02      	ble.n	8003f7c <_dtoa_r+0xa54>
 8003f76:	9b06      	ldr	r3, [sp, #24]
 8003f78:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8003f7c:	9b04      	ldr	r3, [sp, #16]
 8003f7e:	f883 9000 	strb.w	r9, [r3]
 8003f82:	e777      	b.n	8003e74 <_dtoa_r+0x94c>
 8003f84:	4630      	mov	r0, r6
 8003f86:	e7ba      	b.n	8003efe <_dtoa_r+0x9d6>
 8003f88:	2201      	movs	r2, #1
 8003f8a:	e7e1      	b.n	8003f50 <_dtoa_r+0xa28>
 8003f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	db04      	blt.n	8003f9c <_dtoa_r+0xa74>
 8003f92:	9922      	ldr	r1, [sp, #136]	; 0x88
 8003f94:	430b      	orrs	r3, r1
 8003f96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	d120      	bne.n	8003fde <_dtoa_r+0xab6>
 8003f9c:	2a00      	cmp	r2, #0
 8003f9e:	dded      	ble.n	8003f7c <_dtoa_r+0xa54>
 8003fa0:	4651      	mov	r1, sl
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	f000 fbf7 	bl	8004798 <__lshift>
 8003faa:	4621      	mov	r1, r4
 8003fac:	4682      	mov	sl, r0
 8003fae:	f000 fc5f 	bl	8004870 <__mcmp>
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	dc03      	bgt.n	8003fbe <_dtoa_r+0xa96>
 8003fb6:	d1e1      	bne.n	8003f7c <_dtoa_r+0xa54>
 8003fb8:	f019 0f01 	tst.w	r9, #1
 8003fbc:	d0de      	beq.n	8003f7c <_dtoa_r+0xa54>
 8003fbe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003fc2:	d1d8      	bne.n	8003f76 <_dtoa_r+0xa4e>
 8003fc4:	2339      	movs	r3, #57	; 0x39
 8003fc6:	9a04      	ldr	r2, [sp, #16]
 8003fc8:	7013      	strb	r3, [r2, #0]
 8003fca:	463b      	mov	r3, r7
 8003fcc:	461f      	mov	r7, r3
 8003fce:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	2a39      	cmp	r2, #57	; 0x39
 8003fd6:	d06b      	beq.n	80040b0 <_dtoa_r+0xb88>
 8003fd8:	3201      	adds	r2, #1
 8003fda:	701a      	strb	r2, [r3, #0]
 8003fdc:	e74a      	b.n	8003e74 <_dtoa_r+0x94c>
 8003fde:	2a00      	cmp	r2, #0
 8003fe0:	dd07      	ble.n	8003ff2 <_dtoa_r+0xaca>
 8003fe2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003fe6:	d0ed      	beq.n	8003fc4 <_dtoa_r+0xa9c>
 8003fe8:	9a04      	ldr	r2, [sp, #16]
 8003fea:	f109 0301 	add.w	r3, r9, #1
 8003fee:	7013      	strb	r3, [r2, #0]
 8003ff0:	e740      	b.n	8003e74 <_dtoa_r+0x94c>
 8003ff2:	9b08      	ldr	r3, [sp, #32]
 8003ff4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003ff6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d042      	beq.n	8004084 <_dtoa_r+0xb5c>
 8003ffe:	4651      	mov	r1, sl
 8004000:	2300      	movs	r3, #0
 8004002:	220a      	movs	r2, #10
 8004004:	4628      	mov	r0, r5
 8004006:	f000 f9d1 	bl	80043ac <__multadd>
 800400a:	45b0      	cmp	r8, r6
 800400c:	4682      	mov	sl, r0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	f04f 020a 	mov.w	r2, #10
 8004016:	4641      	mov	r1, r8
 8004018:	4628      	mov	r0, r5
 800401a:	d107      	bne.n	800402c <_dtoa_r+0xb04>
 800401c:	f000 f9c6 	bl	80043ac <__multadd>
 8004020:	4680      	mov	r8, r0
 8004022:	4606      	mov	r6, r0
 8004024:	9b08      	ldr	r3, [sp, #32]
 8004026:	3301      	adds	r3, #1
 8004028:	9308      	str	r3, [sp, #32]
 800402a:	e775      	b.n	8003f18 <_dtoa_r+0x9f0>
 800402c:	f000 f9be 	bl	80043ac <__multadd>
 8004030:	4631      	mov	r1, r6
 8004032:	4680      	mov	r8, r0
 8004034:	2300      	movs	r3, #0
 8004036:	220a      	movs	r2, #10
 8004038:	4628      	mov	r0, r5
 800403a:	f000 f9b7 	bl	80043ac <__multadd>
 800403e:	4606      	mov	r6, r0
 8004040:	e7f0      	b.n	8004024 <_dtoa_r+0xafc>
 8004042:	9b08      	ldr	r3, [sp, #32]
 8004044:	9306      	str	r3, [sp, #24]
 8004046:	9f03      	ldr	r7, [sp, #12]
 8004048:	4621      	mov	r1, r4
 800404a:	4650      	mov	r0, sl
 800404c:	f7ff f9e0 	bl	8003410 <quorem>
 8004050:	9b03      	ldr	r3, [sp, #12]
 8004052:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004056:	f807 9b01 	strb.w	r9, [r7], #1
 800405a:	1afa      	subs	r2, r7, r3
 800405c:	9b06      	ldr	r3, [sp, #24]
 800405e:	4293      	cmp	r3, r2
 8004060:	dd07      	ble.n	8004072 <_dtoa_r+0xb4a>
 8004062:	4651      	mov	r1, sl
 8004064:	2300      	movs	r3, #0
 8004066:	220a      	movs	r2, #10
 8004068:	4628      	mov	r0, r5
 800406a:	f000 f99f 	bl	80043ac <__multadd>
 800406e:	4682      	mov	sl, r0
 8004070:	e7ea      	b.n	8004048 <_dtoa_r+0xb20>
 8004072:	9b06      	ldr	r3, [sp, #24]
 8004074:	f04f 0800 	mov.w	r8, #0
 8004078:	2b00      	cmp	r3, #0
 800407a:	bfcc      	ite	gt
 800407c:	461f      	movgt	r7, r3
 800407e:	2701      	movle	r7, #1
 8004080:	9b03      	ldr	r3, [sp, #12]
 8004082:	441f      	add	r7, r3
 8004084:	4651      	mov	r1, sl
 8004086:	2201      	movs	r2, #1
 8004088:	4628      	mov	r0, r5
 800408a:	f000 fb85 	bl	8004798 <__lshift>
 800408e:	4621      	mov	r1, r4
 8004090:	4682      	mov	sl, r0
 8004092:	f000 fbed 	bl	8004870 <__mcmp>
 8004096:	2800      	cmp	r0, #0
 8004098:	dc97      	bgt.n	8003fca <_dtoa_r+0xaa2>
 800409a:	d102      	bne.n	80040a2 <_dtoa_r+0xb7a>
 800409c:	f019 0f01 	tst.w	r9, #1
 80040a0:	d193      	bne.n	8003fca <_dtoa_r+0xaa2>
 80040a2:	463b      	mov	r3, r7
 80040a4:	461f      	mov	r7, r3
 80040a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80040aa:	2a30      	cmp	r2, #48	; 0x30
 80040ac:	d0fa      	beq.n	80040a4 <_dtoa_r+0xb7c>
 80040ae:	e6e1      	b.n	8003e74 <_dtoa_r+0x94c>
 80040b0:	9a03      	ldr	r2, [sp, #12]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d18a      	bne.n	8003fcc <_dtoa_r+0xaa4>
 80040b6:	2331      	movs	r3, #49	; 0x31
 80040b8:	f10b 0b01 	add.w	fp, fp, #1
 80040bc:	e797      	b.n	8003fee <_dtoa_r+0xac6>
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <_dtoa_r+0xbc0>)
 80040c0:	f7ff ba9f 	b.w	8003602 <_dtoa_r+0xda>
 80040c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f47f aa77 	bne.w	80035ba <_dtoa_r+0x92>
 80040cc:	4b07      	ldr	r3, [pc, #28]	; (80040ec <_dtoa_r+0xbc4>)
 80040ce:	f7ff ba98 	b.w	8003602 <_dtoa_r+0xda>
 80040d2:	9b06      	ldr	r3, [sp, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	dcb6      	bgt.n	8004046 <_dtoa_r+0xb1e>
 80040d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80040da:	2b02      	cmp	r3, #2
 80040dc:	f73f aeb5 	bgt.w	8003e4a <_dtoa_r+0x922>
 80040e0:	e7b1      	b.n	8004046 <_dtoa_r+0xb1e>
 80040e2:	bf00      	nop
 80040e4:	08006c47 	.word	0x08006c47
 80040e8:	08006ba2 	.word	0x08006ba2
 80040ec:	08006bcb 	.word	0x08006bcb

080040f0 <_free_r>:
 80040f0:	b538      	push	{r3, r4, r5, lr}
 80040f2:	4605      	mov	r5, r0
 80040f4:	2900      	cmp	r1, #0
 80040f6:	d040      	beq.n	800417a <_free_r+0x8a>
 80040f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040fc:	1f0c      	subs	r4, r1, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	bfb8      	it	lt
 8004102:	18e4      	addlt	r4, r4, r3
 8004104:	f000 f8e4 	bl	80042d0 <__malloc_lock>
 8004108:	4a1c      	ldr	r2, [pc, #112]	; (800417c <_free_r+0x8c>)
 800410a:	6813      	ldr	r3, [r2, #0]
 800410c:	b933      	cbnz	r3, 800411c <_free_r+0x2c>
 800410e:	6063      	str	r3, [r4, #4]
 8004110:	6014      	str	r4, [r2, #0]
 8004112:	4628      	mov	r0, r5
 8004114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004118:	f000 b8e0 	b.w	80042dc <__malloc_unlock>
 800411c:	42a3      	cmp	r3, r4
 800411e:	d908      	bls.n	8004132 <_free_r+0x42>
 8004120:	6820      	ldr	r0, [r4, #0]
 8004122:	1821      	adds	r1, r4, r0
 8004124:	428b      	cmp	r3, r1
 8004126:	bf01      	itttt	eq
 8004128:	6819      	ldreq	r1, [r3, #0]
 800412a:	685b      	ldreq	r3, [r3, #4]
 800412c:	1809      	addeq	r1, r1, r0
 800412e:	6021      	streq	r1, [r4, #0]
 8004130:	e7ed      	b.n	800410e <_free_r+0x1e>
 8004132:	461a      	mov	r2, r3
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	b10b      	cbz	r3, 800413c <_free_r+0x4c>
 8004138:	42a3      	cmp	r3, r4
 800413a:	d9fa      	bls.n	8004132 <_free_r+0x42>
 800413c:	6811      	ldr	r1, [r2, #0]
 800413e:	1850      	adds	r0, r2, r1
 8004140:	42a0      	cmp	r0, r4
 8004142:	d10b      	bne.n	800415c <_free_r+0x6c>
 8004144:	6820      	ldr	r0, [r4, #0]
 8004146:	4401      	add	r1, r0
 8004148:	1850      	adds	r0, r2, r1
 800414a:	4283      	cmp	r3, r0
 800414c:	6011      	str	r1, [r2, #0]
 800414e:	d1e0      	bne.n	8004112 <_free_r+0x22>
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	4408      	add	r0, r1
 8004156:	6010      	str	r0, [r2, #0]
 8004158:	6053      	str	r3, [r2, #4]
 800415a:	e7da      	b.n	8004112 <_free_r+0x22>
 800415c:	d902      	bls.n	8004164 <_free_r+0x74>
 800415e:	230c      	movs	r3, #12
 8004160:	602b      	str	r3, [r5, #0]
 8004162:	e7d6      	b.n	8004112 <_free_r+0x22>
 8004164:	6820      	ldr	r0, [r4, #0]
 8004166:	1821      	adds	r1, r4, r0
 8004168:	428b      	cmp	r3, r1
 800416a:	bf01      	itttt	eq
 800416c:	6819      	ldreq	r1, [r3, #0]
 800416e:	685b      	ldreq	r3, [r3, #4]
 8004170:	1809      	addeq	r1, r1, r0
 8004172:	6021      	streq	r1, [r4, #0]
 8004174:	6063      	str	r3, [r4, #4]
 8004176:	6054      	str	r4, [r2, #4]
 8004178:	e7cb      	b.n	8004112 <_free_r+0x22>
 800417a:	bd38      	pop	{r3, r4, r5, pc}
 800417c:	20000390 	.word	0x20000390

08004180 <malloc>:
 8004180:	4b02      	ldr	r3, [pc, #8]	; (800418c <malloc+0xc>)
 8004182:	4601      	mov	r1, r0
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	f000 b823 	b.w	80041d0 <_malloc_r>
 800418a:	bf00      	nop
 800418c:	20000064 	.word	0x20000064

08004190 <sbrk_aligned>:
 8004190:	b570      	push	{r4, r5, r6, lr}
 8004192:	4e0e      	ldr	r6, [pc, #56]	; (80041cc <sbrk_aligned+0x3c>)
 8004194:	460c      	mov	r4, r1
 8004196:	6831      	ldr	r1, [r6, #0]
 8004198:	4605      	mov	r5, r0
 800419a:	b911      	cbnz	r1, 80041a2 <sbrk_aligned+0x12>
 800419c:	f001 fe0c 	bl	8005db8 <_sbrk_r>
 80041a0:	6030      	str	r0, [r6, #0]
 80041a2:	4621      	mov	r1, r4
 80041a4:	4628      	mov	r0, r5
 80041a6:	f001 fe07 	bl	8005db8 <_sbrk_r>
 80041aa:	1c43      	adds	r3, r0, #1
 80041ac:	d00a      	beq.n	80041c4 <sbrk_aligned+0x34>
 80041ae:	1cc4      	adds	r4, r0, #3
 80041b0:	f024 0403 	bic.w	r4, r4, #3
 80041b4:	42a0      	cmp	r0, r4
 80041b6:	d007      	beq.n	80041c8 <sbrk_aligned+0x38>
 80041b8:	1a21      	subs	r1, r4, r0
 80041ba:	4628      	mov	r0, r5
 80041bc:	f001 fdfc 	bl	8005db8 <_sbrk_r>
 80041c0:	3001      	adds	r0, #1
 80041c2:	d101      	bne.n	80041c8 <sbrk_aligned+0x38>
 80041c4:	f04f 34ff 	mov.w	r4, #4294967295
 80041c8:	4620      	mov	r0, r4
 80041ca:	bd70      	pop	{r4, r5, r6, pc}
 80041cc:	20000394 	.word	0x20000394

080041d0 <_malloc_r>:
 80041d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041d4:	1ccd      	adds	r5, r1, #3
 80041d6:	f025 0503 	bic.w	r5, r5, #3
 80041da:	3508      	adds	r5, #8
 80041dc:	2d0c      	cmp	r5, #12
 80041de:	bf38      	it	cc
 80041e0:	250c      	movcc	r5, #12
 80041e2:	2d00      	cmp	r5, #0
 80041e4:	4607      	mov	r7, r0
 80041e6:	db01      	blt.n	80041ec <_malloc_r+0x1c>
 80041e8:	42a9      	cmp	r1, r5
 80041ea:	d905      	bls.n	80041f8 <_malloc_r+0x28>
 80041ec:	230c      	movs	r3, #12
 80041ee:	2600      	movs	r6, #0
 80041f0:	603b      	str	r3, [r7, #0]
 80041f2:	4630      	mov	r0, r6
 80041f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80042cc <_malloc_r+0xfc>
 80041fc:	f000 f868 	bl	80042d0 <__malloc_lock>
 8004200:	f8d8 3000 	ldr.w	r3, [r8]
 8004204:	461c      	mov	r4, r3
 8004206:	bb5c      	cbnz	r4, 8004260 <_malloc_r+0x90>
 8004208:	4629      	mov	r1, r5
 800420a:	4638      	mov	r0, r7
 800420c:	f7ff ffc0 	bl	8004190 <sbrk_aligned>
 8004210:	1c43      	adds	r3, r0, #1
 8004212:	4604      	mov	r4, r0
 8004214:	d155      	bne.n	80042c2 <_malloc_r+0xf2>
 8004216:	f8d8 4000 	ldr.w	r4, [r8]
 800421a:	4626      	mov	r6, r4
 800421c:	2e00      	cmp	r6, #0
 800421e:	d145      	bne.n	80042ac <_malloc_r+0xdc>
 8004220:	2c00      	cmp	r4, #0
 8004222:	d048      	beq.n	80042b6 <_malloc_r+0xe6>
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	4631      	mov	r1, r6
 8004228:	4638      	mov	r0, r7
 800422a:	eb04 0903 	add.w	r9, r4, r3
 800422e:	f001 fdc3 	bl	8005db8 <_sbrk_r>
 8004232:	4581      	cmp	r9, r0
 8004234:	d13f      	bne.n	80042b6 <_malloc_r+0xe6>
 8004236:	6821      	ldr	r1, [r4, #0]
 8004238:	4638      	mov	r0, r7
 800423a:	1a6d      	subs	r5, r5, r1
 800423c:	4629      	mov	r1, r5
 800423e:	f7ff ffa7 	bl	8004190 <sbrk_aligned>
 8004242:	3001      	adds	r0, #1
 8004244:	d037      	beq.n	80042b6 <_malloc_r+0xe6>
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	442b      	add	r3, r5
 800424a:	6023      	str	r3, [r4, #0]
 800424c:	f8d8 3000 	ldr.w	r3, [r8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d038      	beq.n	80042c6 <_malloc_r+0xf6>
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	42a2      	cmp	r2, r4
 8004258:	d12b      	bne.n	80042b2 <_malloc_r+0xe2>
 800425a:	2200      	movs	r2, #0
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	e00f      	b.n	8004280 <_malloc_r+0xb0>
 8004260:	6822      	ldr	r2, [r4, #0]
 8004262:	1b52      	subs	r2, r2, r5
 8004264:	d41f      	bmi.n	80042a6 <_malloc_r+0xd6>
 8004266:	2a0b      	cmp	r2, #11
 8004268:	d917      	bls.n	800429a <_malloc_r+0xca>
 800426a:	1961      	adds	r1, r4, r5
 800426c:	42a3      	cmp	r3, r4
 800426e:	6025      	str	r5, [r4, #0]
 8004270:	bf18      	it	ne
 8004272:	6059      	strne	r1, [r3, #4]
 8004274:	6863      	ldr	r3, [r4, #4]
 8004276:	bf08      	it	eq
 8004278:	f8c8 1000 	streq.w	r1, [r8]
 800427c:	5162      	str	r2, [r4, r5]
 800427e:	604b      	str	r3, [r1, #4]
 8004280:	4638      	mov	r0, r7
 8004282:	f104 060b 	add.w	r6, r4, #11
 8004286:	f000 f829 	bl	80042dc <__malloc_unlock>
 800428a:	f026 0607 	bic.w	r6, r6, #7
 800428e:	1d23      	adds	r3, r4, #4
 8004290:	1af2      	subs	r2, r6, r3
 8004292:	d0ae      	beq.n	80041f2 <_malloc_r+0x22>
 8004294:	1b9b      	subs	r3, r3, r6
 8004296:	50a3      	str	r3, [r4, r2]
 8004298:	e7ab      	b.n	80041f2 <_malloc_r+0x22>
 800429a:	42a3      	cmp	r3, r4
 800429c:	6862      	ldr	r2, [r4, #4]
 800429e:	d1dd      	bne.n	800425c <_malloc_r+0x8c>
 80042a0:	f8c8 2000 	str.w	r2, [r8]
 80042a4:	e7ec      	b.n	8004280 <_malloc_r+0xb0>
 80042a6:	4623      	mov	r3, r4
 80042a8:	6864      	ldr	r4, [r4, #4]
 80042aa:	e7ac      	b.n	8004206 <_malloc_r+0x36>
 80042ac:	4634      	mov	r4, r6
 80042ae:	6876      	ldr	r6, [r6, #4]
 80042b0:	e7b4      	b.n	800421c <_malloc_r+0x4c>
 80042b2:	4613      	mov	r3, r2
 80042b4:	e7cc      	b.n	8004250 <_malloc_r+0x80>
 80042b6:	230c      	movs	r3, #12
 80042b8:	4638      	mov	r0, r7
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	f000 f80e 	bl	80042dc <__malloc_unlock>
 80042c0:	e797      	b.n	80041f2 <_malloc_r+0x22>
 80042c2:	6025      	str	r5, [r4, #0]
 80042c4:	e7dc      	b.n	8004280 <_malloc_r+0xb0>
 80042c6:	605b      	str	r3, [r3, #4]
 80042c8:	deff      	udf	#255	; 0xff
 80042ca:	bf00      	nop
 80042cc:	20000390 	.word	0x20000390

080042d0 <__malloc_lock>:
 80042d0:	4801      	ldr	r0, [pc, #4]	; (80042d8 <__malloc_lock+0x8>)
 80042d2:	f7ff b888 	b.w	80033e6 <__retarget_lock_acquire_recursive>
 80042d6:	bf00      	nop
 80042d8:	2000038c 	.word	0x2000038c

080042dc <__malloc_unlock>:
 80042dc:	4801      	ldr	r0, [pc, #4]	; (80042e4 <__malloc_unlock+0x8>)
 80042de:	f7ff b883 	b.w	80033e8 <__retarget_lock_release_recursive>
 80042e2:	bf00      	nop
 80042e4:	2000038c 	.word	0x2000038c

080042e8 <_Balloc>:
 80042e8:	b570      	push	{r4, r5, r6, lr}
 80042ea:	69c6      	ldr	r6, [r0, #28]
 80042ec:	4604      	mov	r4, r0
 80042ee:	460d      	mov	r5, r1
 80042f0:	b976      	cbnz	r6, 8004310 <_Balloc+0x28>
 80042f2:	2010      	movs	r0, #16
 80042f4:	f7ff ff44 	bl	8004180 <malloc>
 80042f8:	4602      	mov	r2, r0
 80042fa:	61e0      	str	r0, [r4, #28]
 80042fc:	b920      	cbnz	r0, 8004308 <_Balloc+0x20>
 80042fe:	216b      	movs	r1, #107	; 0x6b
 8004300:	4b17      	ldr	r3, [pc, #92]	; (8004360 <_Balloc+0x78>)
 8004302:	4818      	ldr	r0, [pc, #96]	; (8004364 <_Balloc+0x7c>)
 8004304:	f001 fd7c 	bl	8005e00 <__assert_func>
 8004308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800430c:	6006      	str	r6, [r0, #0]
 800430e:	60c6      	str	r6, [r0, #12]
 8004310:	69e6      	ldr	r6, [r4, #28]
 8004312:	68f3      	ldr	r3, [r6, #12]
 8004314:	b183      	cbz	r3, 8004338 <_Balloc+0x50>
 8004316:	69e3      	ldr	r3, [r4, #28]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800431e:	b9b8      	cbnz	r0, 8004350 <_Balloc+0x68>
 8004320:	2101      	movs	r1, #1
 8004322:	fa01 f605 	lsl.w	r6, r1, r5
 8004326:	1d72      	adds	r2, r6, #5
 8004328:	4620      	mov	r0, r4
 800432a:	0092      	lsls	r2, r2, #2
 800432c:	f001 fd86 	bl	8005e3c <_calloc_r>
 8004330:	b160      	cbz	r0, 800434c <_Balloc+0x64>
 8004332:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004336:	e00e      	b.n	8004356 <_Balloc+0x6e>
 8004338:	2221      	movs	r2, #33	; 0x21
 800433a:	2104      	movs	r1, #4
 800433c:	4620      	mov	r0, r4
 800433e:	f001 fd7d 	bl	8005e3c <_calloc_r>
 8004342:	69e3      	ldr	r3, [r4, #28]
 8004344:	60f0      	str	r0, [r6, #12]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e4      	bne.n	8004316 <_Balloc+0x2e>
 800434c:	2000      	movs	r0, #0
 800434e:	bd70      	pop	{r4, r5, r6, pc}
 8004350:	6802      	ldr	r2, [r0, #0]
 8004352:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004356:	2300      	movs	r3, #0
 8004358:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800435c:	e7f7      	b.n	800434e <_Balloc+0x66>
 800435e:	bf00      	nop
 8004360:	08006bd8 	.word	0x08006bd8
 8004364:	08006c58 	.word	0x08006c58

08004368 <_Bfree>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	69c6      	ldr	r6, [r0, #28]
 800436c:	4605      	mov	r5, r0
 800436e:	460c      	mov	r4, r1
 8004370:	b976      	cbnz	r6, 8004390 <_Bfree+0x28>
 8004372:	2010      	movs	r0, #16
 8004374:	f7ff ff04 	bl	8004180 <malloc>
 8004378:	4602      	mov	r2, r0
 800437a:	61e8      	str	r0, [r5, #28]
 800437c:	b920      	cbnz	r0, 8004388 <_Bfree+0x20>
 800437e:	218f      	movs	r1, #143	; 0x8f
 8004380:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <_Bfree+0x3c>)
 8004382:	4809      	ldr	r0, [pc, #36]	; (80043a8 <_Bfree+0x40>)
 8004384:	f001 fd3c 	bl	8005e00 <__assert_func>
 8004388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800438c:	6006      	str	r6, [r0, #0]
 800438e:	60c6      	str	r6, [r0, #12]
 8004390:	b13c      	cbz	r4, 80043a2 <_Bfree+0x3a>
 8004392:	69eb      	ldr	r3, [r5, #28]
 8004394:	6862      	ldr	r2, [r4, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800439c:	6021      	str	r1, [r4, #0]
 800439e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80043a2:	bd70      	pop	{r4, r5, r6, pc}
 80043a4:	08006bd8 	.word	0x08006bd8
 80043a8:	08006c58 	.word	0x08006c58

080043ac <__multadd>:
 80043ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043b0:	4607      	mov	r7, r0
 80043b2:	460c      	mov	r4, r1
 80043b4:	461e      	mov	r6, r3
 80043b6:	2000      	movs	r0, #0
 80043b8:	690d      	ldr	r5, [r1, #16]
 80043ba:	f101 0c14 	add.w	ip, r1, #20
 80043be:	f8dc 3000 	ldr.w	r3, [ip]
 80043c2:	3001      	adds	r0, #1
 80043c4:	b299      	uxth	r1, r3
 80043c6:	fb02 6101 	mla	r1, r2, r1, r6
 80043ca:	0c1e      	lsrs	r6, r3, #16
 80043cc:	0c0b      	lsrs	r3, r1, #16
 80043ce:	fb02 3306 	mla	r3, r2, r6, r3
 80043d2:	b289      	uxth	r1, r1
 80043d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80043d8:	4285      	cmp	r5, r0
 80043da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80043de:	f84c 1b04 	str.w	r1, [ip], #4
 80043e2:	dcec      	bgt.n	80043be <__multadd+0x12>
 80043e4:	b30e      	cbz	r6, 800442a <__multadd+0x7e>
 80043e6:	68a3      	ldr	r3, [r4, #8]
 80043e8:	42ab      	cmp	r3, r5
 80043ea:	dc19      	bgt.n	8004420 <__multadd+0x74>
 80043ec:	6861      	ldr	r1, [r4, #4]
 80043ee:	4638      	mov	r0, r7
 80043f0:	3101      	adds	r1, #1
 80043f2:	f7ff ff79 	bl	80042e8 <_Balloc>
 80043f6:	4680      	mov	r8, r0
 80043f8:	b928      	cbnz	r0, 8004406 <__multadd+0x5a>
 80043fa:	4602      	mov	r2, r0
 80043fc:	21ba      	movs	r1, #186	; 0xba
 80043fe:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <__multadd+0x84>)
 8004400:	480c      	ldr	r0, [pc, #48]	; (8004434 <__multadd+0x88>)
 8004402:	f001 fcfd 	bl	8005e00 <__assert_func>
 8004406:	6922      	ldr	r2, [r4, #16]
 8004408:	f104 010c 	add.w	r1, r4, #12
 800440c:	3202      	adds	r2, #2
 800440e:	0092      	lsls	r2, r2, #2
 8004410:	300c      	adds	r0, #12
 8004412:	f001 fce1 	bl	8005dd8 <memcpy>
 8004416:	4621      	mov	r1, r4
 8004418:	4638      	mov	r0, r7
 800441a:	f7ff ffa5 	bl	8004368 <_Bfree>
 800441e:	4644      	mov	r4, r8
 8004420:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004424:	3501      	adds	r5, #1
 8004426:	615e      	str	r6, [r3, #20]
 8004428:	6125      	str	r5, [r4, #16]
 800442a:	4620      	mov	r0, r4
 800442c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004430:	08006c47 	.word	0x08006c47
 8004434:	08006c58 	.word	0x08006c58

08004438 <__s2b>:
 8004438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800443c:	4615      	mov	r5, r2
 800443e:	2209      	movs	r2, #9
 8004440:	461f      	mov	r7, r3
 8004442:	3308      	adds	r3, #8
 8004444:	460c      	mov	r4, r1
 8004446:	fb93 f3f2 	sdiv	r3, r3, r2
 800444a:	4606      	mov	r6, r0
 800444c:	2201      	movs	r2, #1
 800444e:	2100      	movs	r1, #0
 8004450:	429a      	cmp	r2, r3
 8004452:	db09      	blt.n	8004468 <__s2b+0x30>
 8004454:	4630      	mov	r0, r6
 8004456:	f7ff ff47 	bl	80042e8 <_Balloc>
 800445a:	b940      	cbnz	r0, 800446e <__s2b+0x36>
 800445c:	4602      	mov	r2, r0
 800445e:	21d3      	movs	r1, #211	; 0xd3
 8004460:	4b18      	ldr	r3, [pc, #96]	; (80044c4 <__s2b+0x8c>)
 8004462:	4819      	ldr	r0, [pc, #100]	; (80044c8 <__s2b+0x90>)
 8004464:	f001 fccc 	bl	8005e00 <__assert_func>
 8004468:	0052      	lsls	r2, r2, #1
 800446a:	3101      	adds	r1, #1
 800446c:	e7f0      	b.n	8004450 <__s2b+0x18>
 800446e:	9b08      	ldr	r3, [sp, #32]
 8004470:	2d09      	cmp	r5, #9
 8004472:	6143      	str	r3, [r0, #20]
 8004474:	f04f 0301 	mov.w	r3, #1
 8004478:	6103      	str	r3, [r0, #16]
 800447a:	dd16      	ble.n	80044aa <__s2b+0x72>
 800447c:	f104 0909 	add.w	r9, r4, #9
 8004480:	46c8      	mov	r8, r9
 8004482:	442c      	add	r4, r5
 8004484:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004488:	4601      	mov	r1, r0
 800448a:	220a      	movs	r2, #10
 800448c:	4630      	mov	r0, r6
 800448e:	3b30      	subs	r3, #48	; 0x30
 8004490:	f7ff ff8c 	bl	80043ac <__multadd>
 8004494:	45a0      	cmp	r8, r4
 8004496:	d1f5      	bne.n	8004484 <__s2b+0x4c>
 8004498:	f1a5 0408 	sub.w	r4, r5, #8
 800449c:	444c      	add	r4, r9
 800449e:	1b2d      	subs	r5, r5, r4
 80044a0:	1963      	adds	r3, r4, r5
 80044a2:	42bb      	cmp	r3, r7
 80044a4:	db04      	blt.n	80044b0 <__s2b+0x78>
 80044a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044aa:	2509      	movs	r5, #9
 80044ac:	340a      	adds	r4, #10
 80044ae:	e7f6      	b.n	800449e <__s2b+0x66>
 80044b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80044b4:	4601      	mov	r1, r0
 80044b6:	220a      	movs	r2, #10
 80044b8:	4630      	mov	r0, r6
 80044ba:	3b30      	subs	r3, #48	; 0x30
 80044bc:	f7ff ff76 	bl	80043ac <__multadd>
 80044c0:	e7ee      	b.n	80044a0 <__s2b+0x68>
 80044c2:	bf00      	nop
 80044c4:	08006c47 	.word	0x08006c47
 80044c8:	08006c58 	.word	0x08006c58

080044cc <__hi0bits>:
 80044cc:	0c02      	lsrs	r2, r0, #16
 80044ce:	0412      	lsls	r2, r2, #16
 80044d0:	4603      	mov	r3, r0
 80044d2:	b9ca      	cbnz	r2, 8004508 <__hi0bits+0x3c>
 80044d4:	0403      	lsls	r3, r0, #16
 80044d6:	2010      	movs	r0, #16
 80044d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80044dc:	bf04      	itt	eq
 80044de:	021b      	lsleq	r3, r3, #8
 80044e0:	3008      	addeq	r0, #8
 80044e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80044e6:	bf04      	itt	eq
 80044e8:	011b      	lsleq	r3, r3, #4
 80044ea:	3004      	addeq	r0, #4
 80044ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80044f0:	bf04      	itt	eq
 80044f2:	009b      	lsleq	r3, r3, #2
 80044f4:	3002      	addeq	r0, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	db05      	blt.n	8004506 <__hi0bits+0x3a>
 80044fa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80044fe:	f100 0001 	add.w	r0, r0, #1
 8004502:	bf08      	it	eq
 8004504:	2020      	moveq	r0, #32
 8004506:	4770      	bx	lr
 8004508:	2000      	movs	r0, #0
 800450a:	e7e5      	b.n	80044d8 <__hi0bits+0xc>

0800450c <__lo0bits>:
 800450c:	6803      	ldr	r3, [r0, #0]
 800450e:	4602      	mov	r2, r0
 8004510:	f013 0007 	ands.w	r0, r3, #7
 8004514:	d00b      	beq.n	800452e <__lo0bits+0x22>
 8004516:	07d9      	lsls	r1, r3, #31
 8004518:	d421      	bmi.n	800455e <__lo0bits+0x52>
 800451a:	0798      	lsls	r0, r3, #30
 800451c:	bf49      	itett	mi
 800451e:	085b      	lsrmi	r3, r3, #1
 8004520:	089b      	lsrpl	r3, r3, #2
 8004522:	2001      	movmi	r0, #1
 8004524:	6013      	strmi	r3, [r2, #0]
 8004526:	bf5c      	itt	pl
 8004528:	2002      	movpl	r0, #2
 800452a:	6013      	strpl	r3, [r2, #0]
 800452c:	4770      	bx	lr
 800452e:	b299      	uxth	r1, r3
 8004530:	b909      	cbnz	r1, 8004536 <__lo0bits+0x2a>
 8004532:	2010      	movs	r0, #16
 8004534:	0c1b      	lsrs	r3, r3, #16
 8004536:	b2d9      	uxtb	r1, r3
 8004538:	b909      	cbnz	r1, 800453e <__lo0bits+0x32>
 800453a:	3008      	adds	r0, #8
 800453c:	0a1b      	lsrs	r3, r3, #8
 800453e:	0719      	lsls	r1, r3, #28
 8004540:	bf04      	itt	eq
 8004542:	091b      	lsreq	r3, r3, #4
 8004544:	3004      	addeq	r0, #4
 8004546:	0799      	lsls	r1, r3, #30
 8004548:	bf04      	itt	eq
 800454a:	089b      	lsreq	r3, r3, #2
 800454c:	3002      	addeq	r0, #2
 800454e:	07d9      	lsls	r1, r3, #31
 8004550:	d403      	bmi.n	800455a <__lo0bits+0x4e>
 8004552:	085b      	lsrs	r3, r3, #1
 8004554:	f100 0001 	add.w	r0, r0, #1
 8004558:	d003      	beq.n	8004562 <__lo0bits+0x56>
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	4770      	bx	lr
 800455e:	2000      	movs	r0, #0
 8004560:	4770      	bx	lr
 8004562:	2020      	movs	r0, #32
 8004564:	4770      	bx	lr
	...

08004568 <__i2b>:
 8004568:	b510      	push	{r4, lr}
 800456a:	460c      	mov	r4, r1
 800456c:	2101      	movs	r1, #1
 800456e:	f7ff febb 	bl	80042e8 <_Balloc>
 8004572:	4602      	mov	r2, r0
 8004574:	b928      	cbnz	r0, 8004582 <__i2b+0x1a>
 8004576:	f240 1145 	movw	r1, #325	; 0x145
 800457a:	4b04      	ldr	r3, [pc, #16]	; (800458c <__i2b+0x24>)
 800457c:	4804      	ldr	r0, [pc, #16]	; (8004590 <__i2b+0x28>)
 800457e:	f001 fc3f 	bl	8005e00 <__assert_func>
 8004582:	2301      	movs	r3, #1
 8004584:	6144      	str	r4, [r0, #20]
 8004586:	6103      	str	r3, [r0, #16]
 8004588:	bd10      	pop	{r4, pc}
 800458a:	bf00      	nop
 800458c:	08006c47 	.word	0x08006c47
 8004590:	08006c58 	.word	0x08006c58

08004594 <__multiply>:
 8004594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004598:	4691      	mov	r9, r2
 800459a:	690a      	ldr	r2, [r1, #16]
 800459c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80045a0:	460c      	mov	r4, r1
 80045a2:	429a      	cmp	r2, r3
 80045a4:	bfbe      	ittt	lt
 80045a6:	460b      	movlt	r3, r1
 80045a8:	464c      	movlt	r4, r9
 80045aa:	4699      	movlt	r9, r3
 80045ac:	6927      	ldr	r7, [r4, #16]
 80045ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80045b2:	68a3      	ldr	r3, [r4, #8]
 80045b4:	6861      	ldr	r1, [r4, #4]
 80045b6:	eb07 060a 	add.w	r6, r7, sl
 80045ba:	42b3      	cmp	r3, r6
 80045bc:	b085      	sub	sp, #20
 80045be:	bfb8      	it	lt
 80045c0:	3101      	addlt	r1, #1
 80045c2:	f7ff fe91 	bl	80042e8 <_Balloc>
 80045c6:	b930      	cbnz	r0, 80045d6 <__multiply+0x42>
 80045c8:	4602      	mov	r2, r0
 80045ca:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80045ce:	4b43      	ldr	r3, [pc, #268]	; (80046dc <__multiply+0x148>)
 80045d0:	4843      	ldr	r0, [pc, #268]	; (80046e0 <__multiply+0x14c>)
 80045d2:	f001 fc15 	bl	8005e00 <__assert_func>
 80045d6:	f100 0514 	add.w	r5, r0, #20
 80045da:	462b      	mov	r3, r5
 80045dc:	2200      	movs	r2, #0
 80045de:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80045e2:	4543      	cmp	r3, r8
 80045e4:	d321      	bcc.n	800462a <__multiply+0x96>
 80045e6:	f104 0314 	add.w	r3, r4, #20
 80045ea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80045ee:	f109 0314 	add.w	r3, r9, #20
 80045f2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80045f6:	9202      	str	r2, [sp, #8]
 80045f8:	1b3a      	subs	r2, r7, r4
 80045fa:	3a15      	subs	r2, #21
 80045fc:	f022 0203 	bic.w	r2, r2, #3
 8004600:	3204      	adds	r2, #4
 8004602:	f104 0115 	add.w	r1, r4, #21
 8004606:	428f      	cmp	r7, r1
 8004608:	bf38      	it	cc
 800460a:	2204      	movcc	r2, #4
 800460c:	9201      	str	r2, [sp, #4]
 800460e:	9a02      	ldr	r2, [sp, #8]
 8004610:	9303      	str	r3, [sp, #12]
 8004612:	429a      	cmp	r2, r3
 8004614:	d80c      	bhi.n	8004630 <__multiply+0x9c>
 8004616:	2e00      	cmp	r6, #0
 8004618:	dd03      	ble.n	8004622 <__multiply+0x8e>
 800461a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800461e:	2b00      	cmp	r3, #0
 8004620:	d05a      	beq.n	80046d8 <__multiply+0x144>
 8004622:	6106      	str	r6, [r0, #16]
 8004624:	b005      	add	sp, #20
 8004626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800462a:	f843 2b04 	str.w	r2, [r3], #4
 800462e:	e7d8      	b.n	80045e2 <__multiply+0x4e>
 8004630:	f8b3 a000 	ldrh.w	sl, [r3]
 8004634:	f1ba 0f00 	cmp.w	sl, #0
 8004638:	d023      	beq.n	8004682 <__multiply+0xee>
 800463a:	46a9      	mov	r9, r5
 800463c:	f04f 0c00 	mov.w	ip, #0
 8004640:	f104 0e14 	add.w	lr, r4, #20
 8004644:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004648:	f8d9 1000 	ldr.w	r1, [r9]
 800464c:	fa1f fb82 	uxth.w	fp, r2
 8004650:	b289      	uxth	r1, r1
 8004652:	fb0a 110b 	mla	r1, sl, fp, r1
 8004656:	4461      	add	r1, ip
 8004658:	f8d9 c000 	ldr.w	ip, [r9]
 800465c:	0c12      	lsrs	r2, r2, #16
 800465e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004662:	fb0a c202 	mla	r2, sl, r2, ip
 8004666:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800466a:	b289      	uxth	r1, r1
 800466c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004670:	4577      	cmp	r7, lr
 8004672:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004676:	f849 1b04 	str.w	r1, [r9], #4
 800467a:	d8e3      	bhi.n	8004644 <__multiply+0xb0>
 800467c:	9a01      	ldr	r2, [sp, #4]
 800467e:	f845 c002 	str.w	ip, [r5, r2]
 8004682:	9a03      	ldr	r2, [sp, #12]
 8004684:	3304      	adds	r3, #4
 8004686:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800468a:	f1b9 0f00 	cmp.w	r9, #0
 800468e:	d021      	beq.n	80046d4 <__multiply+0x140>
 8004690:	46ae      	mov	lr, r5
 8004692:	f04f 0a00 	mov.w	sl, #0
 8004696:	6829      	ldr	r1, [r5, #0]
 8004698:	f104 0c14 	add.w	ip, r4, #20
 800469c:	f8bc b000 	ldrh.w	fp, [ip]
 80046a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80046a4:	b289      	uxth	r1, r1
 80046a6:	fb09 220b 	mla	r2, r9, fp, r2
 80046aa:	4452      	add	r2, sl
 80046ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80046b0:	f84e 1b04 	str.w	r1, [lr], #4
 80046b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80046b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80046bc:	f8be 1000 	ldrh.w	r1, [lr]
 80046c0:	4567      	cmp	r7, ip
 80046c2:	fb09 110a 	mla	r1, r9, sl, r1
 80046c6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80046ca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80046ce:	d8e5      	bhi.n	800469c <__multiply+0x108>
 80046d0:	9a01      	ldr	r2, [sp, #4]
 80046d2:	50a9      	str	r1, [r5, r2]
 80046d4:	3504      	adds	r5, #4
 80046d6:	e79a      	b.n	800460e <__multiply+0x7a>
 80046d8:	3e01      	subs	r6, #1
 80046da:	e79c      	b.n	8004616 <__multiply+0x82>
 80046dc:	08006c47 	.word	0x08006c47
 80046e0:	08006c58 	.word	0x08006c58

080046e4 <__pow5mult>:
 80046e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046e8:	4615      	mov	r5, r2
 80046ea:	f012 0203 	ands.w	r2, r2, #3
 80046ee:	4606      	mov	r6, r0
 80046f0:	460f      	mov	r7, r1
 80046f2:	d007      	beq.n	8004704 <__pow5mult+0x20>
 80046f4:	4c25      	ldr	r4, [pc, #148]	; (800478c <__pow5mult+0xa8>)
 80046f6:	3a01      	subs	r2, #1
 80046f8:	2300      	movs	r3, #0
 80046fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80046fe:	f7ff fe55 	bl	80043ac <__multadd>
 8004702:	4607      	mov	r7, r0
 8004704:	10ad      	asrs	r5, r5, #2
 8004706:	d03d      	beq.n	8004784 <__pow5mult+0xa0>
 8004708:	69f4      	ldr	r4, [r6, #28]
 800470a:	b97c      	cbnz	r4, 800472c <__pow5mult+0x48>
 800470c:	2010      	movs	r0, #16
 800470e:	f7ff fd37 	bl	8004180 <malloc>
 8004712:	4602      	mov	r2, r0
 8004714:	61f0      	str	r0, [r6, #28]
 8004716:	b928      	cbnz	r0, 8004724 <__pow5mult+0x40>
 8004718:	f240 11b3 	movw	r1, #435	; 0x1b3
 800471c:	4b1c      	ldr	r3, [pc, #112]	; (8004790 <__pow5mult+0xac>)
 800471e:	481d      	ldr	r0, [pc, #116]	; (8004794 <__pow5mult+0xb0>)
 8004720:	f001 fb6e 	bl	8005e00 <__assert_func>
 8004724:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004728:	6004      	str	r4, [r0, #0]
 800472a:	60c4      	str	r4, [r0, #12]
 800472c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004730:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004734:	b94c      	cbnz	r4, 800474a <__pow5mult+0x66>
 8004736:	f240 2171 	movw	r1, #625	; 0x271
 800473a:	4630      	mov	r0, r6
 800473c:	f7ff ff14 	bl	8004568 <__i2b>
 8004740:	2300      	movs	r3, #0
 8004742:	4604      	mov	r4, r0
 8004744:	f8c8 0008 	str.w	r0, [r8, #8]
 8004748:	6003      	str	r3, [r0, #0]
 800474a:	f04f 0900 	mov.w	r9, #0
 800474e:	07eb      	lsls	r3, r5, #31
 8004750:	d50a      	bpl.n	8004768 <__pow5mult+0x84>
 8004752:	4639      	mov	r1, r7
 8004754:	4622      	mov	r2, r4
 8004756:	4630      	mov	r0, r6
 8004758:	f7ff ff1c 	bl	8004594 <__multiply>
 800475c:	4680      	mov	r8, r0
 800475e:	4639      	mov	r1, r7
 8004760:	4630      	mov	r0, r6
 8004762:	f7ff fe01 	bl	8004368 <_Bfree>
 8004766:	4647      	mov	r7, r8
 8004768:	106d      	asrs	r5, r5, #1
 800476a:	d00b      	beq.n	8004784 <__pow5mult+0xa0>
 800476c:	6820      	ldr	r0, [r4, #0]
 800476e:	b938      	cbnz	r0, 8004780 <__pow5mult+0x9c>
 8004770:	4622      	mov	r2, r4
 8004772:	4621      	mov	r1, r4
 8004774:	4630      	mov	r0, r6
 8004776:	f7ff ff0d 	bl	8004594 <__multiply>
 800477a:	6020      	str	r0, [r4, #0]
 800477c:	f8c0 9000 	str.w	r9, [r0]
 8004780:	4604      	mov	r4, r0
 8004782:	e7e4      	b.n	800474e <__pow5mult+0x6a>
 8004784:	4638      	mov	r0, r7
 8004786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800478a:	bf00      	nop
 800478c:	08006da8 	.word	0x08006da8
 8004790:	08006bd8 	.word	0x08006bd8
 8004794:	08006c58 	.word	0x08006c58

08004798 <__lshift>:
 8004798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800479c:	460c      	mov	r4, r1
 800479e:	4607      	mov	r7, r0
 80047a0:	4691      	mov	r9, r2
 80047a2:	6923      	ldr	r3, [r4, #16]
 80047a4:	6849      	ldr	r1, [r1, #4]
 80047a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80047aa:	68a3      	ldr	r3, [r4, #8]
 80047ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80047b0:	f108 0601 	add.w	r6, r8, #1
 80047b4:	42b3      	cmp	r3, r6
 80047b6:	db0b      	blt.n	80047d0 <__lshift+0x38>
 80047b8:	4638      	mov	r0, r7
 80047ba:	f7ff fd95 	bl	80042e8 <_Balloc>
 80047be:	4605      	mov	r5, r0
 80047c0:	b948      	cbnz	r0, 80047d6 <__lshift+0x3e>
 80047c2:	4602      	mov	r2, r0
 80047c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80047c8:	4b27      	ldr	r3, [pc, #156]	; (8004868 <__lshift+0xd0>)
 80047ca:	4828      	ldr	r0, [pc, #160]	; (800486c <__lshift+0xd4>)
 80047cc:	f001 fb18 	bl	8005e00 <__assert_func>
 80047d0:	3101      	adds	r1, #1
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	e7ee      	b.n	80047b4 <__lshift+0x1c>
 80047d6:	2300      	movs	r3, #0
 80047d8:	f100 0114 	add.w	r1, r0, #20
 80047dc:	f100 0210 	add.w	r2, r0, #16
 80047e0:	4618      	mov	r0, r3
 80047e2:	4553      	cmp	r3, sl
 80047e4:	db33      	blt.n	800484e <__lshift+0xb6>
 80047e6:	6920      	ldr	r0, [r4, #16]
 80047e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80047ec:	f104 0314 	add.w	r3, r4, #20
 80047f0:	f019 091f 	ands.w	r9, r9, #31
 80047f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80047f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80047fc:	d02b      	beq.n	8004856 <__lshift+0xbe>
 80047fe:	468a      	mov	sl, r1
 8004800:	2200      	movs	r2, #0
 8004802:	f1c9 0e20 	rsb	lr, r9, #32
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	fa00 f009 	lsl.w	r0, r0, r9
 800480c:	4310      	orrs	r0, r2
 800480e:	f84a 0b04 	str.w	r0, [sl], #4
 8004812:	f853 2b04 	ldr.w	r2, [r3], #4
 8004816:	459c      	cmp	ip, r3
 8004818:	fa22 f20e 	lsr.w	r2, r2, lr
 800481c:	d8f3      	bhi.n	8004806 <__lshift+0x6e>
 800481e:	ebac 0304 	sub.w	r3, ip, r4
 8004822:	3b15      	subs	r3, #21
 8004824:	f023 0303 	bic.w	r3, r3, #3
 8004828:	3304      	adds	r3, #4
 800482a:	f104 0015 	add.w	r0, r4, #21
 800482e:	4584      	cmp	ip, r0
 8004830:	bf38      	it	cc
 8004832:	2304      	movcc	r3, #4
 8004834:	50ca      	str	r2, [r1, r3]
 8004836:	b10a      	cbz	r2, 800483c <__lshift+0xa4>
 8004838:	f108 0602 	add.w	r6, r8, #2
 800483c:	3e01      	subs	r6, #1
 800483e:	4638      	mov	r0, r7
 8004840:	4621      	mov	r1, r4
 8004842:	612e      	str	r6, [r5, #16]
 8004844:	f7ff fd90 	bl	8004368 <_Bfree>
 8004848:	4628      	mov	r0, r5
 800484a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800484e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004852:	3301      	adds	r3, #1
 8004854:	e7c5      	b.n	80047e2 <__lshift+0x4a>
 8004856:	3904      	subs	r1, #4
 8004858:	f853 2b04 	ldr.w	r2, [r3], #4
 800485c:	459c      	cmp	ip, r3
 800485e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004862:	d8f9      	bhi.n	8004858 <__lshift+0xc0>
 8004864:	e7ea      	b.n	800483c <__lshift+0xa4>
 8004866:	bf00      	nop
 8004868:	08006c47 	.word	0x08006c47
 800486c:	08006c58 	.word	0x08006c58

08004870 <__mcmp>:
 8004870:	4603      	mov	r3, r0
 8004872:	690a      	ldr	r2, [r1, #16]
 8004874:	6900      	ldr	r0, [r0, #16]
 8004876:	b530      	push	{r4, r5, lr}
 8004878:	1a80      	subs	r0, r0, r2
 800487a:	d10d      	bne.n	8004898 <__mcmp+0x28>
 800487c:	3314      	adds	r3, #20
 800487e:	3114      	adds	r1, #20
 8004880:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004884:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004888:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800488c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004890:	4295      	cmp	r5, r2
 8004892:	d002      	beq.n	800489a <__mcmp+0x2a>
 8004894:	d304      	bcc.n	80048a0 <__mcmp+0x30>
 8004896:	2001      	movs	r0, #1
 8004898:	bd30      	pop	{r4, r5, pc}
 800489a:	42a3      	cmp	r3, r4
 800489c:	d3f4      	bcc.n	8004888 <__mcmp+0x18>
 800489e:	e7fb      	b.n	8004898 <__mcmp+0x28>
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295
 80048a4:	e7f8      	b.n	8004898 <__mcmp+0x28>
	...

080048a8 <__mdiff>:
 80048a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ac:	460d      	mov	r5, r1
 80048ae:	4607      	mov	r7, r0
 80048b0:	4611      	mov	r1, r2
 80048b2:	4628      	mov	r0, r5
 80048b4:	4614      	mov	r4, r2
 80048b6:	f7ff ffdb 	bl	8004870 <__mcmp>
 80048ba:	1e06      	subs	r6, r0, #0
 80048bc:	d111      	bne.n	80048e2 <__mdiff+0x3a>
 80048be:	4631      	mov	r1, r6
 80048c0:	4638      	mov	r0, r7
 80048c2:	f7ff fd11 	bl	80042e8 <_Balloc>
 80048c6:	4602      	mov	r2, r0
 80048c8:	b928      	cbnz	r0, 80048d6 <__mdiff+0x2e>
 80048ca:	f240 2137 	movw	r1, #567	; 0x237
 80048ce:	4b3a      	ldr	r3, [pc, #232]	; (80049b8 <__mdiff+0x110>)
 80048d0:	483a      	ldr	r0, [pc, #232]	; (80049bc <__mdiff+0x114>)
 80048d2:	f001 fa95 	bl	8005e00 <__assert_func>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80048dc:	4610      	mov	r0, r2
 80048de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e2:	bfa4      	itt	ge
 80048e4:	4623      	movge	r3, r4
 80048e6:	462c      	movge	r4, r5
 80048e8:	4638      	mov	r0, r7
 80048ea:	6861      	ldr	r1, [r4, #4]
 80048ec:	bfa6      	itte	ge
 80048ee:	461d      	movge	r5, r3
 80048f0:	2600      	movge	r6, #0
 80048f2:	2601      	movlt	r6, #1
 80048f4:	f7ff fcf8 	bl	80042e8 <_Balloc>
 80048f8:	4602      	mov	r2, r0
 80048fa:	b918      	cbnz	r0, 8004904 <__mdiff+0x5c>
 80048fc:	f240 2145 	movw	r1, #581	; 0x245
 8004900:	4b2d      	ldr	r3, [pc, #180]	; (80049b8 <__mdiff+0x110>)
 8004902:	e7e5      	b.n	80048d0 <__mdiff+0x28>
 8004904:	f102 0814 	add.w	r8, r2, #20
 8004908:	46c2      	mov	sl, r8
 800490a:	f04f 0c00 	mov.w	ip, #0
 800490e:	6927      	ldr	r7, [r4, #16]
 8004910:	60c6      	str	r6, [r0, #12]
 8004912:	692e      	ldr	r6, [r5, #16]
 8004914:	f104 0014 	add.w	r0, r4, #20
 8004918:	f105 0914 	add.w	r9, r5, #20
 800491c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004920:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004924:	3410      	adds	r4, #16
 8004926:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800492a:	f859 3b04 	ldr.w	r3, [r9], #4
 800492e:	fa1f f18b 	uxth.w	r1, fp
 8004932:	4461      	add	r1, ip
 8004934:	fa1f fc83 	uxth.w	ip, r3
 8004938:	0c1b      	lsrs	r3, r3, #16
 800493a:	eba1 010c 	sub.w	r1, r1, ip
 800493e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004942:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004946:	b289      	uxth	r1, r1
 8004948:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800494c:	454e      	cmp	r6, r9
 800494e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004952:	f84a 1b04 	str.w	r1, [sl], #4
 8004956:	d8e6      	bhi.n	8004926 <__mdiff+0x7e>
 8004958:	1b73      	subs	r3, r6, r5
 800495a:	3b15      	subs	r3, #21
 800495c:	f023 0303 	bic.w	r3, r3, #3
 8004960:	3515      	adds	r5, #21
 8004962:	3304      	adds	r3, #4
 8004964:	42ae      	cmp	r6, r5
 8004966:	bf38      	it	cc
 8004968:	2304      	movcc	r3, #4
 800496a:	4418      	add	r0, r3
 800496c:	4443      	add	r3, r8
 800496e:	461e      	mov	r6, r3
 8004970:	4605      	mov	r5, r0
 8004972:	4575      	cmp	r5, lr
 8004974:	d30e      	bcc.n	8004994 <__mdiff+0xec>
 8004976:	f10e 0103 	add.w	r1, lr, #3
 800497a:	1a09      	subs	r1, r1, r0
 800497c:	f021 0103 	bic.w	r1, r1, #3
 8004980:	3803      	subs	r0, #3
 8004982:	4586      	cmp	lr, r0
 8004984:	bf38      	it	cc
 8004986:	2100      	movcc	r1, #0
 8004988:	440b      	add	r3, r1
 800498a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800498e:	b189      	cbz	r1, 80049b4 <__mdiff+0x10c>
 8004990:	6117      	str	r7, [r2, #16]
 8004992:	e7a3      	b.n	80048dc <__mdiff+0x34>
 8004994:	f855 8b04 	ldr.w	r8, [r5], #4
 8004998:	fa1f f188 	uxth.w	r1, r8
 800499c:	4461      	add	r1, ip
 800499e:	140c      	asrs	r4, r1, #16
 80049a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80049a4:	b289      	uxth	r1, r1
 80049a6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80049aa:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80049ae:	f846 1b04 	str.w	r1, [r6], #4
 80049b2:	e7de      	b.n	8004972 <__mdiff+0xca>
 80049b4:	3f01      	subs	r7, #1
 80049b6:	e7e8      	b.n	800498a <__mdiff+0xe2>
 80049b8:	08006c47 	.word	0x08006c47
 80049bc:	08006c58 	.word	0x08006c58

080049c0 <__ulp>:
 80049c0:	4b0e      	ldr	r3, [pc, #56]	; (80049fc <__ulp+0x3c>)
 80049c2:	400b      	ands	r3, r1
 80049c4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	dc08      	bgt.n	80049de <__ulp+0x1e>
 80049cc:	425b      	negs	r3, r3
 80049ce:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80049d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80049d6:	da04      	bge.n	80049e2 <__ulp+0x22>
 80049d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80049dc:	4113      	asrs	r3, r2
 80049de:	2200      	movs	r2, #0
 80049e0:	e008      	b.n	80049f4 <__ulp+0x34>
 80049e2:	f1a2 0314 	sub.w	r3, r2, #20
 80049e6:	2b1e      	cmp	r3, #30
 80049e8:	bfd6      	itet	le
 80049ea:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80049ee:	2201      	movgt	r2, #1
 80049f0:	40da      	lsrle	r2, r3
 80049f2:	2300      	movs	r3, #0
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	7ff00000 	.word	0x7ff00000

08004a00 <__b2d>:
 8004a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a02:	6905      	ldr	r5, [r0, #16]
 8004a04:	f100 0714 	add.w	r7, r0, #20
 8004a08:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8004a0c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8004a10:	1f2e      	subs	r6, r5, #4
 8004a12:	4620      	mov	r0, r4
 8004a14:	f7ff fd5a 	bl	80044cc <__hi0bits>
 8004a18:	f1c0 0220 	rsb	r2, r0, #32
 8004a1c:	280a      	cmp	r0, #10
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f8df c068 	ldr.w	ip, [pc, #104]	; 8004a8c <__b2d+0x8c>
 8004a24:	600a      	str	r2, [r1, #0]
 8004a26:	dc12      	bgt.n	8004a4e <__b2d+0x4e>
 8004a28:	f1c0 0e0b 	rsb	lr, r0, #11
 8004a2c:	fa24 f20e 	lsr.w	r2, r4, lr
 8004a30:	42b7      	cmp	r7, r6
 8004a32:	ea42 010c 	orr.w	r1, r2, ip
 8004a36:	bf2c      	ite	cs
 8004a38:	2200      	movcs	r2, #0
 8004a3a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8004a3e:	3315      	adds	r3, #21
 8004a40:	fa04 f303 	lsl.w	r3, r4, r3
 8004a44:	fa22 f20e 	lsr.w	r2, r2, lr
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a4e:	42b7      	cmp	r7, r6
 8004a50:	bf2e      	itee	cs
 8004a52:	2200      	movcs	r2, #0
 8004a54:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8004a58:	f1a5 0608 	subcc.w	r6, r5, #8
 8004a5c:	3b0b      	subs	r3, #11
 8004a5e:	d012      	beq.n	8004a86 <__b2d+0x86>
 8004a60:	f1c3 0520 	rsb	r5, r3, #32
 8004a64:	fa22 f105 	lsr.w	r1, r2, r5
 8004a68:	409c      	lsls	r4, r3
 8004a6a:	430c      	orrs	r4, r1
 8004a6c:	42be      	cmp	r6, r7
 8004a6e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8004a72:	bf94      	ite	ls
 8004a74:	2400      	movls	r4, #0
 8004a76:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8004a7a:	409a      	lsls	r2, r3
 8004a7c:	40ec      	lsrs	r4, r5
 8004a7e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004a82:	4322      	orrs	r2, r4
 8004a84:	e7e1      	b.n	8004a4a <__b2d+0x4a>
 8004a86:	ea44 010c 	orr.w	r1, r4, ip
 8004a8a:	e7de      	b.n	8004a4a <__b2d+0x4a>
 8004a8c:	3ff00000 	.word	0x3ff00000

08004a90 <__d2b>:
 8004a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a92:	2101      	movs	r1, #1
 8004a94:	4617      	mov	r7, r2
 8004a96:	461c      	mov	r4, r3
 8004a98:	9e08      	ldr	r6, [sp, #32]
 8004a9a:	f7ff fc25 	bl	80042e8 <_Balloc>
 8004a9e:	4605      	mov	r5, r0
 8004aa0:	b930      	cbnz	r0, 8004ab0 <__d2b+0x20>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	f240 310f 	movw	r1, #783	; 0x30f
 8004aa8:	4b22      	ldr	r3, [pc, #136]	; (8004b34 <__d2b+0xa4>)
 8004aaa:	4823      	ldr	r0, [pc, #140]	; (8004b38 <__d2b+0xa8>)
 8004aac:	f001 f9a8 	bl	8005e00 <__assert_func>
 8004ab0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8004ab4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004ab8:	bb24      	cbnz	r4, 8004b04 <__d2b+0x74>
 8004aba:	2f00      	cmp	r7, #0
 8004abc:	9301      	str	r3, [sp, #4]
 8004abe:	d026      	beq.n	8004b0e <__d2b+0x7e>
 8004ac0:	4668      	mov	r0, sp
 8004ac2:	9700      	str	r7, [sp, #0]
 8004ac4:	f7ff fd22 	bl	800450c <__lo0bits>
 8004ac8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004acc:	b1e8      	cbz	r0, 8004b0a <__d2b+0x7a>
 8004ace:	f1c0 0320 	rsb	r3, r0, #32
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	430b      	orrs	r3, r1
 8004ad8:	40c2      	lsrs	r2, r0
 8004ada:	616b      	str	r3, [r5, #20]
 8004adc:	9201      	str	r2, [sp, #4]
 8004ade:	9b01      	ldr	r3, [sp, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	bf14      	ite	ne
 8004ae4:	2102      	movne	r1, #2
 8004ae6:	2101      	moveq	r1, #1
 8004ae8:	61ab      	str	r3, [r5, #24]
 8004aea:	6129      	str	r1, [r5, #16]
 8004aec:	b1bc      	cbz	r4, 8004b1e <__d2b+0x8e>
 8004aee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004af2:	4404      	add	r4, r0
 8004af4:	6034      	str	r4, [r6, #0]
 8004af6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004afc:	6018      	str	r0, [r3, #0]
 8004afe:	4628      	mov	r0, r5
 8004b00:	b003      	add	sp, #12
 8004b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b08:	e7d7      	b.n	8004aba <__d2b+0x2a>
 8004b0a:	6169      	str	r1, [r5, #20]
 8004b0c:	e7e7      	b.n	8004ade <__d2b+0x4e>
 8004b0e:	a801      	add	r0, sp, #4
 8004b10:	f7ff fcfc 	bl	800450c <__lo0bits>
 8004b14:	9b01      	ldr	r3, [sp, #4]
 8004b16:	2101      	movs	r1, #1
 8004b18:	616b      	str	r3, [r5, #20]
 8004b1a:	3020      	adds	r0, #32
 8004b1c:	e7e5      	b.n	8004aea <__d2b+0x5a>
 8004b1e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004b22:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8004b26:	6030      	str	r0, [r6, #0]
 8004b28:	6918      	ldr	r0, [r3, #16]
 8004b2a:	f7ff fccf 	bl	80044cc <__hi0bits>
 8004b2e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004b32:	e7e2      	b.n	8004afa <__d2b+0x6a>
 8004b34:	08006c47 	.word	0x08006c47
 8004b38:	08006c58 	.word	0x08006c58

08004b3c <__ratio>:
 8004b3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b40:	4688      	mov	r8, r1
 8004b42:	4669      	mov	r1, sp
 8004b44:	4681      	mov	r9, r0
 8004b46:	f7ff ff5b 	bl	8004a00 <__b2d>
 8004b4a:	460f      	mov	r7, r1
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	460d      	mov	r5, r1
 8004b50:	4640      	mov	r0, r8
 8004b52:	a901      	add	r1, sp, #4
 8004b54:	f7ff ff54 	bl	8004a00 <__b2d>
 8004b58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004b5c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004b60:	468b      	mov	fp, r1
 8004b62:	eba3 0c02 	sub.w	ip, r3, r2
 8004b66:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004b6a:	1a9b      	subs	r3, r3, r2
 8004b6c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	bfd5      	itete	le
 8004b74:	460a      	movle	r2, r1
 8004b76:	462a      	movgt	r2, r5
 8004b78:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8004b7c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8004b80:	bfd8      	it	le
 8004b82:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8004b86:	465b      	mov	r3, fp
 8004b88:	4602      	mov	r2, r0
 8004b8a:	4639      	mov	r1, r7
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f7fb fdcd 	bl	800072c <__aeabi_ddiv>
 8004b92:	b003      	add	sp, #12
 8004b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004b98 <__copybits>:
 8004b98:	3901      	subs	r1, #1
 8004b9a:	b570      	push	{r4, r5, r6, lr}
 8004b9c:	1149      	asrs	r1, r1, #5
 8004b9e:	6914      	ldr	r4, [r2, #16]
 8004ba0:	3101      	adds	r1, #1
 8004ba2:	f102 0314 	add.w	r3, r2, #20
 8004ba6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004baa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004bae:	1f05      	subs	r5, r0, #4
 8004bb0:	42a3      	cmp	r3, r4
 8004bb2:	d30c      	bcc.n	8004bce <__copybits+0x36>
 8004bb4:	1aa3      	subs	r3, r4, r2
 8004bb6:	3b11      	subs	r3, #17
 8004bb8:	f023 0303 	bic.w	r3, r3, #3
 8004bbc:	3211      	adds	r2, #17
 8004bbe:	42a2      	cmp	r2, r4
 8004bc0:	bf88      	it	hi
 8004bc2:	2300      	movhi	r3, #0
 8004bc4:	4418      	add	r0, r3
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	4288      	cmp	r0, r1
 8004bca:	d305      	bcc.n	8004bd8 <__copybits+0x40>
 8004bcc:	bd70      	pop	{r4, r5, r6, pc}
 8004bce:	f853 6b04 	ldr.w	r6, [r3], #4
 8004bd2:	f845 6f04 	str.w	r6, [r5, #4]!
 8004bd6:	e7eb      	b.n	8004bb0 <__copybits+0x18>
 8004bd8:	f840 3b04 	str.w	r3, [r0], #4
 8004bdc:	e7f4      	b.n	8004bc8 <__copybits+0x30>

08004bde <__any_on>:
 8004bde:	f100 0214 	add.w	r2, r0, #20
 8004be2:	6900      	ldr	r0, [r0, #16]
 8004be4:	114b      	asrs	r3, r1, #5
 8004be6:	4298      	cmp	r0, r3
 8004be8:	b510      	push	{r4, lr}
 8004bea:	db11      	blt.n	8004c10 <__any_on+0x32>
 8004bec:	dd0a      	ble.n	8004c04 <__any_on+0x26>
 8004bee:	f011 011f 	ands.w	r1, r1, #31
 8004bf2:	d007      	beq.n	8004c04 <__any_on+0x26>
 8004bf4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004bf8:	fa24 f001 	lsr.w	r0, r4, r1
 8004bfc:	fa00 f101 	lsl.w	r1, r0, r1
 8004c00:	428c      	cmp	r4, r1
 8004c02:	d10b      	bne.n	8004c1c <__any_on+0x3e>
 8004c04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d803      	bhi.n	8004c14 <__any_on+0x36>
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	bd10      	pop	{r4, pc}
 8004c10:	4603      	mov	r3, r0
 8004c12:	e7f7      	b.n	8004c04 <__any_on+0x26>
 8004c14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004c18:	2900      	cmp	r1, #0
 8004c1a:	d0f5      	beq.n	8004c08 <__any_on+0x2a>
 8004c1c:	2001      	movs	r0, #1
 8004c1e:	e7f6      	b.n	8004c0e <__any_on+0x30>

08004c20 <sulp>:
 8004c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c24:	460f      	mov	r7, r1
 8004c26:	4690      	mov	r8, r2
 8004c28:	f7ff feca 	bl	80049c0 <__ulp>
 8004c2c:	4604      	mov	r4, r0
 8004c2e:	460d      	mov	r5, r1
 8004c30:	f1b8 0f00 	cmp.w	r8, #0
 8004c34:	d011      	beq.n	8004c5a <sulp+0x3a>
 8004c36:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004c3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	dd0b      	ble.n	8004c5a <sulp+0x3a>
 8004c42:	2400      	movs	r4, #0
 8004c44:	051b      	lsls	r3, r3, #20
 8004c46:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004c4a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004c4e:	4622      	mov	r2, r4
 8004c50:	462b      	mov	r3, r5
 8004c52:	f7fb fc41 	bl	80004d8 <__aeabi_dmul>
 8004c56:	4604      	mov	r4, r0
 8004c58:	460d      	mov	r5, r1
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c62:	0000      	movs	r0, r0
 8004c64:	0000      	movs	r0, r0
	...

08004c68 <_strtod_l>:
 8004c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6c:	b09f      	sub	sp, #124	; 0x7c
 8004c6e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004c70:	2200      	movs	r2, #0
 8004c72:	4604      	mov	r4, r0
 8004c74:	921a      	str	r2, [sp, #104]	; 0x68
 8004c76:	460d      	mov	r5, r1
 8004c78:	f04f 0800 	mov.w	r8, #0
 8004c7c:	f04f 0900 	mov.w	r9, #0
 8004c80:	460a      	mov	r2, r1
 8004c82:	9219      	str	r2, [sp, #100]	; 0x64
 8004c84:	7811      	ldrb	r1, [r2, #0]
 8004c86:	292b      	cmp	r1, #43	; 0x2b
 8004c88:	d04a      	beq.n	8004d20 <_strtod_l+0xb8>
 8004c8a:	d838      	bhi.n	8004cfe <_strtod_l+0x96>
 8004c8c:	290d      	cmp	r1, #13
 8004c8e:	d832      	bhi.n	8004cf6 <_strtod_l+0x8e>
 8004c90:	2908      	cmp	r1, #8
 8004c92:	d832      	bhi.n	8004cfa <_strtod_l+0x92>
 8004c94:	2900      	cmp	r1, #0
 8004c96:	d03b      	beq.n	8004d10 <_strtod_l+0xa8>
 8004c98:	2200      	movs	r2, #0
 8004c9a:	920e      	str	r2, [sp, #56]	; 0x38
 8004c9c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004c9e:	7832      	ldrb	r2, [r6, #0]
 8004ca0:	2a30      	cmp	r2, #48	; 0x30
 8004ca2:	f040 80b2 	bne.w	8004e0a <_strtod_l+0x1a2>
 8004ca6:	7872      	ldrb	r2, [r6, #1]
 8004ca8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004cac:	2a58      	cmp	r2, #88	; 0x58
 8004cae:	d16e      	bne.n	8004d8e <_strtod_l+0x126>
 8004cb0:	9302      	str	r3, [sp, #8]
 8004cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	9301      	str	r3, [sp, #4]
 8004cb8:	ab1a      	add	r3, sp, #104	; 0x68
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	4a8c      	ldr	r2, [pc, #560]	; (8004ef0 <_strtod_l+0x288>)
 8004cbe:	ab1b      	add	r3, sp, #108	; 0x6c
 8004cc0:	a919      	add	r1, sp, #100	; 0x64
 8004cc2:	f001 f937 	bl	8005f34 <__gethex>
 8004cc6:	f010 070f 	ands.w	r7, r0, #15
 8004cca:	4605      	mov	r5, r0
 8004ccc:	d005      	beq.n	8004cda <_strtod_l+0x72>
 8004cce:	2f06      	cmp	r7, #6
 8004cd0:	d128      	bne.n	8004d24 <_strtod_l+0xbc>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	3601      	adds	r6, #1
 8004cd6:	9619      	str	r6, [sp, #100]	; 0x64
 8004cd8:	930e      	str	r3, [sp, #56]	; 0x38
 8004cda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f040 85a0 	bne.w	8005822 <_strtod_l+0xbba>
 8004ce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ce4:	b1cb      	cbz	r3, 8004d1a <_strtod_l+0xb2>
 8004ce6:	4642      	mov	r2, r8
 8004ce8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004cec:	4610      	mov	r0, r2
 8004cee:	4619      	mov	r1, r3
 8004cf0:	b01f      	add	sp, #124	; 0x7c
 8004cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf6:	2920      	cmp	r1, #32
 8004cf8:	d1ce      	bne.n	8004c98 <_strtod_l+0x30>
 8004cfa:	3201      	adds	r2, #1
 8004cfc:	e7c1      	b.n	8004c82 <_strtod_l+0x1a>
 8004cfe:	292d      	cmp	r1, #45	; 0x2d
 8004d00:	d1ca      	bne.n	8004c98 <_strtod_l+0x30>
 8004d02:	2101      	movs	r1, #1
 8004d04:	910e      	str	r1, [sp, #56]	; 0x38
 8004d06:	1c51      	adds	r1, r2, #1
 8004d08:	9119      	str	r1, [sp, #100]	; 0x64
 8004d0a:	7852      	ldrb	r2, [r2, #1]
 8004d0c:	2a00      	cmp	r2, #0
 8004d0e:	d1c5      	bne.n	8004c9c <_strtod_l+0x34>
 8004d10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d12:	9519      	str	r5, [sp, #100]	; 0x64
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f040 8582 	bne.w	800581e <_strtod_l+0xbb6>
 8004d1a:	4642      	mov	r2, r8
 8004d1c:	464b      	mov	r3, r9
 8004d1e:	e7e5      	b.n	8004cec <_strtod_l+0x84>
 8004d20:	2100      	movs	r1, #0
 8004d22:	e7ef      	b.n	8004d04 <_strtod_l+0x9c>
 8004d24:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004d26:	b13a      	cbz	r2, 8004d38 <_strtod_l+0xd0>
 8004d28:	2135      	movs	r1, #53	; 0x35
 8004d2a:	a81c      	add	r0, sp, #112	; 0x70
 8004d2c:	f7ff ff34 	bl	8004b98 <__copybits>
 8004d30:	4620      	mov	r0, r4
 8004d32:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004d34:	f7ff fb18 	bl	8004368 <_Bfree>
 8004d38:	3f01      	subs	r7, #1
 8004d3a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004d3c:	2f04      	cmp	r7, #4
 8004d3e:	d806      	bhi.n	8004d4e <_strtod_l+0xe6>
 8004d40:	e8df f007 	tbb	[pc, r7]
 8004d44:	201d0314 	.word	0x201d0314
 8004d48:	14          	.byte	0x14
 8004d49:	00          	.byte	0x00
 8004d4a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8004d4e:	05e9      	lsls	r1, r5, #23
 8004d50:	bf48      	it	mi
 8004d52:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8004d56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d5a:	0d1b      	lsrs	r3, r3, #20
 8004d5c:	051b      	lsls	r3, r3, #20
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1bb      	bne.n	8004cda <_strtod_l+0x72>
 8004d62:	f7fe fb15 	bl	8003390 <__errno>
 8004d66:	2322      	movs	r3, #34	; 0x22
 8004d68:	6003      	str	r3, [r0, #0]
 8004d6a:	e7b6      	b.n	8004cda <_strtod_l+0x72>
 8004d6c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004d70:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004d74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d78:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004d7c:	e7e7      	b.n	8004d4e <_strtod_l+0xe6>
 8004d7e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8004ef4 <_strtod_l+0x28c>
 8004d82:	e7e4      	b.n	8004d4e <_strtod_l+0xe6>
 8004d84:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004d88:	f04f 38ff 	mov.w	r8, #4294967295
 8004d8c:	e7df      	b.n	8004d4e <_strtod_l+0xe6>
 8004d8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	9219      	str	r2, [sp, #100]	; 0x64
 8004d94:	785b      	ldrb	r3, [r3, #1]
 8004d96:	2b30      	cmp	r3, #48	; 0x30
 8004d98:	d0f9      	beq.n	8004d8e <_strtod_l+0x126>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d09d      	beq.n	8004cda <_strtod_l+0x72>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f04f 0a00 	mov.w	sl, #0
 8004da4:	220a      	movs	r2, #10
 8004da6:	46d3      	mov	fp, sl
 8004da8:	9305      	str	r3, [sp, #20]
 8004daa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004dac:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8004db0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004db2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004db4:	7806      	ldrb	r6, [r0, #0]
 8004db6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004dba:	b2d9      	uxtb	r1, r3
 8004dbc:	2909      	cmp	r1, #9
 8004dbe:	d926      	bls.n	8004e0e <_strtod_l+0x1a6>
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	494d      	ldr	r1, [pc, #308]	; (8004ef8 <_strtod_l+0x290>)
 8004dc4:	f000 ffe6 	bl	8005d94 <strncmp>
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	d030      	beq.n	8004e2e <_strtod_l+0x1c6>
 8004dcc:	2000      	movs	r0, #0
 8004dce:	4632      	mov	r2, r6
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	465e      	mov	r6, fp
 8004dd4:	9008      	str	r0, [sp, #32]
 8004dd6:	2a65      	cmp	r2, #101	; 0x65
 8004dd8:	d001      	beq.n	8004dde <_strtod_l+0x176>
 8004dda:	2a45      	cmp	r2, #69	; 0x45
 8004ddc:	d113      	bne.n	8004e06 <_strtod_l+0x19e>
 8004dde:	b91e      	cbnz	r6, 8004de8 <_strtod_l+0x180>
 8004de0:	9a05      	ldr	r2, [sp, #20]
 8004de2:	4302      	orrs	r2, r0
 8004de4:	d094      	beq.n	8004d10 <_strtod_l+0xa8>
 8004de6:	2600      	movs	r6, #0
 8004de8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004dea:	1c6a      	adds	r2, r5, #1
 8004dec:	9219      	str	r2, [sp, #100]	; 0x64
 8004dee:	786a      	ldrb	r2, [r5, #1]
 8004df0:	2a2b      	cmp	r2, #43	; 0x2b
 8004df2:	d074      	beq.n	8004ede <_strtod_l+0x276>
 8004df4:	2a2d      	cmp	r2, #45	; 0x2d
 8004df6:	d078      	beq.n	8004eea <_strtod_l+0x282>
 8004df8:	f04f 0c00 	mov.w	ip, #0
 8004dfc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004e00:	2909      	cmp	r1, #9
 8004e02:	d97f      	bls.n	8004f04 <_strtod_l+0x29c>
 8004e04:	9519      	str	r5, [sp, #100]	; 0x64
 8004e06:	2700      	movs	r7, #0
 8004e08:	e09e      	b.n	8004f48 <_strtod_l+0x2e0>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	e7c8      	b.n	8004da0 <_strtod_l+0x138>
 8004e0e:	f1bb 0f08 	cmp.w	fp, #8
 8004e12:	bfd8      	it	le
 8004e14:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8004e16:	f100 0001 	add.w	r0, r0, #1
 8004e1a:	bfd6      	itet	le
 8004e1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004e20:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8004e24:	930a      	strle	r3, [sp, #40]	; 0x28
 8004e26:	f10b 0b01 	add.w	fp, fp, #1
 8004e2a:	9019      	str	r0, [sp, #100]	; 0x64
 8004e2c:	e7c1      	b.n	8004db2 <_strtod_l+0x14a>
 8004e2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	9219      	str	r2, [sp, #100]	; 0x64
 8004e34:	785a      	ldrb	r2, [r3, #1]
 8004e36:	f1bb 0f00 	cmp.w	fp, #0
 8004e3a:	d037      	beq.n	8004eac <_strtod_l+0x244>
 8004e3c:	465e      	mov	r6, fp
 8004e3e:	9008      	str	r0, [sp, #32]
 8004e40:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004e44:	2b09      	cmp	r3, #9
 8004e46:	d912      	bls.n	8004e6e <_strtod_l+0x206>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e7c4      	b.n	8004dd6 <_strtod_l+0x16e>
 8004e4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e4e:	3001      	adds	r0, #1
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	9219      	str	r2, [sp, #100]	; 0x64
 8004e54:	785a      	ldrb	r2, [r3, #1]
 8004e56:	2a30      	cmp	r2, #48	; 0x30
 8004e58:	d0f8      	beq.n	8004e4c <_strtod_l+0x1e4>
 8004e5a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	f200 84e4 	bhi.w	800582c <_strtod_l+0xbc4>
 8004e64:	9008      	str	r0, [sp, #32]
 8004e66:	2000      	movs	r0, #0
 8004e68:	4606      	mov	r6, r0
 8004e6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e6e:	3a30      	subs	r2, #48	; 0x30
 8004e70:	f100 0301 	add.w	r3, r0, #1
 8004e74:	d014      	beq.n	8004ea0 <_strtod_l+0x238>
 8004e76:	9908      	ldr	r1, [sp, #32]
 8004e78:	eb00 0c06 	add.w	ip, r0, r6
 8004e7c:	4419      	add	r1, r3
 8004e7e:	9108      	str	r1, [sp, #32]
 8004e80:	4633      	mov	r3, r6
 8004e82:	210a      	movs	r1, #10
 8004e84:	4563      	cmp	r3, ip
 8004e86:	d113      	bne.n	8004eb0 <_strtod_l+0x248>
 8004e88:	1833      	adds	r3, r6, r0
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	f106 0601 	add.w	r6, r6, #1
 8004e90:	4406      	add	r6, r0
 8004e92:	dc1a      	bgt.n	8004eca <_strtod_l+0x262>
 8004e94:	230a      	movs	r3, #10
 8004e96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e98:	fb03 2301 	mla	r3, r3, r1, r2
 8004e9c:	930a      	str	r3, [sp, #40]	; 0x28
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	1c51      	adds	r1, r2, #1
 8004ea6:	9119      	str	r1, [sp, #100]	; 0x64
 8004ea8:	7852      	ldrb	r2, [r2, #1]
 8004eaa:	e7c9      	b.n	8004e40 <_strtod_l+0x1d8>
 8004eac:	4658      	mov	r0, fp
 8004eae:	e7d2      	b.n	8004e56 <_strtod_l+0x1ee>
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	f103 0301 	add.w	r3, r3, #1
 8004eb6:	dc03      	bgt.n	8004ec0 <_strtod_l+0x258>
 8004eb8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004eba:	434f      	muls	r7, r1
 8004ebc:	970a      	str	r7, [sp, #40]	; 0x28
 8004ebe:	e7e1      	b.n	8004e84 <_strtod_l+0x21c>
 8004ec0:	2b10      	cmp	r3, #16
 8004ec2:	bfd8      	it	le
 8004ec4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8004ec8:	e7dc      	b.n	8004e84 <_strtod_l+0x21c>
 8004eca:	2e10      	cmp	r6, #16
 8004ecc:	bfdc      	itt	le
 8004ece:	230a      	movle	r3, #10
 8004ed0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8004ed4:	e7e3      	b.n	8004e9e <_strtod_l+0x236>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	9308      	str	r3, [sp, #32]
 8004eda:	2301      	movs	r3, #1
 8004edc:	e780      	b.n	8004de0 <_strtod_l+0x178>
 8004ede:	f04f 0c00 	mov.w	ip, #0
 8004ee2:	1caa      	adds	r2, r5, #2
 8004ee4:	9219      	str	r2, [sp, #100]	; 0x64
 8004ee6:	78aa      	ldrb	r2, [r5, #2]
 8004ee8:	e788      	b.n	8004dfc <_strtod_l+0x194>
 8004eea:	f04f 0c01 	mov.w	ip, #1
 8004eee:	e7f8      	b.n	8004ee2 <_strtod_l+0x27a>
 8004ef0:	08006db8 	.word	0x08006db8
 8004ef4:	7ff00000 	.word	0x7ff00000
 8004ef8:	08006db4 	.word	0x08006db4
 8004efc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004efe:	1c51      	adds	r1, r2, #1
 8004f00:	9119      	str	r1, [sp, #100]	; 0x64
 8004f02:	7852      	ldrb	r2, [r2, #1]
 8004f04:	2a30      	cmp	r2, #48	; 0x30
 8004f06:	d0f9      	beq.n	8004efc <_strtod_l+0x294>
 8004f08:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004f0c:	2908      	cmp	r1, #8
 8004f0e:	f63f af7a 	bhi.w	8004e06 <_strtod_l+0x19e>
 8004f12:	3a30      	subs	r2, #48	; 0x30
 8004f14:	9209      	str	r2, [sp, #36]	; 0x24
 8004f16:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004f18:	920c      	str	r2, [sp, #48]	; 0x30
 8004f1a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004f1c:	1c57      	adds	r7, r2, #1
 8004f1e:	9719      	str	r7, [sp, #100]	; 0x64
 8004f20:	7852      	ldrb	r2, [r2, #1]
 8004f22:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004f26:	f1be 0f09 	cmp.w	lr, #9
 8004f2a:	d938      	bls.n	8004f9e <_strtod_l+0x336>
 8004f2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f2e:	1a7f      	subs	r7, r7, r1
 8004f30:	2f08      	cmp	r7, #8
 8004f32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004f36:	dc03      	bgt.n	8004f40 <_strtod_l+0x2d8>
 8004f38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f3a:	428f      	cmp	r7, r1
 8004f3c:	bfa8      	it	ge
 8004f3e:	460f      	movge	r7, r1
 8004f40:	f1bc 0f00 	cmp.w	ip, #0
 8004f44:	d000      	beq.n	8004f48 <_strtod_l+0x2e0>
 8004f46:	427f      	negs	r7, r7
 8004f48:	2e00      	cmp	r6, #0
 8004f4a:	d14f      	bne.n	8004fec <_strtod_l+0x384>
 8004f4c:	9905      	ldr	r1, [sp, #20]
 8004f4e:	4301      	orrs	r1, r0
 8004f50:	f47f aec3 	bne.w	8004cda <_strtod_l+0x72>
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f47f aedb 	bne.w	8004d10 <_strtod_l+0xa8>
 8004f5a:	2a69      	cmp	r2, #105	; 0x69
 8004f5c:	d029      	beq.n	8004fb2 <_strtod_l+0x34a>
 8004f5e:	dc26      	bgt.n	8004fae <_strtod_l+0x346>
 8004f60:	2a49      	cmp	r2, #73	; 0x49
 8004f62:	d026      	beq.n	8004fb2 <_strtod_l+0x34a>
 8004f64:	2a4e      	cmp	r2, #78	; 0x4e
 8004f66:	f47f aed3 	bne.w	8004d10 <_strtod_l+0xa8>
 8004f6a:	499a      	ldr	r1, [pc, #616]	; (80051d4 <_strtod_l+0x56c>)
 8004f6c:	a819      	add	r0, sp, #100	; 0x64
 8004f6e:	f001 fa23 	bl	80063b8 <__match>
 8004f72:	2800      	cmp	r0, #0
 8004f74:	f43f aecc 	beq.w	8004d10 <_strtod_l+0xa8>
 8004f78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b28      	cmp	r3, #40	; 0x28
 8004f7e:	d12f      	bne.n	8004fe0 <_strtod_l+0x378>
 8004f80:	4995      	ldr	r1, [pc, #596]	; (80051d8 <_strtod_l+0x570>)
 8004f82:	aa1c      	add	r2, sp, #112	; 0x70
 8004f84:	a819      	add	r0, sp, #100	; 0x64
 8004f86:	f001 fa2b 	bl	80063e0 <__hexnan>
 8004f8a:	2805      	cmp	r0, #5
 8004f8c:	d128      	bne.n	8004fe0 <_strtod_l+0x378>
 8004f8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004f90:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004f94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004f98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004f9c:	e69d      	b.n	8004cda <_strtod_l+0x72>
 8004f9e:	210a      	movs	r1, #10
 8004fa0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004fa2:	fb01 2107 	mla	r1, r1, r7, r2
 8004fa6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004faa:	9209      	str	r2, [sp, #36]	; 0x24
 8004fac:	e7b5      	b.n	8004f1a <_strtod_l+0x2b2>
 8004fae:	2a6e      	cmp	r2, #110	; 0x6e
 8004fb0:	e7d9      	b.n	8004f66 <_strtod_l+0x2fe>
 8004fb2:	498a      	ldr	r1, [pc, #552]	; (80051dc <_strtod_l+0x574>)
 8004fb4:	a819      	add	r0, sp, #100	; 0x64
 8004fb6:	f001 f9ff 	bl	80063b8 <__match>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	f43f aea8 	beq.w	8004d10 <_strtod_l+0xa8>
 8004fc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fc2:	4987      	ldr	r1, [pc, #540]	; (80051e0 <_strtod_l+0x578>)
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	a819      	add	r0, sp, #100	; 0x64
 8004fc8:	9319      	str	r3, [sp, #100]	; 0x64
 8004fca:	f001 f9f5 	bl	80063b8 <__match>
 8004fce:	b910      	cbnz	r0, 8004fd6 <_strtod_l+0x36e>
 8004fd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	9319      	str	r3, [sp, #100]	; 0x64
 8004fd6:	f04f 0800 	mov.w	r8, #0
 8004fda:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80051e4 <_strtod_l+0x57c>
 8004fde:	e67c      	b.n	8004cda <_strtod_l+0x72>
 8004fe0:	4881      	ldr	r0, [pc, #516]	; (80051e8 <_strtod_l+0x580>)
 8004fe2:	f000 ff07 	bl	8005df4 <nan>
 8004fe6:	4680      	mov	r8, r0
 8004fe8:	4689      	mov	r9, r1
 8004fea:	e676      	b.n	8004cda <_strtod_l+0x72>
 8004fec:	9b08      	ldr	r3, [sp, #32]
 8004fee:	f1bb 0f00 	cmp.w	fp, #0
 8004ff2:	bf08      	it	eq
 8004ff4:	46b3      	moveq	fp, r6
 8004ff6:	1afb      	subs	r3, r7, r3
 8004ff8:	2e10      	cmp	r6, #16
 8004ffa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004ffc:	4635      	mov	r5, r6
 8004ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8005000:	bfa8      	it	ge
 8005002:	2510      	movge	r5, #16
 8005004:	f7fb f9ee 	bl	80003e4 <__aeabi_ui2d>
 8005008:	2e09      	cmp	r6, #9
 800500a:	4680      	mov	r8, r0
 800500c:	4689      	mov	r9, r1
 800500e:	dd13      	ble.n	8005038 <_strtod_l+0x3d0>
 8005010:	4b76      	ldr	r3, [pc, #472]	; (80051ec <_strtod_l+0x584>)
 8005012:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005016:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800501a:	f7fb fa5d 	bl	80004d8 <__aeabi_dmul>
 800501e:	4680      	mov	r8, r0
 8005020:	4650      	mov	r0, sl
 8005022:	4689      	mov	r9, r1
 8005024:	f7fb f9de 	bl	80003e4 <__aeabi_ui2d>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4640      	mov	r0, r8
 800502e:	4649      	mov	r1, r9
 8005030:	f7fb f89c 	bl	800016c <__adddf3>
 8005034:	4680      	mov	r8, r0
 8005036:	4689      	mov	r9, r1
 8005038:	2e0f      	cmp	r6, #15
 800503a:	dc36      	bgt.n	80050aa <_strtod_l+0x442>
 800503c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800503e:	2b00      	cmp	r3, #0
 8005040:	f43f ae4b 	beq.w	8004cda <_strtod_l+0x72>
 8005044:	dd22      	ble.n	800508c <_strtod_l+0x424>
 8005046:	2b16      	cmp	r3, #22
 8005048:	dc09      	bgt.n	800505e <_strtod_l+0x3f6>
 800504a:	4968      	ldr	r1, [pc, #416]	; (80051ec <_strtod_l+0x584>)
 800504c:	4642      	mov	r2, r8
 800504e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005052:	464b      	mov	r3, r9
 8005054:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005058:	f7fb fa3e 	bl	80004d8 <__aeabi_dmul>
 800505c:	e7c3      	b.n	8004fe6 <_strtod_l+0x37e>
 800505e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005060:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8005064:	4293      	cmp	r3, r2
 8005066:	db20      	blt.n	80050aa <_strtod_l+0x442>
 8005068:	4c60      	ldr	r4, [pc, #384]	; (80051ec <_strtod_l+0x584>)
 800506a:	f1c6 060f 	rsb	r6, r6, #15
 800506e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8005072:	4642      	mov	r2, r8
 8005074:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005078:	464b      	mov	r3, r9
 800507a:	f7fb fa2d 	bl	80004d8 <__aeabi_dmul>
 800507e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005080:	1b9e      	subs	r6, r3, r6
 8005082:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8005086:	e9d4 2300 	ldrd	r2, r3, [r4]
 800508a:	e7e5      	b.n	8005058 <_strtod_l+0x3f0>
 800508c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800508e:	3316      	adds	r3, #22
 8005090:	db0b      	blt.n	80050aa <_strtod_l+0x442>
 8005092:	9b08      	ldr	r3, [sp, #32]
 8005094:	4640      	mov	r0, r8
 8005096:	1bdf      	subs	r7, r3, r7
 8005098:	4b54      	ldr	r3, [pc, #336]	; (80051ec <_strtod_l+0x584>)
 800509a:	4649      	mov	r1, r9
 800509c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80050a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050a4:	f7fb fb42 	bl	800072c <__aeabi_ddiv>
 80050a8:	e79d      	b.n	8004fe6 <_strtod_l+0x37e>
 80050aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050ac:	1b75      	subs	r5, r6, r5
 80050ae:	441d      	add	r5, r3
 80050b0:	2d00      	cmp	r5, #0
 80050b2:	dd70      	ble.n	8005196 <_strtod_l+0x52e>
 80050b4:	f015 030f 	ands.w	r3, r5, #15
 80050b8:	d00a      	beq.n	80050d0 <_strtod_l+0x468>
 80050ba:	494c      	ldr	r1, [pc, #304]	; (80051ec <_strtod_l+0x584>)
 80050bc:	4642      	mov	r2, r8
 80050be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80050c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050c6:	464b      	mov	r3, r9
 80050c8:	f7fb fa06 	bl	80004d8 <__aeabi_dmul>
 80050cc:	4680      	mov	r8, r0
 80050ce:	4689      	mov	r9, r1
 80050d0:	f035 050f 	bics.w	r5, r5, #15
 80050d4:	d04d      	beq.n	8005172 <_strtod_l+0x50a>
 80050d6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80050da:	dd22      	ble.n	8005122 <_strtod_l+0x4ba>
 80050dc:	2600      	movs	r6, #0
 80050de:	46b3      	mov	fp, r6
 80050e0:	960b      	str	r6, [sp, #44]	; 0x2c
 80050e2:	9608      	str	r6, [sp, #32]
 80050e4:	2322      	movs	r3, #34	; 0x22
 80050e6:	f04f 0800 	mov.w	r8, #0
 80050ea:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80051e4 <_strtod_l+0x57c>
 80050ee:	6023      	str	r3, [r4, #0]
 80050f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f43f adf1 	beq.w	8004cda <_strtod_l+0x72>
 80050f8:	4620      	mov	r0, r4
 80050fa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80050fc:	f7ff f934 	bl	8004368 <_Bfree>
 8005100:	4620      	mov	r0, r4
 8005102:	9908      	ldr	r1, [sp, #32]
 8005104:	f7ff f930 	bl	8004368 <_Bfree>
 8005108:	4659      	mov	r1, fp
 800510a:	4620      	mov	r0, r4
 800510c:	f7ff f92c 	bl	8004368 <_Bfree>
 8005110:	4620      	mov	r0, r4
 8005112:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005114:	f7ff f928 	bl	8004368 <_Bfree>
 8005118:	4631      	mov	r1, r6
 800511a:	4620      	mov	r0, r4
 800511c:	f7ff f924 	bl	8004368 <_Bfree>
 8005120:	e5db      	b.n	8004cda <_strtod_l+0x72>
 8005122:	4b33      	ldr	r3, [pc, #204]	; (80051f0 <_strtod_l+0x588>)
 8005124:	4640      	mov	r0, r8
 8005126:	9305      	str	r3, [sp, #20]
 8005128:	2300      	movs	r3, #0
 800512a:	4649      	mov	r1, r9
 800512c:	469a      	mov	sl, r3
 800512e:	112d      	asrs	r5, r5, #4
 8005130:	2d01      	cmp	r5, #1
 8005132:	dc21      	bgt.n	8005178 <_strtod_l+0x510>
 8005134:	b10b      	cbz	r3, 800513a <_strtod_l+0x4d2>
 8005136:	4680      	mov	r8, r0
 8005138:	4689      	mov	r9, r1
 800513a:	492d      	ldr	r1, [pc, #180]	; (80051f0 <_strtod_l+0x588>)
 800513c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005140:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005144:	4642      	mov	r2, r8
 8005146:	e9d1 0100 	ldrd	r0, r1, [r1]
 800514a:	464b      	mov	r3, r9
 800514c:	f7fb f9c4 	bl	80004d8 <__aeabi_dmul>
 8005150:	4b24      	ldr	r3, [pc, #144]	; (80051e4 <_strtod_l+0x57c>)
 8005152:	460a      	mov	r2, r1
 8005154:	400b      	ands	r3, r1
 8005156:	4927      	ldr	r1, [pc, #156]	; (80051f4 <_strtod_l+0x58c>)
 8005158:	4680      	mov	r8, r0
 800515a:	428b      	cmp	r3, r1
 800515c:	d8be      	bhi.n	80050dc <_strtod_l+0x474>
 800515e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005162:	428b      	cmp	r3, r1
 8005164:	bf86      	itte	hi
 8005166:	f04f 38ff 	movhi.w	r8, #4294967295
 800516a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80051f8 <_strtod_l+0x590>
 800516e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005172:	2300      	movs	r3, #0
 8005174:	9305      	str	r3, [sp, #20]
 8005176:	e07b      	b.n	8005270 <_strtod_l+0x608>
 8005178:	07ea      	lsls	r2, r5, #31
 800517a:	d505      	bpl.n	8005188 <_strtod_l+0x520>
 800517c:	9b05      	ldr	r3, [sp, #20]
 800517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005182:	f7fb f9a9 	bl	80004d8 <__aeabi_dmul>
 8005186:	2301      	movs	r3, #1
 8005188:	9a05      	ldr	r2, [sp, #20]
 800518a:	f10a 0a01 	add.w	sl, sl, #1
 800518e:	3208      	adds	r2, #8
 8005190:	106d      	asrs	r5, r5, #1
 8005192:	9205      	str	r2, [sp, #20]
 8005194:	e7cc      	b.n	8005130 <_strtod_l+0x4c8>
 8005196:	d0ec      	beq.n	8005172 <_strtod_l+0x50a>
 8005198:	426d      	negs	r5, r5
 800519a:	f015 020f 	ands.w	r2, r5, #15
 800519e:	d00a      	beq.n	80051b6 <_strtod_l+0x54e>
 80051a0:	4b12      	ldr	r3, [pc, #72]	; (80051ec <_strtod_l+0x584>)
 80051a2:	4640      	mov	r0, r8
 80051a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051a8:	4649      	mov	r1, r9
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	f7fb fabd 	bl	800072c <__aeabi_ddiv>
 80051b2:	4680      	mov	r8, r0
 80051b4:	4689      	mov	r9, r1
 80051b6:	112d      	asrs	r5, r5, #4
 80051b8:	d0db      	beq.n	8005172 <_strtod_l+0x50a>
 80051ba:	2d1f      	cmp	r5, #31
 80051bc:	dd1e      	ble.n	80051fc <_strtod_l+0x594>
 80051be:	2600      	movs	r6, #0
 80051c0:	46b3      	mov	fp, r6
 80051c2:	960b      	str	r6, [sp, #44]	; 0x2c
 80051c4:	9608      	str	r6, [sp, #32]
 80051c6:	2322      	movs	r3, #34	; 0x22
 80051c8:	f04f 0800 	mov.w	r8, #0
 80051cc:	f04f 0900 	mov.w	r9, #0
 80051d0:	6023      	str	r3, [r4, #0]
 80051d2:	e78d      	b.n	80050f0 <_strtod_l+0x488>
 80051d4:	08006b9f 	.word	0x08006b9f
 80051d8:	08006dcc 	.word	0x08006dcc
 80051dc:	08006b97 	.word	0x08006b97
 80051e0:	08006bce 	.word	0x08006bce
 80051e4:	7ff00000 	.word	0x7ff00000
 80051e8:	08006f5d 	.word	0x08006f5d
 80051ec:	08006ce0 	.word	0x08006ce0
 80051f0:	08006cb8 	.word	0x08006cb8
 80051f4:	7ca00000 	.word	0x7ca00000
 80051f8:	7fefffff 	.word	0x7fefffff
 80051fc:	f015 0310 	ands.w	r3, r5, #16
 8005200:	bf18      	it	ne
 8005202:	236a      	movne	r3, #106	; 0x6a
 8005204:	4640      	mov	r0, r8
 8005206:	9305      	str	r3, [sp, #20]
 8005208:	4649      	mov	r1, r9
 800520a:	2300      	movs	r3, #0
 800520c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80054d8 <_strtod_l+0x870>
 8005210:	07ea      	lsls	r2, r5, #31
 8005212:	d504      	bpl.n	800521e <_strtod_l+0x5b6>
 8005214:	e9da 2300 	ldrd	r2, r3, [sl]
 8005218:	f7fb f95e 	bl	80004d8 <__aeabi_dmul>
 800521c:	2301      	movs	r3, #1
 800521e:	106d      	asrs	r5, r5, #1
 8005220:	f10a 0a08 	add.w	sl, sl, #8
 8005224:	d1f4      	bne.n	8005210 <_strtod_l+0x5a8>
 8005226:	b10b      	cbz	r3, 800522c <_strtod_l+0x5c4>
 8005228:	4680      	mov	r8, r0
 800522a:	4689      	mov	r9, r1
 800522c:	9b05      	ldr	r3, [sp, #20]
 800522e:	b1bb      	cbz	r3, 8005260 <_strtod_l+0x5f8>
 8005230:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005234:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005238:	2b00      	cmp	r3, #0
 800523a:	4649      	mov	r1, r9
 800523c:	dd10      	ble.n	8005260 <_strtod_l+0x5f8>
 800523e:	2b1f      	cmp	r3, #31
 8005240:	f340 8128 	ble.w	8005494 <_strtod_l+0x82c>
 8005244:	2b34      	cmp	r3, #52	; 0x34
 8005246:	bfd8      	it	le
 8005248:	f04f 33ff 	movle.w	r3, #4294967295
 800524c:	f04f 0800 	mov.w	r8, #0
 8005250:	bfcf      	iteee	gt
 8005252:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005256:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800525a:	4093      	lslle	r3, r2
 800525c:	ea03 0901 	andle.w	r9, r3, r1
 8005260:	2200      	movs	r2, #0
 8005262:	2300      	movs	r3, #0
 8005264:	4640      	mov	r0, r8
 8005266:	4649      	mov	r1, r9
 8005268:	f7fb fb9e 	bl	80009a8 <__aeabi_dcmpeq>
 800526c:	2800      	cmp	r0, #0
 800526e:	d1a6      	bne.n	80051be <_strtod_l+0x556>
 8005270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005272:	465a      	mov	r2, fp
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	4620      	mov	r0, r4
 8005278:	4633      	mov	r3, r6
 800527a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800527c:	f7ff f8dc 	bl	8004438 <__s2b>
 8005280:	900b      	str	r0, [sp, #44]	; 0x2c
 8005282:	2800      	cmp	r0, #0
 8005284:	f43f af2a 	beq.w	80050dc <_strtod_l+0x474>
 8005288:	2600      	movs	r6, #0
 800528a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800528c:	9b08      	ldr	r3, [sp, #32]
 800528e:	2a00      	cmp	r2, #0
 8005290:	eba3 0307 	sub.w	r3, r3, r7
 8005294:	bfa8      	it	ge
 8005296:	2300      	movge	r3, #0
 8005298:	46b3      	mov	fp, r6
 800529a:	9312      	str	r3, [sp, #72]	; 0x48
 800529c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80052a0:	9316      	str	r3, [sp, #88]	; 0x58
 80052a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052a4:	4620      	mov	r0, r4
 80052a6:	6859      	ldr	r1, [r3, #4]
 80052a8:	f7ff f81e 	bl	80042e8 <_Balloc>
 80052ac:	9008      	str	r0, [sp, #32]
 80052ae:	2800      	cmp	r0, #0
 80052b0:	f43f af18 	beq.w	80050e4 <_strtod_l+0x47c>
 80052b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052b6:	300c      	adds	r0, #12
 80052b8:	691a      	ldr	r2, [r3, #16]
 80052ba:	f103 010c 	add.w	r1, r3, #12
 80052be:	3202      	adds	r2, #2
 80052c0:	0092      	lsls	r2, r2, #2
 80052c2:	f000 fd89 	bl	8005dd8 <memcpy>
 80052c6:	ab1c      	add	r3, sp, #112	; 0x70
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	ab1b      	add	r3, sp, #108	; 0x6c
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	4642      	mov	r2, r8
 80052d0:	464b      	mov	r3, r9
 80052d2:	4620      	mov	r0, r4
 80052d4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80052d8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80052dc:	f7ff fbd8 	bl	8004a90 <__d2b>
 80052e0:	901a      	str	r0, [sp, #104]	; 0x68
 80052e2:	2800      	cmp	r0, #0
 80052e4:	f43f aefe 	beq.w	80050e4 <_strtod_l+0x47c>
 80052e8:	2101      	movs	r1, #1
 80052ea:	4620      	mov	r0, r4
 80052ec:	f7ff f93c 	bl	8004568 <__i2b>
 80052f0:	4683      	mov	fp, r0
 80052f2:	2800      	cmp	r0, #0
 80052f4:	f43f aef6 	beq.w	80050e4 <_strtod_l+0x47c>
 80052f8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80052fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80052fc:	2f00      	cmp	r7, #0
 80052fe:	bfab      	itete	ge
 8005300:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8005302:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005304:	eb07 0a03 	addge.w	sl, r7, r3
 8005308:	1bdd      	sublt	r5, r3, r7
 800530a:	9b05      	ldr	r3, [sp, #20]
 800530c:	bfa8      	it	ge
 800530e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8005310:	eba7 0703 	sub.w	r7, r7, r3
 8005314:	4417      	add	r7, r2
 8005316:	4b71      	ldr	r3, [pc, #452]	; (80054dc <_strtod_l+0x874>)
 8005318:	f107 37ff 	add.w	r7, r7, #4294967295
 800531c:	bfb8      	it	lt
 800531e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8005322:	429f      	cmp	r7, r3
 8005324:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005328:	f280 80c7 	bge.w	80054ba <_strtod_l+0x852>
 800532c:	1bdb      	subs	r3, r3, r7
 800532e:	2b1f      	cmp	r3, #31
 8005330:	f04f 0101 	mov.w	r1, #1
 8005334:	eba2 0203 	sub.w	r2, r2, r3
 8005338:	f300 80b3 	bgt.w	80054a2 <_strtod_l+0x83a>
 800533c:	fa01 f303 	lsl.w	r3, r1, r3
 8005340:	9313      	str	r3, [sp, #76]	; 0x4c
 8005342:	2300      	movs	r3, #0
 8005344:	9310      	str	r3, [sp, #64]	; 0x40
 8005346:	eb0a 0702 	add.w	r7, sl, r2
 800534a:	9b05      	ldr	r3, [sp, #20]
 800534c:	45ba      	cmp	sl, r7
 800534e:	4415      	add	r5, r2
 8005350:	441d      	add	r5, r3
 8005352:	4653      	mov	r3, sl
 8005354:	bfa8      	it	ge
 8005356:	463b      	movge	r3, r7
 8005358:	42ab      	cmp	r3, r5
 800535a:	bfa8      	it	ge
 800535c:	462b      	movge	r3, r5
 800535e:	2b00      	cmp	r3, #0
 8005360:	bfc2      	ittt	gt
 8005362:	1aff      	subgt	r7, r7, r3
 8005364:	1aed      	subgt	r5, r5, r3
 8005366:	ebaa 0a03 	subgt.w	sl, sl, r3
 800536a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800536c:	2b00      	cmp	r3, #0
 800536e:	dd17      	ble.n	80053a0 <_strtod_l+0x738>
 8005370:	4659      	mov	r1, fp
 8005372:	461a      	mov	r2, r3
 8005374:	4620      	mov	r0, r4
 8005376:	f7ff f9b5 	bl	80046e4 <__pow5mult>
 800537a:	4683      	mov	fp, r0
 800537c:	2800      	cmp	r0, #0
 800537e:	f43f aeb1 	beq.w	80050e4 <_strtod_l+0x47c>
 8005382:	4601      	mov	r1, r0
 8005384:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005386:	4620      	mov	r0, r4
 8005388:	f7ff f904 	bl	8004594 <__multiply>
 800538c:	900a      	str	r0, [sp, #40]	; 0x28
 800538e:	2800      	cmp	r0, #0
 8005390:	f43f aea8 	beq.w	80050e4 <_strtod_l+0x47c>
 8005394:	4620      	mov	r0, r4
 8005396:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005398:	f7fe ffe6 	bl	8004368 <_Bfree>
 800539c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800539e:	931a      	str	r3, [sp, #104]	; 0x68
 80053a0:	2f00      	cmp	r7, #0
 80053a2:	f300 808f 	bgt.w	80054c4 <_strtod_l+0x85c>
 80053a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	dd08      	ble.n	80053be <_strtod_l+0x756>
 80053ac:	4620      	mov	r0, r4
 80053ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80053b0:	9908      	ldr	r1, [sp, #32]
 80053b2:	f7ff f997 	bl	80046e4 <__pow5mult>
 80053b6:	9008      	str	r0, [sp, #32]
 80053b8:	2800      	cmp	r0, #0
 80053ba:	f43f ae93 	beq.w	80050e4 <_strtod_l+0x47c>
 80053be:	2d00      	cmp	r5, #0
 80053c0:	dd08      	ble.n	80053d4 <_strtod_l+0x76c>
 80053c2:	462a      	mov	r2, r5
 80053c4:	4620      	mov	r0, r4
 80053c6:	9908      	ldr	r1, [sp, #32]
 80053c8:	f7ff f9e6 	bl	8004798 <__lshift>
 80053cc:	9008      	str	r0, [sp, #32]
 80053ce:	2800      	cmp	r0, #0
 80053d0:	f43f ae88 	beq.w	80050e4 <_strtod_l+0x47c>
 80053d4:	f1ba 0f00 	cmp.w	sl, #0
 80053d8:	dd08      	ble.n	80053ec <_strtod_l+0x784>
 80053da:	4659      	mov	r1, fp
 80053dc:	4652      	mov	r2, sl
 80053de:	4620      	mov	r0, r4
 80053e0:	f7ff f9da 	bl	8004798 <__lshift>
 80053e4:	4683      	mov	fp, r0
 80053e6:	2800      	cmp	r0, #0
 80053e8:	f43f ae7c 	beq.w	80050e4 <_strtod_l+0x47c>
 80053ec:	4620      	mov	r0, r4
 80053ee:	9a08      	ldr	r2, [sp, #32]
 80053f0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80053f2:	f7ff fa59 	bl	80048a8 <__mdiff>
 80053f6:	4606      	mov	r6, r0
 80053f8:	2800      	cmp	r0, #0
 80053fa:	f43f ae73 	beq.w	80050e4 <_strtod_l+0x47c>
 80053fe:	2500      	movs	r5, #0
 8005400:	68c3      	ldr	r3, [r0, #12]
 8005402:	4659      	mov	r1, fp
 8005404:	60c5      	str	r5, [r0, #12]
 8005406:	930a      	str	r3, [sp, #40]	; 0x28
 8005408:	f7ff fa32 	bl	8004870 <__mcmp>
 800540c:	42a8      	cmp	r0, r5
 800540e:	da6b      	bge.n	80054e8 <_strtod_l+0x880>
 8005410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005412:	ea53 0308 	orrs.w	r3, r3, r8
 8005416:	f040 808f 	bne.w	8005538 <_strtod_l+0x8d0>
 800541a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800541e:	2b00      	cmp	r3, #0
 8005420:	f040 808a 	bne.w	8005538 <_strtod_l+0x8d0>
 8005424:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005428:	0d1b      	lsrs	r3, r3, #20
 800542a:	051b      	lsls	r3, r3, #20
 800542c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005430:	f240 8082 	bls.w	8005538 <_strtod_l+0x8d0>
 8005434:	6973      	ldr	r3, [r6, #20]
 8005436:	b913      	cbnz	r3, 800543e <_strtod_l+0x7d6>
 8005438:	6933      	ldr	r3, [r6, #16]
 800543a:	2b01      	cmp	r3, #1
 800543c:	dd7c      	ble.n	8005538 <_strtod_l+0x8d0>
 800543e:	4631      	mov	r1, r6
 8005440:	2201      	movs	r2, #1
 8005442:	4620      	mov	r0, r4
 8005444:	f7ff f9a8 	bl	8004798 <__lshift>
 8005448:	4659      	mov	r1, fp
 800544a:	4606      	mov	r6, r0
 800544c:	f7ff fa10 	bl	8004870 <__mcmp>
 8005450:	2800      	cmp	r0, #0
 8005452:	dd71      	ble.n	8005538 <_strtod_l+0x8d0>
 8005454:	9905      	ldr	r1, [sp, #20]
 8005456:	464b      	mov	r3, r9
 8005458:	4a21      	ldr	r2, [pc, #132]	; (80054e0 <_strtod_l+0x878>)
 800545a:	2900      	cmp	r1, #0
 800545c:	f000 808d 	beq.w	800557a <_strtod_l+0x912>
 8005460:	ea02 0109 	and.w	r1, r2, r9
 8005464:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005468:	f300 8087 	bgt.w	800557a <_strtod_l+0x912>
 800546c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005470:	f77f aea9 	ble.w	80051c6 <_strtod_l+0x55e>
 8005474:	4640      	mov	r0, r8
 8005476:	4649      	mov	r1, r9
 8005478:	4b1a      	ldr	r3, [pc, #104]	; (80054e4 <_strtod_l+0x87c>)
 800547a:	2200      	movs	r2, #0
 800547c:	f7fb f82c 	bl	80004d8 <__aeabi_dmul>
 8005480:	4b17      	ldr	r3, [pc, #92]	; (80054e0 <_strtod_l+0x878>)
 8005482:	4680      	mov	r8, r0
 8005484:	400b      	ands	r3, r1
 8005486:	4689      	mov	r9, r1
 8005488:	2b00      	cmp	r3, #0
 800548a:	f47f ae35 	bne.w	80050f8 <_strtod_l+0x490>
 800548e:	2322      	movs	r3, #34	; 0x22
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	e631      	b.n	80050f8 <_strtod_l+0x490>
 8005494:	f04f 32ff 	mov.w	r2, #4294967295
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	ea03 0808 	and.w	r8, r3, r8
 80054a0:	e6de      	b.n	8005260 <_strtod_l+0x5f8>
 80054a2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80054a6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80054aa:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80054ae:	37e2      	adds	r7, #226	; 0xe2
 80054b0:	fa01 f307 	lsl.w	r3, r1, r7
 80054b4:	9310      	str	r3, [sp, #64]	; 0x40
 80054b6:	9113      	str	r1, [sp, #76]	; 0x4c
 80054b8:	e745      	b.n	8005346 <_strtod_l+0x6de>
 80054ba:	2300      	movs	r3, #0
 80054bc:	9310      	str	r3, [sp, #64]	; 0x40
 80054be:	2301      	movs	r3, #1
 80054c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80054c2:	e740      	b.n	8005346 <_strtod_l+0x6de>
 80054c4:	463a      	mov	r2, r7
 80054c6:	4620      	mov	r0, r4
 80054c8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80054ca:	f7ff f965 	bl	8004798 <__lshift>
 80054ce:	901a      	str	r0, [sp, #104]	; 0x68
 80054d0:	2800      	cmp	r0, #0
 80054d2:	f47f af68 	bne.w	80053a6 <_strtod_l+0x73e>
 80054d6:	e605      	b.n	80050e4 <_strtod_l+0x47c>
 80054d8:	08006de0 	.word	0x08006de0
 80054dc:	fffffc02 	.word	0xfffffc02
 80054e0:	7ff00000 	.word	0x7ff00000
 80054e4:	39500000 	.word	0x39500000
 80054e8:	46ca      	mov	sl, r9
 80054ea:	d165      	bne.n	80055b8 <_strtod_l+0x950>
 80054ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80054f2:	b352      	cbz	r2, 800554a <_strtod_l+0x8e2>
 80054f4:	4a9e      	ldr	r2, [pc, #632]	; (8005770 <_strtod_l+0xb08>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d12a      	bne.n	8005550 <_strtod_l+0x8e8>
 80054fa:	9b05      	ldr	r3, [sp, #20]
 80054fc:	4641      	mov	r1, r8
 80054fe:	b1fb      	cbz	r3, 8005540 <_strtod_l+0x8d8>
 8005500:	4b9c      	ldr	r3, [pc, #624]	; (8005774 <_strtod_l+0xb0c>)
 8005502:	f04f 32ff 	mov.w	r2, #4294967295
 8005506:	ea09 0303 	and.w	r3, r9, r3
 800550a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800550e:	d81a      	bhi.n	8005546 <_strtod_l+0x8de>
 8005510:	0d1b      	lsrs	r3, r3, #20
 8005512:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	4299      	cmp	r1, r3
 800551c:	d118      	bne.n	8005550 <_strtod_l+0x8e8>
 800551e:	4b96      	ldr	r3, [pc, #600]	; (8005778 <_strtod_l+0xb10>)
 8005520:	459a      	cmp	sl, r3
 8005522:	d102      	bne.n	800552a <_strtod_l+0x8c2>
 8005524:	3101      	adds	r1, #1
 8005526:	f43f addd 	beq.w	80050e4 <_strtod_l+0x47c>
 800552a:	f04f 0800 	mov.w	r8, #0
 800552e:	4b91      	ldr	r3, [pc, #580]	; (8005774 <_strtod_l+0xb0c>)
 8005530:	ea0a 0303 	and.w	r3, sl, r3
 8005534:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8005538:	9b05      	ldr	r3, [sp, #20]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d19a      	bne.n	8005474 <_strtod_l+0x80c>
 800553e:	e5db      	b.n	80050f8 <_strtod_l+0x490>
 8005540:	f04f 33ff 	mov.w	r3, #4294967295
 8005544:	e7e9      	b.n	800551a <_strtod_l+0x8b2>
 8005546:	4613      	mov	r3, r2
 8005548:	e7e7      	b.n	800551a <_strtod_l+0x8b2>
 800554a:	ea53 0308 	orrs.w	r3, r3, r8
 800554e:	d081      	beq.n	8005454 <_strtod_l+0x7ec>
 8005550:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005552:	b1e3      	cbz	r3, 800558e <_strtod_l+0x926>
 8005554:	ea13 0f0a 	tst.w	r3, sl
 8005558:	d0ee      	beq.n	8005538 <_strtod_l+0x8d0>
 800555a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800555c:	4640      	mov	r0, r8
 800555e:	4649      	mov	r1, r9
 8005560:	9a05      	ldr	r2, [sp, #20]
 8005562:	b1c3      	cbz	r3, 8005596 <_strtod_l+0x92e>
 8005564:	f7ff fb5c 	bl	8004c20 <sulp>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800556e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005570:	f7fa fdfc 	bl	800016c <__adddf3>
 8005574:	4680      	mov	r8, r0
 8005576:	4689      	mov	r9, r1
 8005578:	e7de      	b.n	8005538 <_strtod_l+0x8d0>
 800557a:	4013      	ands	r3, r2
 800557c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005580:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005584:	f04f 38ff 	mov.w	r8, #4294967295
 8005588:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800558c:	e7d4      	b.n	8005538 <_strtod_l+0x8d0>
 800558e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005590:	ea13 0f08 	tst.w	r3, r8
 8005594:	e7e0      	b.n	8005558 <_strtod_l+0x8f0>
 8005596:	f7ff fb43 	bl	8004c20 <sulp>
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80055a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80055a2:	f7fa fde1 	bl	8000168 <__aeabi_dsub>
 80055a6:	2200      	movs	r2, #0
 80055a8:	2300      	movs	r3, #0
 80055aa:	4680      	mov	r8, r0
 80055ac:	4689      	mov	r9, r1
 80055ae:	f7fb f9fb 	bl	80009a8 <__aeabi_dcmpeq>
 80055b2:	2800      	cmp	r0, #0
 80055b4:	d0c0      	beq.n	8005538 <_strtod_l+0x8d0>
 80055b6:	e606      	b.n	80051c6 <_strtod_l+0x55e>
 80055b8:	4659      	mov	r1, fp
 80055ba:	4630      	mov	r0, r6
 80055bc:	f7ff fabe 	bl	8004b3c <__ratio>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80055c8:	2200      	movs	r2, #0
 80055ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055ce:	f7fb f9ff 	bl	80009d0 <__aeabi_dcmple>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d06f      	beq.n	80056b6 <_strtod_l+0xa4e>
 80055d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d17c      	bne.n	80056d6 <_strtod_l+0xa6e>
 80055dc:	f1b8 0f00 	cmp.w	r8, #0
 80055e0:	d159      	bne.n	8005696 <_strtod_l+0xa2e>
 80055e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d17b      	bne.n	80056e2 <_strtod_l+0xa7a>
 80055ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055ee:	2200      	movs	r2, #0
 80055f0:	4b62      	ldr	r3, [pc, #392]	; (800577c <_strtod_l+0xb14>)
 80055f2:	f7fb f9e3 	bl	80009bc <__aeabi_dcmplt>
 80055f6:	2800      	cmp	r0, #0
 80055f8:	d15a      	bne.n	80056b0 <_strtod_l+0xa48>
 80055fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055fe:	2200      	movs	r2, #0
 8005600:	4b5f      	ldr	r3, [pc, #380]	; (8005780 <_strtod_l+0xb18>)
 8005602:	f7fa ff69 	bl	80004d8 <__aeabi_dmul>
 8005606:	4605      	mov	r5, r0
 8005608:	460f      	mov	r7, r1
 800560a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800560e:	9506      	str	r5, [sp, #24]
 8005610:	9307      	str	r3, [sp, #28]
 8005612:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005616:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800561a:	4b56      	ldr	r3, [pc, #344]	; (8005774 <_strtod_l+0xb0c>)
 800561c:	4a55      	ldr	r2, [pc, #340]	; (8005774 <_strtod_l+0xb0c>)
 800561e:	ea0a 0303 	and.w	r3, sl, r3
 8005622:	9313      	str	r3, [sp, #76]	; 0x4c
 8005624:	4b57      	ldr	r3, [pc, #348]	; (8005784 <_strtod_l+0xb1c>)
 8005626:	ea0a 0202 	and.w	r2, sl, r2
 800562a:	429a      	cmp	r2, r3
 800562c:	f040 80b0 	bne.w	8005790 <_strtod_l+0xb28>
 8005630:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8005634:	4640      	mov	r0, r8
 8005636:	4649      	mov	r1, r9
 8005638:	f7ff f9c2 	bl	80049c0 <__ulp>
 800563c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005640:	f7fa ff4a 	bl	80004d8 <__aeabi_dmul>
 8005644:	4642      	mov	r2, r8
 8005646:	464b      	mov	r3, r9
 8005648:	f7fa fd90 	bl	800016c <__adddf3>
 800564c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8005774 <_strtod_l+0xb0c>
 8005650:	4a4d      	ldr	r2, [pc, #308]	; (8005788 <_strtod_l+0xb20>)
 8005652:	ea01 0a0a 	and.w	sl, r1, sl
 8005656:	4592      	cmp	sl, r2
 8005658:	4680      	mov	r8, r0
 800565a:	d948      	bls.n	80056ee <_strtod_l+0xa86>
 800565c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800565e:	4b46      	ldr	r3, [pc, #280]	; (8005778 <_strtod_l+0xb10>)
 8005660:	429a      	cmp	r2, r3
 8005662:	d103      	bne.n	800566c <_strtod_l+0xa04>
 8005664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005666:	3301      	adds	r3, #1
 8005668:	f43f ad3c 	beq.w	80050e4 <_strtod_l+0x47c>
 800566c:	f04f 38ff 	mov.w	r8, #4294967295
 8005670:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8005778 <_strtod_l+0xb10>
 8005674:	4620      	mov	r0, r4
 8005676:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005678:	f7fe fe76 	bl	8004368 <_Bfree>
 800567c:	4620      	mov	r0, r4
 800567e:	9908      	ldr	r1, [sp, #32]
 8005680:	f7fe fe72 	bl	8004368 <_Bfree>
 8005684:	4659      	mov	r1, fp
 8005686:	4620      	mov	r0, r4
 8005688:	f7fe fe6e 	bl	8004368 <_Bfree>
 800568c:	4631      	mov	r1, r6
 800568e:	4620      	mov	r0, r4
 8005690:	f7fe fe6a 	bl	8004368 <_Bfree>
 8005694:	e605      	b.n	80052a2 <_strtod_l+0x63a>
 8005696:	f1b8 0f01 	cmp.w	r8, #1
 800569a:	d103      	bne.n	80056a4 <_strtod_l+0xa3c>
 800569c:	f1b9 0f00 	cmp.w	r9, #0
 80056a0:	f43f ad91 	beq.w	80051c6 <_strtod_l+0x55e>
 80056a4:	2200      	movs	r2, #0
 80056a6:	4b39      	ldr	r3, [pc, #228]	; (800578c <_strtod_l+0xb24>)
 80056a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80056aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80056ae:	e016      	b.n	80056de <_strtod_l+0xa76>
 80056b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80056b2:	4f33      	ldr	r7, [pc, #204]	; (8005780 <_strtod_l+0xb18>)
 80056b4:	e7a9      	b.n	800560a <_strtod_l+0x9a2>
 80056b6:	4b32      	ldr	r3, [pc, #200]	; (8005780 <_strtod_l+0xb18>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056be:	f7fa ff0b 	bl	80004d8 <__aeabi_dmul>
 80056c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056c4:	4605      	mov	r5, r0
 80056c6:	460f      	mov	r7, r1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d09e      	beq.n	800560a <_strtod_l+0x9a2>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80056d4:	e79d      	b.n	8005612 <_strtod_l+0x9aa>
 80056d6:	2200      	movs	r2, #0
 80056d8:	4b28      	ldr	r3, [pc, #160]	; (800577c <_strtod_l+0xb14>)
 80056da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80056de:	4f27      	ldr	r7, [pc, #156]	; (800577c <_strtod_l+0xb14>)
 80056e0:	e797      	b.n	8005612 <_strtod_l+0x9aa>
 80056e2:	2200      	movs	r2, #0
 80056e4:	4b29      	ldr	r3, [pc, #164]	; (800578c <_strtod_l+0xb24>)
 80056e6:	4645      	mov	r5, r8
 80056e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80056ec:	e7f7      	b.n	80056de <_strtod_l+0xa76>
 80056ee:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80056f2:	9b05      	ldr	r3, [sp, #20]
 80056f4:	46ca      	mov	sl, r9
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1bc      	bne.n	8005674 <_strtod_l+0xa0c>
 80056fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80056fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005700:	0d1b      	lsrs	r3, r3, #20
 8005702:	051b      	lsls	r3, r3, #20
 8005704:	429a      	cmp	r2, r3
 8005706:	d1b5      	bne.n	8005674 <_strtod_l+0xa0c>
 8005708:	4628      	mov	r0, r5
 800570a:	4639      	mov	r1, r7
 800570c:	f7fb fa2c 	bl	8000b68 <__aeabi_d2lz>
 8005710:	f7fa feb4 	bl	800047c <__aeabi_l2d>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4628      	mov	r0, r5
 800571a:	4639      	mov	r1, r7
 800571c:	f7fa fd24 	bl	8000168 <__aeabi_dsub>
 8005720:	460b      	mov	r3, r1
 8005722:	4602      	mov	r2, r0
 8005724:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8005728:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800572c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800572e:	ea4a 0a08 	orr.w	sl, sl, r8
 8005732:	ea5a 0a03 	orrs.w	sl, sl, r3
 8005736:	d06c      	beq.n	8005812 <_strtod_l+0xbaa>
 8005738:	a309      	add	r3, pc, #36	; (adr r3, 8005760 <_strtod_l+0xaf8>)
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	f7fb f93d 	bl	80009bc <__aeabi_dcmplt>
 8005742:	2800      	cmp	r0, #0
 8005744:	f47f acd8 	bne.w	80050f8 <_strtod_l+0x490>
 8005748:	a307      	add	r3, pc, #28	; (adr r3, 8005768 <_strtod_l+0xb00>)
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005752:	f7fb f951 	bl	80009f8 <__aeabi_dcmpgt>
 8005756:	2800      	cmp	r0, #0
 8005758:	d08c      	beq.n	8005674 <_strtod_l+0xa0c>
 800575a:	e4cd      	b.n	80050f8 <_strtod_l+0x490>
 800575c:	f3af 8000 	nop.w
 8005760:	94a03595 	.word	0x94a03595
 8005764:	3fdfffff 	.word	0x3fdfffff
 8005768:	35afe535 	.word	0x35afe535
 800576c:	3fe00000 	.word	0x3fe00000
 8005770:	000fffff 	.word	0x000fffff
 8005774:	7ff00000 	.word	0x7ff00000
 8005778:	7fefffff 	.word	0x7fefffff
 800577c:	3ff00000 	.word	0x3ff00000
 8005780:	3fe00000 	.word	0x3fe00000
 8005784:	7fe00000 	.word	0x7fe00000
 8005788:	7c9fffff 	.word	0x7c9fffff
 800578c:	bff00000 	.word	0xbff00000
 8005790:	9b05      	ldr	r3, [sp, #20]
 8005792:	b333      	cbz	r3, 80057e2 <_strtod_l+0xb7a>
 8005794:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005796:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800579a:	d822      	bhi.n	80057e2 <_strtod_l+0xb7a>
 800579c:	a328      	add	r3, pc, #160	; (adr r3, 8005840 <_strtod_l+0xbd8>)
 800579e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a2:	4628      	mov	r0, r5
 80057a4:	4639      	mov	r1, r7
 80057a6:	f7fb f913 	bl	80009d0 <__aeabi_dcmple>
 80057aa:	b1a0      	cbz	r0, 80057d6 <_strtod_l+0xb6e>
 80057ac:	4639      	mov	r1, r7
 80057ae:	4628      	mov	r0, r5
 80057b0:	f7fb f96a 	bl	8000a88 <__aeabi_d2uiz>
 80057b4:	2801      	cmp	r0, #1
 80057b6:	bf38      	it	cc
 80057b8:	2001      	movcc	r0, #1
 80057ba:	f7fa fe13 	bl	80003e4 <__aeabi_ui2d>
 80057be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057c0:	4605      	mov	r5, r0
 80057c2:	460f      	mov	r7, r1
 80057c4:	bb03      	cbnz	r3, 8005808 <_strtod_l+0xba0>
 80057c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057ca:	9014      	str	r0, [sp, #80]	; 0x50
 80057cc:	9315      	str	r3, [sp, #84]	; 0x54
 80057ce:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80057d2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80057d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80057da:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	9311      	str	r3, [sp, #68]	; 0x44
 80057e2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80057e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80057e6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80057ea:	f7ff f8e9 	bl	80049c0 <__ulp>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	4640      	mov	r0, r8
 80057f4:	4649      	mov	r1, r9
 80057f6:	f7fa fe6f 	bl	80004d8 <__aeabi_dmul>
 80057fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057fe:	f7fa fcb5 	bl	800016c <__adddf3>
 8005802:	4680      	mov	r8, r0
 8005804:	4689      	mov	r9, r1
 8005806:	e774      	b.n	80056f2 <_strtod_l+0xa8a>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005810:	e7dd      	b.n	80057ce <_strtod_l+0xb66>
 8005812:	a30d      	add	r3, pc, #52	; (adr r3, 8005848 <_strtod_l+0xbe0>)
 8005814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005818:	f7fb f8d0 	bl	80009bc <__aeabi_dcmplt>
 800581c:	e79b      	b.n	8005756 <_strtod_l+0xaee>
 800581e:	2300      	movs	r3, #0
 8005820:	930e      	str	r3, [sp, #56]	; 0x38
 8005822:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005824:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	f7ff ba5b 	b.w	8004ce2 <_strtod_l+0x7a>
 800582c:	2a65      	cmp	r2, #101	; 0x65
 800582e:	f43f ab52 	beq.w	8004ed6 <_strtod_l+0x26e>
 8005832:	2a45      	cmp	r2, #69	; 0x45
 8005834:	f43f ab4f 	beq.w	8004ed6 <_strtod_l+0x26e>
 8005838:	2301      	movs	r3, #1
 800583a:	f7ff bb87 	b.w	8004f4c <_strtod_l+0x2e4>
 800583e:	bf00      	nop
 8005840:	ffc00000 	.word	0xffc00000
 8005844:	41dfffff 	.word	0x41dfffff
 8005848:	94a03595 	.word	0x94a03595
 800584c:	3fcfffff 	.word	0x3fcfffff

08005850 <_strtod_r>:
 8005850:	4b01      	ldr	r3, [pc, #4]	; (8005858 <_strtod_r+0x8>)
 8005852:	f7ff ba09 	b.w	8004c68 <_strtod_l>
 8005856:	bf00      	nop
 8005858:	20000068 	.word	0x20000068

0800585c <_strtol_l.constprop.0>:
 800585c:	2b01      	cmp	r3, #1
 800585e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005862:	4686      	mov	lr, r0
 8005864:	4690      	mov	r8, r2
 8005866:	d001      	beq.n	800586c <_strtol_l.constprop.0+0x10>
 8005868:	2b24      	cmp	r3, #36	; 0x24
 800586a:	d906      	bls.n	800587a <_strtol_l.constprop.0+0x1e>
 800586c:	f7fd fd90 	bl	8003390 <__errno>
 8005870:	2316      	movs	r3, #22
 8005872:	6003      	str	r3, [r0, #0]
 8005874:	2000      	movs	r0, #0
 8005876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800587a:	460d      	mov	r5, r1
 800587c:	4835      	ldr	r0, [pc, #212]	; (8005954 <_strtol_l.constprop.0+0xf8>)
 800587e:	462a      	mov	r2, r5
 8005880:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005884:	5d06      	ldrb	r6, [r0, r4]
 8005886:	f016 0608 	ands.w	r6, r6, #8
 800588a:	d1f8      	bne.n	800587e <_strtol_l.constprop.0+0x22>
 800588c:	2c2d      	cmp	r4, #45	; 0x2d
 800588e:	d12e      	bne.n	80058ee <_strtol_l.constprop.0+0x92>
 8005890:	2601      	movs	r6, #1
 8005892:	782c      	ldrb	r4, [r5, #0]
 8005894:	1c95      	adds	r5, r2, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d057      	beq.n	800594a <_strtol_l.constprop.0+0xee>
 800589a:	2b10      	cmp	r3, #16
 800589c:	d109      	bne.n	80058b2 <_strtol_l.constprop.0+0x56>
 800589e:	2c30      	cmp	r4, #48	; 0x30
 80058a0:	d107      	bne.n	80058b2 <_strtol_l.constprop.0+0x56>
 80058a2:	782a      	ldrb	r2, [r5, #0]
 80058a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80058a8:	2a58      	cmp	r2, #88	; 0x58
 80058aa:	d149      	bne.n	8005940 <_strtol_l.constprop.0+0xe4>
 80058ac:	2310      	movs	r3, #16
 80058ae:	786c      	ldrb	r4, [r5, #1]
 80058b0:	3502      	adds	r5, #2
 80058b2:	2200      	movs	r2, #0
 80058b4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80058b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80058bc:	fbbc f9f3 	udiv	r9, ip, r3
 80058c0:	4610      	mov	r0, r2
 80058c2:	fb03 ca19 	mls	sl, r3, r9, ip
 80058c6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80058ca:	2f09      	cmp	r7, #9
 80058cc:	d814      	bhi.n	80058f8 <_strtol_l.constprop.0+0x9c>
 80058ce:	463c      	mov	r4, r7
 80058d0:	42a3      	cmp	r3, r4
 80058d2:	dd20      	ble.n	8005916 <_strtol_l.constprop.0+0xba>
 80058d4:	1c57      	adds	r7, r2, #1
 80058d6:	d007      	beq.n	80058e8 <_strtol_l.constprop.0+0x8c>
 80058d8:	4581      	cmp	r9, r0
 80058da:	d319      	bcc.n	8005910 <_strtol_l.constprop.0+0xb4>
 80058dc:	d101      	bne.n	80058e2 <_strtol_l.constprop.0+0x86>
 80058de:	45a2      	cmp	sl, r4
 80058e0:	db16      	blt.n	8005910 <_strtol_l.constprop.0+0xb4>
 80058e2:	2201      	movs	r2, #1
 80058e4:	fb00 4003 	mla	r0, r0, r3, r4
 80058e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058ec:	e7eb      	b.n	80058c6 <_strtol_l.constprop.0+0x6a>
 80058ee:	2c2b      	cmp	r4, #43	; 0x2b
 80058f0:	bf04      	itt	eq
 80058f2:	782c      	ldrbeq	r4, [r5, #0]
 80058f4:	1c95      	addeq	r5, r2, #2
 80058f6:	e7ce      	b.n	8005896 <_strtol_l.constprop.0+0x3a>
 80058f8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80058fc:	2f19      	cmp	r7, #25
 80058fe:	d801      	bhi.n	8005904 <_strtol_l.constprop.0+0xa8>
 8005900:	3c37      	subs	r4, #55	; 0x37
 8005902:	e7e5      	b.n	80058d0 <_strtol_l.constprop.0+0x74>
 8005904:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005908:	2f19      	cmp	r7, #25
 800590a:	d804      	bhi.n	8005916 <_strtol_l.constprop.0+0xba>
 800590c:	3c57      	subs	r4, #87	; 0x57
 800590e:	e7df      	b.n	80058d0 <_strtol_l.constprop.0+0x74>
 8005910:	f04f 32ff 	mov.w	r2, #4294967295
 8005914:	e7e8      	b.n	80058e8 <_strtol_l.constprop.0+0x8c>
 8005916:	1c53      	adds	r3, r2, #1
 8005918:	d108      	bne.n	800592c <_strtol_l.constprop.0+0xd0>
 800591a:	2322      	movs	r3, #34	; 0x22
 800591c:	4660      	mov	r0, ip
 800591e:	f8ce 3000 	str.w	r3, [lr]
 8005922:	f1b8 0f00 	cmp.w	r8, #0
 8005926:	d0a6      	beq.n	8005876 <_strtol_l.constprop.0+0x1a>
 8005928:	1e69      	subs	r1, r5, #1
 800592a:	e006      	b.n	800593a <_strtol_l.constprop.0+0xde>
 800592c:	b106      	cbz	r6, 8005930 <_strtol_l.constprop.0+0xd4>
 800592e:	4240      	negs	r0, r0
 8005930:	f1b8 0f00 	cmp.w	r8, #0
 8005934:	d09f      	beq.n	8005876 <_strtol_l.constprop.0+0x1a>
 8005936:	2a00      	cmp	r2, #0
 8005938:	d1f6      	bne.n	8005928 <_strtol_l.constprop.0+0xcc>
 800593a:	f8c8 1000 	str.w	r1, [r8]
 800593e:	e79a      	b.n	8005876 <_strtol_l.constprop.0+0x1a>
 8005940:	2430      	movs	r4, #48	; 0x30
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1b5      	bne.n	80058b2 <_strtol_l.constprop.0+0x56>
 8005946:	2308      	movs	r3, #8
 8005948:	e7b3      	b.n	80058b2 <_strtol_l.constprop.0+0x56>
 800594a:	2c30      	cmp	r4, #48	; 0x30
 800594c:	d0a9      	beq.n	80058a2 <_strtol_l.constprop.0+0x46>
 800594e:	230a      	movs	r3, #10
 8005950:	e7af      	b.n	80058b2 <_strtol_l.constprop.0+0x56>
 8005952:	bf00      	nop
 8005954:	08006e09 	.word	0x08006e09

08005958 <_strtol_r>:
 8005958:	f7ff bf80 	b.w	800585c <_strtol_l.constprop.0>

0800595c <__ssputs_r>:
 800595c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005960:	461f      	mov	r7, r3
 8005962:	688e      	ldr	r6, [r1, #8]
 8005964:	4682      	mov	sl, r0
 8005966:	42be      	cmp	r6, r7
 8005968:	460c      	mov	r4, r1
 800596a:	4690      	mov	r8, r2
 800596c:	680b      	ldr	r3, [r1, #0]
 800596e:	d82c      	bhi.n	80059ca <__ssputs_r+0x6e>
 8005970:	898a      	ldrh	r2, [r1, #12]
 8005972:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005976:	d026      	beq.n	80059c6 <__ssputs_r+0x6a>
 8005978:	6965      	ldr	r5, [r4, #20]
 800597a:	6909      	ldr	r1, [r1, #16]
 800597c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005980:	eba3 0901 	sub.w	r9, r3, r1
 8005984:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005988:	1c7b      	adds	r3, r7, #1
 800598a:	444b      	add	r3, r9
 800598c:	106d      	asrs	r5, r5, #1
 800598e:	429d      	cmp	r5, r3
 8005990:	bf38      	it	cc
 8005992:	461d      	movcc	r5, r3
 8005994:	0553      	lsls	r3, r2, #21
 8005996:	d527      	bpl.n	80059e8 <__ssputs_r+0x8c>
 8005998:	4629      	mov	r1, r5
 800599a:	f7fe fc19 	bl	80041d0 <_malloc_r>
 800599e:	4606      	mov	r6, r0
 80059a0:	b360      	cbz	r0, 80059fc <__ssputs_r+0xa0>
 80059a2:	464a      	mov	r2, r9
 80059a4:	6921      	ldr	r1, [r4, #16]
 80059a6:	f000 fa17 	bl	8005dd8 <memcpy>
 80059aa:	89a3      	ldrh	r3, [r4, #12]
 80059ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b4:	81a3      	strh	r3, [r4, #12]
 80059b6:	6126      	str	r6, [r4, #16]
 80059b8:	444e      	add	r6, r9
 80059ba:	6026      	str	r6, [r4, #0]
 80059bc:	463e      	mov	r6, r7
 80059be:	6165      	str	r5, [r4, #20]
 80059c0:	eba5 0509 	sub.w	r5, r5, r9
 80059c4:	60a5      	str	r5, [r4, #8]
 80059c6:	42be      	cmp	r6, r7
 80059c8:	d900      	bls.n	80059cc <__ssputs_r+0x70>
 80059ca:	463e      	mov	r6, r7
 80059cc:	4632      	mov	r2, r6
 80059ce:	4641      	mov	r1, r8
 80059d0:	6820      	ldr	r0, [r4, #0]
 80059d2:	f000 f9c5 	bl	8005d60 <memmove>
 80059d6:	2000      	movs	r0, #0
 80059d8:	68a3      	ldr	r3, [r4, #8]
 80059da:	1b9b      	subs	r3, r3, r6
 80059dc:	60a3      	str	r3, [r4, #8]
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	4433      	add	r3, r6
 80059e2:	6023      	str	r3, [r4, #0]
 80059e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059e8:	462a      	mov	r2, r5
 80059ea:	f000 fda6 	bl	800653a <_realloc_r>
 80059ee:	4606      	mov	r6, r0
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d1e0      	bne.n	80059b6 <__ssputs_r+0x5a>
 80059f4:	4650      	mov	r0, sl
 80059f6:	6921      	ldr	r1, [r4, #16]
 80059f8:	f7fe fb7a 	bl	80040f0 <_free_r>
 80059fc:	230c      	movs	r3, #12
 80059fe:	f8ca 3000 	str.w	r3, [sl]
 8005a02:	89a3      	ldrh	r3, [r4, #12]
 8005a04:	f04f 30ff 	mov.w	r0, #4294967295
 8005a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a0c:	81a3      	strh	r3, [r4, #12]
 8005a0e:	e7e9      	b.n	80059e4 <__ssputs_r+0x88>

08005a10 <_svfiprintf_r>:
 8005a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a14:	4698      	mov	r8, r3
 8005a16:	898b      	ldrh	r3, [r1, #12]
 8005a18:	4607      	mov	r7, r0
 8005a1a:	061b      	lsls	r3, r3, #24
 8005a1c:	460d      	mov	r5, r1
 8005a1e:	4614      	mov	r4, r2
 8005a20:	b09d      	sub	sp, #116	; 0x74
 8005a22:	d50e      	bpl.n	8005a42 <_svfiprintf_r+0x32>
 8005a24:	690b      	ldr	r3, [r1, #16]
 8005a26:	b963      	cbnz	r3, 8005a42 <_svfiprintf_r+0x32>
 8005a28:	2140      	movs	r1, #64	; 0x40
 8005a2a:	f7fe fbd1 	bl	80041d0 <_malloc_r>
 8005a2e:	6028      	str	r0, [r5, #0]
 8005a30:	6128      	str	r0, [r5, #16]
 8005a32:	b920      	cbnz	r0, 8005a3e <_svfiprintf_r+0x2e>
 8005a34:	230c      	movs	r3, #12
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	f04f 30ff 	mov.w	r0, #4294967295
 8005a3c:	e0d0      	b.n	8005be0 <_svfiprintf_r+0x1d0>
 8005a3e:	2340      	movs	r3, #64	; 0x40
 8005a40:	616b      	str	r3, [r5, #20]
 8005a42:	2300      	movs	r3, #0
 8005a44:	9309      	str	r3, [sp, #36]	; 0x24
 8005a46:	2320      	movs	r3, #32
 8005a48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a4c:	2330      	movs	r3, #48	; 0x30
 8005a4e:	f04f 0901 	mov.w	r9, #1
 8005a52:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a56:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005bf8 <_svfiprintf_r+0x1e8>
 8005a5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a5e:	4623      	mov	r3, r4
 8005a60:	469a      	mov	sl, r3
 8005a62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a66:	b10a      	cbz	r2, 8005a6c <_svfiprintf_r+0x5c>
 8005a68:	2a25      	cmp	r2, #37	; 0x25
 8005a6a:	d1f9      	bne.n	8005a60 <_svfiprintf_r+0x50>
 8005a6c:	ebba 0b04 	subs.w	fp, sl, r4
 8005a70:	d00b      	beq.n	8005a8a <_svfiprintf_r+0x7a>
 8005a72:	465b      	mov	r3, fp
 8005a74:	4622      	mov	r2, r4
 8005a76:	4629      	mov	r1, r5
 8005a78:	4638      	mov	r0, r7
 8005a7a:	f7ff ff6f 	bl	800595c <__ssputs_r>
 8005a7e:	3001      	adds	r0, #1
 8005a80:	f000 80a9 	beq.w	8005bd6 <_svfiprintf_r+0x1c6>
 8005a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a86:	445a      	add	r2, fp
 8005a88:	9209      	str	r2, [sp, #36]	; 0x24
 8005a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 80a1 	beq.w	8005bd6 <_svfiprintf_r+0x1c6>
 8005a94:	2300      	movs	r3, #0
 8005a96:	f04f 32ff 	mov.w	r2, #4294967295
 8005a9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a9e:	f10a 0a01 	add.w	sl, sl, #1
 8005aa2:	9304      	str	r3, [sp, #16]
 8005aa4:	9307      	str	r3, [sp, #28]
 8005aa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005aaa:	931a      	str	r3, [sp, #104]	; 0x68
 8005aac:	4654      	mov	r4, sl
 8005aae:	2205      	movs	r2, #5
 8005ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ab4:	4850      	ldr	r0, [pc, #320]	; (8005bf8 <_svfiprintf_r+0x1e8>)
 8005ab6:	f7fd fc98 	bl	80033ea <memchr>
 8005aba:	9a04      	ldr	r2, [sp, #16]
 8005abc:	b9d8      	cbnz	r0, 8005af6 <_svfiprintf_r+0xe6>
 8005abe:	06d0      	lsls	r0, r2, #27
 8005ac0:	bf44      	itt	mi
 8005ac2:	2320      	movmi	r3, #32
 8005ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ac8:	0711      	lsls	r1, r2, #28
 8005aca:	bf44      	itt	mi
 8005acc:	232b      	movmi	r3, #43	; 0x2b
 8005ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ad8:	d015      	beq.n	8005b06 <_svfiprintf_r+0xf6>
 8005ada:	4654      	mov	r4, sl
 8005adc:	2000      	movs	r0, #0
 8005ade:	f04f 0c0a 	mov.w	ip, #10
 8005ae2:	9a07      	ldr	r2, [sp, #28]
 8005ae4:	4621      	mov	r1, r4
 8005ae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aea:	3b30      	subs	r3, #48	; 0x30
 8005aec:	2b09      	cmp	r3, #9
 8005aee:	d94d      	bls.n	8005b8c <_svfiprintf_r+0x17c>
 8005af0:	b1b0      	cbz	r0, 8005b20 <_svfiprintf_r+0x110>
 8005af2:	9207      	str	r2, [sp, #28]
 8005af4:	e014      	b.n	8005b20 <_svfiprintf_r+0x110>
 8005af6:	eba0 0308 	sub.w	r3, r0, r8
 8005afa:	fa09 f303 	lsl.w	r3, r9, r3
 8005afe:	4313      	orrs	r3, r2
 8005b00:	46a2      	mov	sl, r4
 8005b02:	9304      	str	r3, [sp, #16]
 8005b04:	e7d2      	b.n	8005aac <_svfiprintf_r+0x9c>
 8005b06:	9b03      	ldr	r3, [sp, #12]
 8005b08:	1d19      	adds	r1, r3, #4
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	9103      	str	r1, [sp, #12]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bfbb      	ittet	lt
 8005b12:	425b      	neglt	r3, r3
 8005b14:	f042 0202 	orrlt.w	r2, r2, #2
 8005b18:	9307      	strge	r3, [sp, #28]
 8005b1a:	9307      	strlt	r3, [sp, #28]
 8005b1c:	bfb8      	it	lt
 8005b1e:	9204      	strlt	r2, [sp, #16]
 8005b20:	7823      	ldrb	r3, [r4, #0]
 8005b22:	2b2e      	cmp	r3, #46	; 0x2e
 8005b24:	d10c      	bne.n	8005b40 <_svfiprintf_r+0x130>
 8005b26:	7863      	ldrb	r3, [r4, #1]
 8005b28:	2b2a      	cmp	r3, #42	; 0x2a
 8005b2a:	d134      	bne.n	8005b96 <_svfiprintf_r+0x186>
 8005b2c:	9b03      	ldr	r3, [sp, #12]
 8005b2e:	3402      	adds	r4, #2
 8005b30:	1d1a      	adds	r2, r3, #4
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	9203      	str	r2, [sp, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bfb8      	it	lt
 8005b3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b3e:	9305      	str	r3, [sp, #20]
 8005b40:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005bfc <_svfiprintf_r+0x1ec>
 8005b44:	2203      	movs	r2, #3
 8005b46:	4650      	mov	r0, sl
 8005b48:	7821      	ldrb	r1, [r4, #0]
 8005b4a:	f7fd fc4e 	bl	80033ea <memchr>
 8005b4e:	b138      	cbz	r0, 8005b60 <_svfiprintf_r+0x150>
 8005b50:	2240      	movs	r2, #64	; 0x40
 8005b52:	9b04      	ldr	r3, [sp, #16]
 8005b54:	eba0 000a 	sub.w	r0, r0, sl
 8005b58:	4082      	lsls	r2, r0
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	3401      	adds	r4, #1
 8005b5e:	9304      	str	r3, [sp, #16]
 8005b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b64:	2206      	movs	r2, #6
 8005b66:	4826      	ldr	r0, [pc, #152]	; (8005c00 <_svfiprintf_r+0x1f0>)
 8005b68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b6c:	f7fd fc3d 	bl	80033ea <memchr>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	d038      	beq.n	8005be6 <_svfiprintf_r+0x1d6>
 8005b74:	4b23      	ldr	r3, [pc, #140]	; (8005c04 <_svfiprintf_r+0x1f4>)
 8005b76:	bb1b      	cbnz	r3, 8005bc0 <_svfiprintf_r+0x1b0>
 8005b78:	9b03      	ldr	r3, [sp, #12]
 8005b7a:	3307      	adds	r3, #7
 8005b7c:	f023 0307 	bic.w	r3, r3, #7
 8005b80:	3308      	adds	r3, #8
 8005b82:	9303      	str	r3, [sp, #12]
 8005b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b86:	4433      	add	r3, r6
 8005b88:	9309      	str	r3, [sp, #36]	; 0x24
 8005b8a:	e768      	b.n	8005a5e <_svfiprintf_r+0x4e>
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	2001      	movs	r0, #1
 8005b90:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b94:	e7a6      	b.n	8005ae4 <_svfiprintf_r+0xd4>
 8005b96:	2300      	movs	r3, #0
 8005b98:	f04f 0c0a 	mov.w	ip, #10
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	3401      	adds	r4, #1
 8005ba0:	9305      	str	r3, [sp, #20]
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ba8:	3a30      	subs	r2, #48	; 0x30
 8005baa:	2a09      	cmp	r2, #9
 8005bac:	d903      	bls.n	8005bb6 <_svfiprintf_r+0x1a6>
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0c6      	beq.n	8005b40 <_svfiprintf_r+0x130>
 8005bb2:	9105      	str	r1, [sp, #20]
 8005bb4:	e7c4      	b.n	8005b40 <_svfiprintf_r+0x130>
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	2301      	movs	r3, #1
 8005bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bbe:	e7f0      	b.n	8005ba2 <_svfiprintf_r+0x192>
 8005bc0:	ab03      	add	r3, sp, #12
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	462a      	mov	r2, r5
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	4b0f      	ldr	r3, [pc, #60]	; (8005c08 <_svfiprintf_r+0x1f8>)
 8005bca:	a904      	add	r1, sp, #16
 8005bcc:	f7fc fc98 	bl	8002500 <_printf_float>
 8005bd0:	1c42      	adds	r2, r0, #1
 8005bd2:	4606      	mov	r6, r0
 8005bd4:	d1d6      	bne.n	8005b84 <_svfiprintf_r+0x174>
 8005bd6:	89ab      	ldrh	r3, [r5, #12]
 8005bd8:	065b      	lsls	r3, r3, #25
 8005bda:	f53f af2d 	bmi.w	8005a38 <_svfiprintf_r+0x28>
 8005bde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005be0:	b01d      	add	sp, #116	; 0x74
 8005be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be6:	ab03      	add	r3, sp, #12
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	462a      	mov	r2, r5
 8005bec:	4638      	mov	r0, r7
 8005bee:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <_svfiprintf_r+0x1f8>)
 8005bf0:	a904      	add	r1, sp, #16
 8005bf2:	f7fc ff25 	bl	8002a40 <_printf_i>
 8005bf6:	e7eb      	b.n	8005bd0 <_svfiprintf_r+0x1c0>
 8005bf8:	08006f09 	.word	0x08006f09
 8005bfc:	08006f0f 	.word	0x08006f0f
 8005c00:	08006f13 	.word	0x08006f13
 8005c04:	08002501 	.word	0x08002501
 8005c08:	0800595d 	.word	0x0800595d

08005c0c <__sflush_r>:
 8005c0c:	898a      	ldrh	r2, [r1, #12]
 8005c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c10:	4605      	mov	r5, r0
 8005c12:	0710      	lsls	r0, r2, #28
 8005c14:	460c      	mov	r4, r1
 8005c16:	d457      	bmi.n	8005cc8 <__sflush_r+0xbc>
 8005c18:	684b      	ldr	r3, [r1, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	dc04      	bgt.n	8005c28 <__sflush_r+0x1c>
 8005c1e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	dc01      	bgt.n	8005c28 <__sflush_r+0x1c>
 8005c24:	2000      	movs	r0, #0
 8005c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c2a:	2e00      	cmp	r6, #0
 8005c2c:	d0fa      	beq.n	8005c24 <__sflush_r+0x18>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c34:	682f      	ldr	r7, [r5, #0]
 8005c36:	6a21      	ldr	r1, [r4, #32]
 8005c38:	602b      	str	r3, [r5, #0]
 8005c3a:	d032      	beq.n	8005ca2 <__sflush_r+0x96>
 8005c3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c3e:	89a3      	ldrh	r3, [r4, #12]
 8005c40:	075a      	lsls	r2, r3, #29
 8005c42:	d505      	bpl.n	8005c50 <__sflush_r+0x44>
 8005c44:	6863      	ldr	r3, [r4, #4]
 8005c46:	1ac0      	subs	r0, r0, r3
 8005c48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c4a:	b10b      	cbz	r3, 8005c50 <__sflush_r+0x44>
 8005c4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c4e:	1ac0      	subs	r0, r0, r3
 8005c50:	2300      	movs	r3, #0
 8005c52:	4602      	mov	r2, r0
 8005c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c56:	4628      	mov	r0, r5
 8005c58:	6a21      	ldr	r1, [r4, #32]
 8005c5a:	47b0      	blx	r6
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	89a3      	ldrh	r3, [r4, #12]
 8005c60:	d106      	bne.n	8005c70 <__sflush_r+0x64>
 8005c62:	6829      	ldr	r1, [r5, #0]
 8005c64:	291d      	cmp	r1, #29
 8005c66:	d82b      	bhi.n	8005cc0 <__sflush_r+0xb4>
 8005c68:	4a28      	ldr	r2, [pc, #160]	; (8005d0c <__sflush_r+0x100>)
 8005c6a:	410a      	asrs	r2, r1
 8005c6c:	07d6      	lsls	r6, r2, #31
 8005c6e:	d427      	bmi.n	8005cc0 <__sflush_r+0xb4>
 8005c70:	2200      	movs	r2, #0
 8005c72:	6062      	str	r2, [r4, #4]
 8005c74:	6922      	ldr	r2, [r4, #16]
 8005c76:	04d9      	lsls	r1, r3, #19
 8005c78:	6022      	str	r2, [r4, #0]
 8005c7a:	d504      	bpl.n	8005c86 <__sflush_r+0x7a>
 8005c7c:	1c42      	adds	r2, r0, #1
 8005c7e:	d101      	bne.n	8005c84 <__sflush_r+0x78>
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	b903      	cbnz	r3, 8005c86 <__sflush_r+0x7a>
 8005c84:	6560      	str	r0, [r4, #84]	; 0x54
 8005c86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c88:	602f      	str	r7, [r5, #0]
 8005c8a:	2900      	cmp	r1, #0
 8005c8c:	d0ca      	beq.n	8005c24 <__sflush_r+0x18>
 8005c8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c92:	4299      	cmp	r1, r3
 8005c94:	d002      	beq.n	8005c9c <__sflush_r+0x90>
 8005c96:	4628      	mov	r0, r5
 8005c98:	f7fe fa2a 	bl	80040f0 <_free_r>
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	6360      	str	r0, [r4, #52]	; 0x34
 8005ca0:	e7c1      	b.n	8005c26 <__sflush_r+0x1a>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b0      	blx	r6
 8005ca8:	1c41      	adds	r1, r0, #1
 8005caa:	d1c8      	bne.n	8005c3e <__sflush_r+0x32>
 8005cac:	682b      	ldr	r3, [r5, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0c5      	beq.n	8005c3e <__sflush_r+0x32>
 8005cb2:	2b1d      	cmp	r3, #29
 8005cb4:	d001      	beq.n	8005cba <__sflush_r+0xae>
 8005cb6:	2b16      	cmp	r3, #22
 8005cb8:	d101      	bne.n	8005cbe <__sflush_r+0xb2>
 8005cba:	602f      	str	r7, [r5, #0]
 8005cbc:	e7b2      	b.n	8005c24 <__sflush_r+0x18>
 8005cbe:	89a3      	ldrh	r3, [r4, #12]
 8005cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cc4:	81a3      	strh	r3, [r4, #12]
 8005cc6:	e7ae      	b.n	8005c26 <__sflush_r+0x1a>
 8005cc8:	690f      	ldr	r7, [r1, #16]
 8005cca:	2f00      	cmp	r7, #0
 8005ccc:	d0aa      	beq.n	8005c24 <__sflush_r+0x18>
 8005cce:	0793      	lsls	r3, r2, #30
 8005cd0:	bf18      	it	ne
 8005cd2:	2300      	movne	r3, #0
 8005cd4:	680e      	ldr	r6, [r1, #0]
 8005cd6:	bf08      	it	eq
 8005cd8:	694b      	ldreq	r3, [r1, #20]
 8005cda:	1bf6      	subs	r6, r6, r7
 8005cdc:	600f      	str	r7, [r1, #0]
 8005cde:	608b      	str	r3, [r1, #8]
 8005ce0:	2e00      	cmp	r6, #0
 8005ce2:	dd9f      	ble.n	8005c24 <__sflush_r+0x18>
 8005ce4:	4633      	mov	r3, r6
 8005ce6:	463a      	mov	r2, r7
 8005ce8:	4628      	mov	r0, r5
 8005cea:	6a21      	ldr	r1, [r4, #32]
 8005cec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005cf0:	47e0      	blx	ip
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	dc06      	bgt.n	8005d04 <__sflush_r+0xf8>
 8005cf6:	89a3      	ldrh	r3, [r4, #12]
 8005cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d00:	81a3      	strh	r3, [r4, #12]
 8005d02:	e790      	b.n	8005c26 <__sflush_r+0x1a>
 8005d04:	4407      	add	r7, r0
 8005d06:	1a36      	subs	r6, r6, r0
 8005d08:	e7ea      	b.n	8005ce0 <__sflush_r+0xd4>
 8005d0a:	bf00      	nop
 8005d0c:	dfbffffe 	.word	0xdfbffffe

08005d10 <_fflush_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	690b      	ldr	r3, [r1, #16]
 8005d14:	4605      	mov	r5, r0
 8005d16:	460c      	mov	r4, r1
 8005d18:	b913      	cbnz	r3, 8005d20 <_fflush_r+0x10>
 8005d1a:	2500      	movs	r5, #0
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	b118      	cbz	r0, 8005d2a <_fflush_r+0x1a>
 8005d22:	6a03      	ldr	r3, [r0, #32]
 8005d24:	b90b      	cbnz	r3, 8005d2a <_fflush_r+0x1a>
 8005d26:	f7fd fa47 	bl	80031b8 <__sinit>
 8005d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0f3      	beq.n	8005d1a <_fflush_r+0xa>
 8005d32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d34:	07d0      	lsls	r0, r2, #31
 8005d36:	d404      	bmi.n	8005d42 <_fflush_r+0x32>
 8005d38:	0599      	lsls	r1, r3, #22
 8005d3a:	d402      	bmi.n	8005d42 <_fflush_r+0x32>
 8005d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d3e:	f7fd fb52 	bl	80033e6 <__retarget_lock_acquire_recursive>
 8005d42:	4628      	mov	r0, r5
 8005d44:	4621      	mov	r1, r4
 8005d46:	f7ff ff61 	bl	8005c0c <__sflush_r>
 8005d4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d4c:	4605      	mov	r5, r0
 8005d4e:	07da      	lsls	r2, r3, #31
 8005d50:	d4e4      	bmi.n	8005d1c <_fflush_r+0xc>
 8005d52:	89a3      	ldrh	r3, [r4, #12]
 8005d54:	059b      	lsls	r3, r3, #22
 8005d56:	d4e1      	bmi.n	8005d1c <_fflush_r+0xc>
 8005d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d5a:	f7fd fb45 	bl	80033e8 <__retarget_lock_release_recursive>
 8005d5e:	e7dd      	b.n	8005d1c <_fflush_r+0xc>

08005d60 <memmove>:
 8005d60:	4288      	cmp	r0, r1
 8005d62:	b510      	push	{r4, lr}
 8005d64:	eb01 0402 	add.w	r4, r1, r2
 8005d68:	d902      	bls.n	8005d70 <memmove+0x10>
 8005d6a:	4284      	cmp	r4, r0
 8005d6c:	4623      	mov	r3, r4
 8005d6e:	d807      	bhi.n	8005d80 <memmove+0x20>
 8005d70:	1e43      	subs	r3, r0, #1
 8005d72:	42a1      	cmp	r1, r4
 8005d74:	d008      	beq.n	8005d88 <memmove+0x28>
 8005d76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d7e:	e7f8      	b.n	8005d72 <memmove+0x12>
 8005d80:	4601      	mov	r1, r0
 8005d82:	4402      	add	r2, r0
 8005d84:	428a      	cmp	r2, r1
 8005d86:	d100      	bne.n	8005d8a <memmove+0x2a>
 8005d88:	bd10      	pop	{r4, pc}
 8005d8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d92:	e7f7      	b.n	8005d84 <memmove+0x24>

08005d94 <strncmp>:
 8005d94:	b510      	push	{r4, lr}
 8005d96:	b16a      	cbz	r2, 8005db4 <strncmp+0x20>
 8005d98:	3901      	subs	r1, #1
 8005d9a:	1884      	adds	r4, r0, r2
 8005d9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005da0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d103      	bne.n	8005db0 <strncmp+0x1c>
 8005da8:	42a0      	cmp	r0, r4
 8005daa:	d001      	beq.n	8005db0 <strncmp+0x1c>
 8005dac:	2a00      	cmp	r2, #0
 8005dae:	d1f5      	bne.n	8005d9c <strncmp+0x8>
 8005db0:	1ad0      	subs	r0, r2, r3
 8005db2:	bd10      	pop	{r4, pc}
 8005db4:	4610      	mov	r0, r2
 8005db6:	e7fc      	b.n	8005db2 <strncmp+0x1e>

08005db8 <_sbrk_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	2300      	movs	r3, #0
 8005dbc:	4d05      	ldr	r5, [pc, #20]	; (8005dd4 <_sbrk_r+0x1c>)
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	602b      	str	r3, [r5, #0]
 8005dc4:	f7fb f954 	bl	8001070 <_sbrk>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	d102      	bne.n	8005dd2 <_sbrk_r+0x1a>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	b103      	cbz	r3, 8005dd2 <_sbrk_r+0x1a>
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	bd38      	pop	{r3, r4, r5, pc}
 8005dd4:	20000388 	.word	0x20000388

08005dd8 <memcpy>:
 8005dd8:	440a      	add	r2, r1
 8005dda:	4291      	cmp	r1, r2
 8005ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005de0:	d100      	bne.n	8005de4 <memcpy+0xc>
 8005de2:	4770      	bx	lr
 8005de4:	b510      	push	{r4, lr}
 8005de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dea:	4291      	cmp	r1, r2
 8005dec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005df0:	d1f9      	bne.n	8005de6 <memcpy+0xe>
 8005df2:	bd10      	pop	{r4, pc}

08005df4 <nan>:
 8005df4:	2000      	movs	r0, #0
 8005df6:	4901      	ldr	r1, [pc, #4]	; (8005dfc <nan+0x8>)
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	7ff80000 	.word	0x7ff80000

08005e00 <__assert_func>:
 8005e00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e02:	4614      	mov	r4, r2
 8005e04:	461a      	mov	r2, r3
 8005e06:	4b09      	ldr	r3, [pc, #36]	; (8005e2c <__assert_func+0x2c>)
 8005e08:	4605      	mov	r5, r0
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68d8      	ldr	r0, [r3, #12]
 8005e0e:	b14c      	cbz	r4, 8005e24 <__assert_func+0x24>
 8005e10:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <__assert_func+0x30>)
 8005e12:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e16:	9100      	str	r1, [sp, #0]
 8005e18:	462b      	mov	r3, r5
 8005e1a:	4906      	ldr	r1, [pc, #24]	; (8005e34 <__assert_func+0x34>)
 8005e1c:	f000 fbca 	bl	80065b4 <fiprintf>
 8005e20:	f000 fbda 	bl	80065d8 <abort>
 8005e24:	4b04      	ldr	r3, [pc, #16]	; (8005e38 <__assert_func+0x38>)
 8005e26:	461c      	mov	r4, r3
 8005e28:	e7f3      	b.n	8005e12 <__assert_func+0x12>
 8005e2a:	bf00      	nop
 8005e2c:	20000064 	.word	0x20000064
 8005e30:	08006f22 	.word	0x08006f22
 8005e34:	08006f2f 	.word	0x08006f2f
 8005e38:	08006f5d 	.word	0x08006f5d

08005e3c <_calloc_r>:
 8005e3c:	b570      	push	{r4, r5, r6, lr}
 8005e3e:	fba1 5402 	umull	r5, r4, r1, r2
 8005e42:	b934      	cbnz	r4, 8005e52 <_calloc_r+0x16>
 8005e44:	4629      	mov	r1, r5
 8005e46:	f7fe f9c3 	bl	80041d0 <_malloc_r>
 8005e4a:	4606      	mov	r6, r0
 8005e4c:	b928      	cbnz	r0, 8005e5a <_calloc_r+0x1e>
 8005e4e:	4630      	mov	r0, r6
 8005e50:	bd70      	pop	{r4, r5, r6, pc}
 8005e52:	220c      	movs	r2, #12
 8005e54:	2600      	movs	r6, #0
 8005e56:	6002      	str	r2, [r0, #0]
 8005e58:	e7f9      	b.n	8005e4e <_calloc_r+0x12>
 8005e5a:	462a      	mov	r2, r5
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	f7fd fa44 	bl	80032ea <memset>
 8005e62:	e7f4      	b.n	8005e4e <_calloc_r+0x12>

08005e64 <rshift>:
 8005e64:	6903      	ldr	r3, [r0, #16]
 8005e66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e6a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005e6e:	f100 0414 	add.w	r4, r0, #20
 8005e72:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005e76:	dd46      	ble.n	8005f06 <rshift+0xa2>
 8005e78:	f011 011f 	ands.w	r1, r1, #31
 8005e7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005e80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005e84:	d10c      	bne.n	8005ea0 <rshift+0x3c>
 8005e86:	4629      	mov	r1, r5
 8005e88:	f100 0710 	add.w	r7, r0, #16
 8005e8c:	42b1      	cmp	r1, r6
 8005e8e:	d335      	bcc.n	8005efc <rshift+0x98>
 8005e90:	1a9b      	subs	r3, r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	1eea      	subs	r2, r5, #3
 8005e96:	4296      	cmp	r6, r2
 8005e98:	bf38      	it	cc
 8005e9a:	2300      	movcc	r3, #0
 8005e9c:	4423      	add	r3, r4
 8005e9e:	e015      	b.n	8005ecc <rshift+0x68>
 8005ea0:	46a1      	mov	r9, r4
 8005ea2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005ea6:	f1c1 0820 	rsb	r8, r1, #32
 8005eaa:	40cf      	lsrs	r7, r1
 8005eac:	f105 0e04 	add.w	lr, r5, #4
 8005eb0:	4576      	cmp	r6, lr
 8005eb2:	46f4      	mov	ip, lr
 8005eb4:	d816      	bhi.n	8005ee4 <rshift+0x80>
 8005eb6:	1a9a      	subs	r2, r3, r2
 8005eb8:	0092      	lsls	r2, r2, #2
 8005eba:	3a04      	subs	r2, #4
 8005ebc:	3501      	adds	r5, #1
 8005ebe:	42ae      	cmp	r6, r5
 8005ec0:	bf38      	it	cc
 8005ec2:	2200      	movcc	r2, #0
 8005ec4:	18a3      	adds	r3, r4, r2
 8005ec6:	50a7      	str	r7, [r4, r2]
 8005ec8:	b107      	cbz	r7, 8005ecc <rshift+0x68>
 8005eca:	3304      	adds	r3, #4
 8005ecc:	42a3      	cmp	r3, r4
 8005ece:	eba3 0204 	sub.w	r2, r3, r4
 8005ed2:	bf08      	it	eq
 8005ed4:	2300      	moveq	r3, #0
 8005ed6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005eda:	6102      	str	r2, [r0, #16]
 8005edc:	bf08      	it	eq
 8005ede:	6143      	streq	r3, [r0, #20]
 8005ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ee4:	f8dc c000 	ldr.w	ip, [ip]
 8005ee8:	fa0c fc08 	lsl.w	ip, ip, r8
 8005eec:	ea4c 0707 	orr.w	r7, ip, r7
 8005ef0:	f849 7b04 	str.w	r7, [r9], #4
 8005ef4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005ef8:	40cf      	lsrs	r7, r1
 8005efa:	e7d9      	b.n	8005eb0 <rshift+0x4c>
 8005efc:	f851 cb04 	ldr.w	ip, [r1], #4
 8005f00:	f847 cf04 	str.w	ip, [r7, #4]!
 8005f04:	e7c2      	b.n	8005e8c <rshift+0x28>
 8005f06:	4623      	mov	r3, r4
 8005f08:	e7e0      	b.n	8005ecc <rshift+0x68>

08005f0a <__hexdig_fun>:
 8005f0a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005f0e:	2b09      	cmp	r3, #9
 8005f10:	d802      	bhi.n	8005f18 <__hexdig_fun+0xe>
 8005f12:	3820      	subs	r0, #32
 8005f14:	b2c0      	uxtb	r0, r0
 8005f16:	4770      	bx	lr
 8005f18:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005f1c:	2b05      	cmp	r3, #5
 8005f1e:	d801      	bhi.n	8005f24 <__hexdig_fun+0x1a>
 8005f20:	3847      	subs	r0, #71	; 0x47
 8005f22:	e7f7      	b.n	8005f14 <__hexdig_fun+0xa>
 8005f24:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005f28:	2b05      	cmp	r3, #5
 8005f2a:	d801      	bhi.n	8005f30 <__hexdig_fun+0x26>
 8005f2c:	3827      	subs	r0, #39	; 0x27
 8005f2e:	e7f1      	b.n	8005f14 <__hexdig_fun+0xa>
 8005f30:	2000      	movs	r0, #0
 8005f32:	4770      	bx	lr

08005f34 <__gethex>:
 8005f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f38:	4681      	mov	r9, r0
 8005f3a:	468a      	mov	sl, r1
 8005f3c:	4617      	mov	r7, r2
 8005f3e:	680a      	ldr	r2, [r1, #0]
 8005f40:	b085      	sub	sp, #20
 8005f42:	f102 0b02 	add.w	fp, r2, #2
 8005f46:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005f4a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005f4e:	9302      	str	r3, [sp, #8]
 8005f50:	32fe      	adds	r2, #254	; 0xfe
 8005f52:	eb02 030b 	add.w	r3, r2, fp
 8005f56:	46d8      	mov	r8, fp
 8005f58:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8005f5c:	9301      	str	r3, [sp, #4]
 8005f5e:	2830      	cmp	r0, #48	; 0x30
 8005f60:	d0f7      	beq.n	8005f52 <__gethex+0x1e>
 8005f62:	f7ff ffd2 	bl	8005f0a <__hexdig_fun>
 8005f66:	4604      	mov	r4, r0
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d138      	bne.n	8005fde <__gethex+0xaa>
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	4640      	mov	r0, r8
 8005f70:	49a7      	ldr	r1, [pc, #668]	; (8006210 <__gethex+0x2dc>)
 8005f72:	f7ff ff0f 	bl	8005d94 <strncmp>
 8005f76:	4606      	mov	r6, r0
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d169      	bne.n	8006050 <__gethex+0x11c>
 8005f7c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8005f80:	465d      	mov	r5, fp
 8005f82:	f7ff ffc2 	bl	8005f0a <__hexdig_fun>
 8005f86:	2800      	cmp	r0, #0
 8005f88:	d064      	beq.n	8006054 <__gethex+0x120>
 8005f8a:	465a      	mov	r2, fp
 8005f8c:	7810      	ldrb	r0, [r2, #0]
 8005f8e:	4690      	mov	r8, r2
 8005f90:	2830      	cmp	r0, #48	; 0x30
 8005f92:	f102 0201 	add.w	r2, r2, #1
 8005f96:	d0f9      	beq.n	8005f8c <__gethex+0x58>
 8005f98:	f7ff ffb7 	bl	8005f0a <__hexdig_fun>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	fab0 f480 	clz	r4, r0
 8005fa2:	465e      	mov	r6, fp
 8005fa4:	0964      	lsrs	r4, r4, #5
 8005fa6:	9301      	str	r3, [sp, #4]
 8005fa8:	4642      	mov	r2, r8
 8005faa:	4615      	mov	r5, r2
 8005fac:	7828      	ldrb	r0, [r5, #0]
 8005fae:	3201      	adds	r2, #1
 8005fb0:	f7ff ffab 	bl	8005f0a <__hexdig_fun>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	d1f8      	bne.n	8005faa <__gethex+0x76>
 8005fb8:	2201      	movs	r2, #1
 8005fba:	4628      	mov	r0, r5
 8005fbc:	4994      	ldr	r1, [pc, #592]	; (8006210 <__gethex+0x2dc>)
 8005fbe:	f7ff fee9 	bl	8005d94 <strncmp>
 8005fc2:	b978      	cbnz	r0, 8005fe4 <__gethex+0xb0>
 8005fc4:	b946      	cbnz	r6, 8005fd8 <__gethex+0xa4>
 8005fc6:	1c6e      	adds	r6, r5, #1
 8005fc8:	4632      	mov	r2, r6
 8005fca:	4615      	mov	r5, r2
 8005fcc:	7828      	ldrb	r0, [r5, #0]
 8005fce:	3201      	adds	r2, #1
 8005fd0:	f7ff ff9b 	bl	8005f0a <__hexdig_fun>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d1f8      	bne.n	8005fca <__gethex+0x96>
 8005fd8:	1b73      	subs	r3, r6, r5
 8005fda:	009e      	lsls	r6, r3, #2
 8005fdc:	e004      	b.n	8005fe8 <__gethex+0xb4>
 8005fde:	2400      	movs	r4, #0
 8005fe0:	4626      	mov	r6, r4
 8005fe2:	e7e1      	b.n	8005fa8 <__gethex+0x74>
 8005fe4:	2e00      	cmp	r6, #0
 8005fe6:	d1f7      	bne.n	8005fd8 <__gethex+0xa4>
 8005fe8:	782b      	ldrb	r3, [r5, #0]
 8005fea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005fee:	2b50      	cmp	r3, #80	; 0x50
 8005ff0:	d13d      	bne.n	800606e <__gethex+0x13a>
 8005ff2:	786b      	ldrb	r3, [r5, #1]
 8005ff4:	2b2b      	cmp	r3, #43	; 0x2b
 8005ff6:	d02f      	beq.n	8006058 <__gethex+0x124>
 8005ff8:	2b2d      	cmp	r3, #45	; 0x2d
 8005ffa:	d031      	beq.n	8006060 <__gethex+0x12c>
 8005ffc:	f04f 0b00 	mov.w	fp, #0
 8006000:	1c69      	adds	r1, r5, #1
 8006002:	7808      	ldrb	r0, [r1, #0]
 8006004:	f7ff ff81 	bl	8005f0a <__hexdig_fun>
 8006008:	1e42      	subs	r2, r0, #1
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	2a18      	cmp	r2, #24
 800600e:	d82e      	bhi.n	800606e <__gethex+0x13a>
 8006010:	f1a0 0210 	sub.w	r2, r0, #16
 8006014:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006018:	f7ff ff77 	bl	8005f0a <__hexdig_fun>
 800601c:	f100 3cff 	add.w	ip, r0, #4294967295
 8006020:	fa5f fc8c 	uxtb.w	ip, ip
 8006024:	f1bc 0f18 	cmp.w	ip, #24
 8006028:	d91d      	bls.n	8006066 <__gethex+0x132>
 800602a:	f1bb 0f00 	cmp.w	fp, #0
 800602e:	d000      	beq.n	8006032 <__gethex+0xfe>
 8006030:	4252      	negs	r2, r2
 8006032:	4416      	add	r6, r2
 8006034:	f8ca 1000 	str.w	r1, [sl]
 8006038:	b1dc      	cbz	r4, 8006072 <__gethex+0x13e>
 800603a:	9b01      	ldr	r3, [sp, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	bf14      	ite	ne
 8006040:	f04f 0800 	movne.w	r8, #0
 8006044:	f04f 0806 	moveq.w	r8, #6
 8006048:	4640      	mov	r0, r8
 800604a:	b005      	add	sp, #20
 800604c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006050:	4645      	mov	r5, r8
 8006052:	4626      	mov	r6, r4
 8006054:	2401      	movs	r4, #1
 8006056:	e7c7      	b.n	8005fe8 <__gethex+0xb4>
 8006058:	f04f 0b00 	mov.w	fp, #0
 800605c:	1ca9      	adds	r1, r5, #2
 800605e:	e7d0      	b.n	8006002 <__gethex+0xce>
 8006060:	f04f 0b01 	mov.w	fp, #1
 8006064:	e7fa      	b.n	800605c <__gethex+0x128>
 8006066:	230a      	movs	r3, #10
 8006068:	fb03 0002 	mla	r0, r3, r2, r0
 800606c:	e7d0      	b.n	8006010 <__gethex+0xdc>
 800606e:	4629      	mov	r1, r5
 8006070:	e7e0      	b.n	8006034 <__gethex+0x100>
 8006072:	4621      	mov	r1, r4
 8006074:	eba5 0308 	sub.w	r3, r5, r8
 8006078:	3b01      	subs	r3, #1
 800607a:	2b07      	cmp	r3, #7
 800607c:	dc0a      	bgt.n	8006094 <__gethex+0x160>
 800607e:	4648      	mov	r0, r9
 8006080:	f7fe f932 	bl	80042e8 <_Balloc>
 8006084:	4604      	mov	r4, r0
 8006086:	b940      	cbnz	r0, 800609a <__gethex+0x166>
 8006088:	4602      	mov	r2, r0
 800608a:	21e4      	movs	r1, #228	; 0xe4
 800608c:	4b61      	ldr	r3, [pc, #388]	; (8006214 <__gethex+0x2e0>)
 800608e:	4862      	ldr	r0, [pc, #392]	; (8006218 <__gethex+0x2e4>)
 8006090:	f7ff feb6 	bl	8005e00 <__assert_func>
 8006094:	3101      	adds	r1, #1
 8006096:	105b      	asrs	r3, r3, #1
 8006098:	e7ef      	b.n	800607a <__gethex+0x146>
 800609a:	2300      	movs	r3, #0
 800609c:	469b      	mov	fp, r3
 800609e:	f100 0a14 	add.w	sl, r0, #20
 80060a2:	f8cd a004 	str.w	sl, [sp, #4]
 80060a6:	45a8      	cmp	r8, r5
 80060a8:	d344      	bcc.n	8006134 <__gethex+0x200>
 80060aa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80060ae:	4658      	mov	r0, fp
 80060b0:	f848 bb04 	str.w	fp, [r8], #4
 80060b4:	eba8 080a 	sub.w	r8, r8, sl
 80060b8:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80060bc:	6122      	str	r2, [r4, #16]
 80060be:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80060c2:	f7fe fa03 	bl	80044cc <__hi0bits>
 80060c6:	683d      	ldr	r5, [r7, #0]
 80060c8:	eba8 0800 	sub.w	r8, r8, r0
 80060cc:	45a8      	cmp	r8, r5
 80060ce:	dd59      	ble.n	8006184 <__gethex+0x250>
 80060d0:	eba8 0805 	sub.w	r8, r8, r5
 80060d4:	4641      	mov	r1, r8
 80060d6:	4620      	mov	r0, r4
 80060d8:	f7fe fd81 	bl	8004bde <__any_on>
 80060dc:	4683      	mov	fp, r0
 80060de:	b1b8      	cbz	r0, 8006110 <__gethex+0x1dc>
 80060e0:	f04f 0b01 	mov.w	fp, #1
 80060e4:	f108 33ff 	add.w	r3, r8, #4294967295
 80060e8:	1159      	asrs	r1, r3, #5
 80060ea:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80060ee:	f003 021f 	and.w	r2, r3, #31
 80060f2:	fa0b f202 	lsl.w	r2, fp, r2
 80060f6:	420a      	tst	r2, r1
 80060f8:	d00a      	beq.n	8006110 <__gethex+0x1dc>
 80060fa:	455b      	cmp	r3, fp
 80060fc:	dd06      	ble.n	800610c <__gethex+0x1d8>
 80060fe:	4620      	mov	r0, r4
 8006100:	f1a8 0102 	sub.w	r1, r8, #2
 8006104:	f7fe fd6b 	bl	8004bde <__any_on>
 8006108:	2800      	cmp	r0, #0
 800610a:	d138      	bne.n	800617e <__gethex+0x24a>
 800610c:	f04f 0b02 	mov.w	fp, #2
 8006110:	4641      	mov	r1, r8
 8006112:	4620      	mov	r0, r4
 8006114:	f7ff fea6 	bl	8005e64 <rshift>
 8006118:	4446      	add	r6, r8
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	42b3      	cmp	r3, r6
 800611e:	da41      	bge.n	80061a4 <__gethex+0x270>
 8006120:	4621      	mov	r1, r4
 8006122:	4648      	mov	r0, r9
 8006124:	f7fe f920 	bl	8004368 <_Bfree>
 8006128:	2300      	movs	r3, #0
 800612a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800612c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8006130:	6013      	str	r3, [r2, #0]
 8006132:	e789      	b.n	8006048 <__gethex+0x114>
 8006134:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8006138:	2a2e      	cmp	r2, #46	; 0x2e
 800613a:	d014      	beq.n	8006166 <__gethex+0x232>
 800613c:	2b20      	cmp	r3, #32
 800613e:	d106      	bne.n	800614e <__gethex+0x21a>
 8006140:	9b01      	ldr	r3, [sp, #4]
 8006142:	f843 bb04 	str.w	fp, [r3], #4
 8006146:	f04f 0b00 	mov.w	fp, #0
 800614a:	9301      	str	r3, [sp, #4]
 800614c:	465b      	mov	r3, fp
 800614e:	7828      	ldrb	r0, [r5, #0]
 8006150:	9303      	str	r3, [sp, #12]
 8006152:	f7ff feda 	bl	8005f0a <__hexdig_fun>
 8006156:	9b03      	ldr	r3, [sp, #12]
 8006158:	f000 000f 	and.w	r0, r0, #15
 800615c:	4098      	lsls	r0, r3
 800615e:	ea4b 0b00 	orr.w	fp, fp, r0
 8006162:	3304      	adds	r3, #4
 8006164:	e79f      	b.n	80060a6 <__gethex+0x172>
 8006166:	45a8      	cmp	r8, r5
 8006168:	d8e8      	bhi.n	800613c <__gethex+0x208>
 800616a:	2201      	movs	r2, #1
 800616c:	4628      	mov	r0, r5
 800616e:	4928      	ldr	r1, [pc, #160]	; (8006210 <__gethex+0x2dc>)
 8006170:	9303      	str	r3, [sp, #12]
 8006172:	f7ff fe0f 	bl	8005d94 <strncmp>
 8006176:	9b03      	ldr	r3, [sp, #12]
 8006178:	2800      	cmp	r0, #0
 800617a:	d1df      	bne.n	800613c <__gethex+0x208>
 800617c:	e793      	b.n	80060a6 <__gethex+0x172>
 800617e:	f04f 0b03 	mov.w	fp, #3
 8006182:	e7c5      	b.n	8006110 <__gethex+0x1dc>
 8006184:	da0b      	bge.n	800619e <__gethex+0x26a>
 8006186:	eba5 0808 	sub.w	r8, r5, r8
 800618a:	4621      	mov	r1, r4
 800618c:	4642      	mov	r2, r8
 800618e:	4648      	mov	r0, r9
 8006190:	f7fe fb02 	bl	8004798 <__lshift>
 8006194:	4604      	mov	r4, r0
 8006196:	eba6 0608 	sub.w	r6, r6, r8
 800619a:	f100 0a14 	add.w	sl, r0, #20
 800619e:	f04f 0b00 	mov.w	fp, #0
 80061a2:	e7ba      	b.n	800611a <__gethex+0x1e6>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	42b3      	cmp	r3, r6
 80061a8:	dd74      	ble.n	8006294 <__gethex+0x360>
 80061aa:	1b9e      	subs	r6, r3, r6
 80061ac:	42b5      	cmp	r5, r6
 80061ae:	dc35      	bgt.n	800621c <__gethex+0x2e8>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d023      	beq.n	80061fe <__gethex+0x2ca>
 80061b6:	2b03      	cmp	r3, #3
 80061b8:	d025      	beq.n	8006206 <__gethex+0x2d2>
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d115      	bne.n	80061ea <__gethex+0x2b6>
 80061be:	42b5      	cmp	r5, r6
 80061c0:	d113      	bne.n	80061ea <__gethex+0x2b6>
 80061c2:	2d01      	cmp	r5, #1
 80061c4:	d10b      	bne.n	80061de <__gethex+0x2aa>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	9a02      	ldr	r2, [sp, #8]
 80061ca:	f04f 0862 	mov.w	r8, #98	; 0x62
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	2301      	movs	r3, #1
 80061d2:	6123      	str	r3, [r4, #16]
 80061d4:	f8ca 3000 	str.w	r3, [sl]
 80061d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061da:	601c      	str	r4, [r3, #0]
 80061dc:	e734      	b.n	8006048 <__gethex+0x114>
 80061de:	4620      	mov	r0, r4
 80061e0:	1e69      	subs	r1, r5, #1
 80061e2:	f7fe fcfc 	bl	8004bde <__any_on>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d1ed      	bne.n	80061c6 <__gethex+0x292>
 80061ea:	4621      	mov	r1, r4
 80061ec:	4648      	mov	r0, r9
 80061ee:	f7fe f8bb 	bl	8004368 <_Bfree>
 80061f2:	2300      	movs	r3, #0
 80061f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061f6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	e724      	b.n	8006048 <__gethex+0x114>
 80061fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1f2      	bne.n	80061ea <__gethex+0x2b6>
 8006204:	e7df      	b.n	80061c6 <__gethex+0x292>
 8006206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1dc      	bne.n	80061c6 <__gethex+0x292>
 800620c:	e7ed      	b.n	80061ea <__gethex+0x2b6>
 800620e:	bf00      	nop
 8006210:	08006db4 	.word	0x08006db4
 8006214:	08006c47 	.word	0x08006c47
 8006218:	08006f5e 	.word	0x08006f5e
 800621c:	f106 38ff 	add.w	r8, r6, #4294967295
 8006220:	f1bb 0f00 	cmp.w	fp, #0
 8006224:	d133      	bne.n	800628e <__gethex+0x35a>
 8006226:	f1b8 0f00 	cmp.w	r8, #0
 800622a:	d004      	beq.n	8006236 <__gethex+0x302>
 800622c:	4641      	mov	r1, r8
 800622e:	4620      	mov	r0, r4
 8006230:	f7fe fcd5 	bl	8004bde <__any_on>
 8006234:	4683      	mov	fp, r0
 8006236:	2301      	movs	r3, #1
 8006238:	ea4f 1268 	mov.w	r2, r8, asr #5
 800623c:	f008 081f 	and.w	r8, r8, #31
 8006240:	fa03 f308 	lsl.w	r3, r3, r8
 8006244:	f04f 0802 	mov.w	r8, #2
 8006248:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800624c:	4631      	mov	r1, r6
 800624e:	4213      	tst	r3, r2
 8006250:	4620      	mov	r0, r4
 8006252:	bf18      	it	ne
 8006254:	f04b 0b02 	orrne.w	fp, fp, #2
 8006258:	1bad      	subs	r5, r5, r6
 800625a:	f7ff fe03 	bl	8005e64 <rshift>
 800625e:	687e      	ldr	r6, [r7, #4]
 8006260:	f1bb 0f00 	cmp.w	fp, #0
 8006264:	d04a      	beq.n	80062fc <__gethex+0x3c8>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2b02      	cmp	r3, #2
 800626a:	d016      	beq.n	800629a <__gethex+0x366>
 800626c:	2b03      	cmp	r3, #3
 800626e:	d018      	beq.n	80062a2 <__gethex+0x36e>
 8006270:	2b01      	cmp	r3, #1
 8006272:	d109      	bne.n	8006288 <__gethex+0x354>
 8006274:	f01b 0f02 	tst.w	fp, #2
 8006278:	d006      	beq.n	8006288 <__gethex+0x354>
 800627a:	f8da 3000 	ldr.w	r3, [sl]
 800627e:	ea4b 0b03 	orr.w	fp, fp, r3
 8006282:	f01b 0f01 	tst.w	fp, #1
 8006286:	d10f      	bne.n	80062a8 <__gethex+0x374>
 8006288:	f048 0810 	orr.w	r8, r8, #16
 800628c:	e036      	b.n	80062fc <__gethex+0x3c8>
 800628e:	f04f 0b01 	mov.w	fp, #1
 8006292:	e7d0      	b.n	8006236 <__gethex+0x302>
 8006294:	f04f 0801 	mov.w	r8, #1
 8006298:	e7e2      	b.n	8006260 <__gethex+0x32c>
 800629a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800629c:	f1c3 0301 	rsb	r3, r3, #1
 80062a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80062a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d0ef      	beq.n	8006288 <__gethex+0x354>
 80062a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80062ac:	f104 0214 	add.w	r2, r4, #20
 80062b0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80062b4:	9301      	str	r3, [sp, #4]
 80062b6:	2300      	movs	r3, #0
 80062b8:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80062bc:	4694      	mov	ip, r2
 80062be:	f852 1b04 	ldr.w	r1, [r2], #4
 80062c2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80062c6:	d01e      	beq.n	8006306 <__gethex+0x3d2>
 80062c8:	3101      	adds	r1, #1
 80062ca:	f8cc 1000 	str.w	r1, [ip]
 80062ce:	f1b8 0f02 	cmp.w	r8, #2
 80062d2:	f104 0214 	add.w	r2, r4, #20
 80062d6:	d13d      	bne.n	8006354 <__gethex+0x420>
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	3b01      	subs	r3, #1
 80062dc:	42ab      	cmp	r3, r5
 80062de:	d10b      	bne.n	80062f8 <__gethex+0x3c4>
 80062e0:	2301      	movs	r3, #1
 80062e2:	1169      	asrs	r1, r5, #5
 80062e4:	f005 051f 	and.w	r5, r5, #31
 80062e8:	fa03 f505 	lsl.w	r5, r3, r5
 80062ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062f0:	421d      	tst	r5, r3
 80062f2:	bf18      	it	ne
 80062f4:	f04f 0801 	movne.w	r8, #1
 80062f8:	f048 0820 	orr.w	r8, r8, #32
 80062fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062fe:	601c      	str	r4, [r3, #0]
 8006300:	9b02      	ldr	r3, [sp, #8]
 8006302:	601e      	str	r6, [r3, #0]
 8006304:	e6a0      	b.n	8006048 <__gethex+0x114>
 8006306:	4290      	cmp	r0, r2
 8006308:	f842 3c04 	str.w	r3, [r2, #-4]
 800630c:	d8d6      	bhi.n	80062bc <__gethex+0x388>
 800630e:	68a2      	ldr	r2, [r4, #8]
 8006310:	4593      	cmp	fp, r2
 8006312:	db17      	blt.n	8006344 <__gethex+0x410>
 8006314:	6861      	ldr	r1, [r4, #4]
 8006316:	4648      	mov	r0, r9
 8006318:	3101      	adds	r1, #1
 800631a:	f7fd ffe5 	bl	80042e8 <_Balloc>
 800631e:	4682      	mov	sl, r0
 8006320:	b918      	cbnz	r0, 800632a <__gethex+0x3f6>
 8006322:	4602      	mov	r2, r0
 8006324:	2184      	movs	r1, #132	; 0x84
 8006326:	4b1a      	ldr	r3, [pc, #104]	; (8006390 <__gethex+0x45c>)
 8006328:	e6b1      	b.n	800608e <__gethex+0x15a>
 800632a:	6922      	ldr	r2, [r4, #16]
 800632c:	f104 010c 	add.w	r1, r4, #12
 8006330:	3202      	adds	r2, #2
 8006332:	0092      	lsls	r2, r2, #2
 8006334:	300c      	adds	r0, #12
 8006336:	f7ff fd4f 	bl	8005dd8 <memcpy>
 800633a:	4621      	mov	r1, r4
 800633c:	4648      	mov	r0, r9
 800633e:	f7fe f813 	bl	8004368 <_Bfree>
 8006342:	4654      	mov	r4, sl
 8006344:	6922      	ldr	r2, [r4, #16]
 8006346:	1c51      	adds	r1, r2, #1
 8006348:	6121      	str	r1, [r4, #16]
 800634a:	2101      	movs	r1, #1
 800634c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006350:	6151      	str	r1, [r2, #20]
 8006352:	e7bc      	b.n	80062ce <__gethex+0x39a>
 8006354:	6921      	ldr	r1, [r4, #16]
 8006356:	4559      	cmp	r1, fp
 8006358:	dd0b      	ble.n	8006372 <__gethex+0x43e>
 800635a:	2101      	movs	r1, #1
 800635c:	4620      	mov	r0, r4
 800635e:	f7ff fd81 	bl	8005e64 <rshift>
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	3601      	adds	r6, #1
 8006366:	42b3      	cmp	r3, r6
 8006368:	f6ff aeda 	blt.w	8006120 <__gethex+0x1ec>
 800636c:	f04f 0801 	mov.w	r8, #1
 8006370:	e7c2      	b.n	80062f8 <__gethex+0x3c4>
 8006372:	f015 051f 	ands.w	r5, r5, #31
 8006376:	d0f9      	beq.n	800636c <__gethex+0x438>
 8006378:	9b01      	ldr	r3, [sp, #4]
 800637a:	f1c5 0520 	rsb	r5, r5, #32
 800637e:	441a      	add	r2, r3
 8006380:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8006384:	f7fe f8a2 	bl	80044cc <__hi0bits>
 8006388:	42a8      	cmp	r0, r5
 800638a:	dbe6      	blt.n	800635a <__gethex+0x426>
 800638c:	e7ee      	b.n	800636c <__gethex+0x438>
 800638e:	bf00      	nop
 8006390:	08006c47 	.word	0x08006c47

08006394 <L_shift>:
 8006394:	f1c2 0208 	rsb	r2, r2, #8
 8006398:	0092      	lsls	r2, r2, #2
 800639a:	b570      	push	{r4, r5, r6, lr}
 800639c:	f1c2 0620 	rsb	r6, r2, #32
 80063a0:	6843      	ldr	r3, [r0, #4]
 80063a2:	6804      	ldr	r4, [r0, #0]
 80063a4:	fa03 f506 	lsl.w	r5, r3, r6
 80063a8:	432c      	orrs	r4, r5
 80063aa:	40d3      	lsrs	r3, r2
 80063ac:	6004      	str	r4, [r0, #0]
 80063ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80063b2:	4288      	cmp	r0, r1
 80063b4:	d3f4      	bcc.n	80063a0 <L_shift+0xc>
 80063b6:	bd70      	pop	{r4, r5, r6, pc}

080063b8 <__match>:
 80063b8:	b530      	push	{r4, r5, lr}
 80063ba:	6803      	ldr	r3, [r0, #0]
 80063bc:	3301      	adds	r3, #1
 80063be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063c2:	b914      	cbnz	r4, 80063ca <__match+0x12>
 80063c4:	6003      	str	r3, [r0, #0]
 80063c6:	2001      	movs	r0, #1
 80063c8:	bd30      	pop	{r4, r5, pc}
 80063ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80063d2:	2d19      	cmp	r5, #25
 80063d4:	bf98      	it	ls
 80063d6:	3220      	addls	r2, #32
 80063d8:	42a2      	cmp	r2, r4
 80063da:	d0f0      	beq.n	80063be <__match+0x6>
 80063dc:	2000      	movs	r0, #0
 80063de:	e7f3      	b.n	80063c8 <__match+0x10>

080063e0 <__hexnan>:
 80063e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e4:	2500      	movs	r5, #0
 80063e6:	680b      	ldr	r3, [r1, #0]
 80063e8:	4682      	mov	sl, r0
 80063ea:	115e      	asrs	r6, r3, #5
 80063ec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80063f0:	f013 031f 	ands.w	r3, r3, #31
 80063f4:	bf18      	it	ne
 80063f6:	3604      	addne	r6, #4
 80063f8:	1f37      	subs	r7, r6, #4
 80063fa:	4690      	mov	r8, r2
 80063fc:	46b9      	mov	r9, r7
 80063fe:	463c      	mov	r4, r7
 8006400:	46ab      	mov	fp, r5
 8006402:	b087      	sub	sp, #28
 8006404:	6801      	ldr	r1, [r0, #0]
 8006406:	9301      	str	r3, [sp, #4]
 8006408:	f846 5c04 	str.w	r5, [r6, #-4]
 800640c:	9502      	str	r5, [sp, #8]
 800640e:	784a      	ldrb	r2, [r1, #1]
 8006410:	1c4b      	adds	r3, r1, #1
 8006412:	9303      	str	r3, [sp, #12]
 8006414:	b342      	cbz	r2, 8006468 <__hexnan+0x88>
 8006416:	4610      	mov	r0, r2
 8006418:	9105      	str	r1, [sp, #20]
 800641a:	9204      	str	r2, [sp, #16]
 800641c:	f7ff fd75 	bl	8005f0a <__hexdig_fun>
 8006420:	2800      	cmp	r0, #0
 8006422:	d14f      	bne.n	80064c4 <__hexnan+0xe4>
 8006424:	9a04      	ldr	r2, [sp, #16]
 8006426:	9905      	ldr	r1, [sp, #20]
 8006428:	2a20      	cmp	r2, #32
 800642a:	d818      	bhi.n	800645e <__hexnan+0x7e>
 800642c:	9b02      	ldr	r3, [sp, #8]
 800642e:	459b      	cmp	fp, r3
 8006430:	dd13      	ble.n	800645a <__hexnan+0x7a>
 8006432:	454c      	cmp	r4, r9
 8006434:	d206      	bcs.n	8006444 <__hexnan+0x64>
 8006436:	2d07      	cmp	r5, #7
 8006438:	dc04      	bgt.n	8006444 <__hexnan+0x64>
 800643a:	462a      	mov	r2, r5
 800643c:	4649      	mov	r1, r9
 800643e:	4620      	mov	r0, r4
 8006440:	f7ff ffa8 	bl	8006394 <L_shift>
 8006444:	4544      	cmp	r4, r8
 8006446:	d950      	bls.n	80064ea <__hexnan+0x10a>
 8006448:	2300      	movs	r3, #0
 800644a:	f1a4 0904 	sub.w	r9, r4, #4
 800644e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006452:	461d      	mov	r5, r3
 8006454:	464c      	mov	r4, r9
 8006456:	f8cd b008 	str.w	fp, [sp, #8]
 800645a:	9903      	ldr	r1, [sp, #12]
 800645c:	e7d7      	b.n	800640e <__hexnan+0x2e>
 800645e:	2a29      	cmp	r2, #41	; 0x29
 8006460:	d155      	bne.n	800650e <__hexnan+0x12e>
 8006462:	3102      	adds	r1, #2
 8006464:	f8ca 1000 	str.w	r1, [sl]
 8006468:	f1bb 0f00 	cmp.w	fp, #0
 800646c:	d04f      	beq.n	800650e <__hexnan+0x12e>
 800646e:	454c      	cmp	r4, r9
 8006470:	d206      	bcs.n	8006480 <__hexnan+0xa0>
 8006472:	2d07      	cmp	r5, #7
 8006474:	dc04      	bgt.n	8006480 <__hexnan+0xa0>
 8006476:	462a      	mov	r2, r5
 8006478:	4649      	mov	r1, r9
 800647a:	4620      	mov	r0, r4
 800647c:	f7ff ff8a 	bl	8006394 <L_shift>
 8006480:	4544      	cmp	r4, r8
 8006482:	d934      	bls.n	80064ee <__hexnan+0x10e>
 8006484:	4623      	mov	r3, r4
 8006486:	f1a8 0204 	sub.w	r2, r8, #4
 800648a:	f853 1b04 	ldr.w	r1, [r3], #4
 800648e:	429f      	cmp	r7, r3
 8006490:	f842 1f04 	str.w	r1, [r2, #4]!
 8006494:	d2f9      	bcs.n	800648a <__hexnan+0xaa>
 8006496:	1b3b      	subs	r3, r7, r4
 8006498:	f023 0303 	bic.w	r3, r3, #3
 800649c:	3304      	adds	r3, #4
 800649e:	3e03      	subs	r6, #3
 80064a0:	3401      	adds	r4, #1
 80064a2:	42a6      	cmp	r6, r4
 80064a4:	bf38      	it	cc
 80064a6:	2304      	movcc	r3, #4
 80064a8:	2200      	movs	r2, #0
 80064aa:	4443      	add	r3, r8
 80064ac:	f843 2b04 	str.w	r2, [r3], #4
 80064b0:	429f      	cmp	r7, r3
 80064b2:	d2fb      	bcs.n	80064ac <__hexnan+0xcc>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	b91b      	cbnz	r3, 80064c0 <__hexnan+0xe0>
 80064b8:	4547      	cmp	r7, r8
 80064ba:	d126      	bne.n	800650a <__hexnan+0x12a>
 80064bc:	2301      	movs	r3, #1
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	2005      	movs	r0, #5
 80064c2:	e025      	b.n	8006510 <__hexnan+0x130>
 80064c4:	3501      	adds	r5, #1
 80064c6:	2d08      	cmp	r5, #8
 80064c8:	f10b 0b01 	add.w	fp, fp, #1
 80064cc:	dd06      	ble.n	80064dc <__hexnan+0xfc>
 80064ce:	4544      	cmp	r4, r8
 80064d0:	d9c3      	bls.n	800645a <__hexnan+0x7a>
 80064d2:	2300      	movs	r3, #0
 80064d4:	2501      	movs	r5, #1
 80064d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80064da:	3c04      	subs	r4, #4
 80064dc:	6822      	ldr	r2, [r4, #0]
 80064de:	f000 000f 	and.w	r0, r0, #15
 80064e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80064e6:	6020      	str	r0, [r4, #0]
 80064e8:	e7b7      	b.n	800645a <__hexnan+0x7a>
 80064ea:	2508      	movs	r5, #8
 80064ec:	e7b5      	b.n	800645a <__hexnan+0x7a>
 80064ee:	9b01      	ldr	r3, [sp, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0df      	beq.n	80064b4 <__hexnan+0xd4>
 80064f4:	f04f 32ff 	mov.w	r2, #4294967295
 80064f8:	f1c3 0320 	rsb	r3, r3, #32
 80064fc:	40da      	lsrs	r2, r3
 80064fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006502:	4013      	ands	r3, r2
 8006504:	f846 3c04 	str.w	r3, [r6, #-4]
 8006508:	e7d4      	b.n	80064b4 <__hexnan+0xd4>
 800650a:	3f04      	subs	r7, #4
 800650c:	e7d2      	b.n	80064b4 <__hexnan+0xd4>
 800650e:	2004      	movs	r0, #4
 8006510:	b007      	add	sp, #28
 8006512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006516 <__ascii_mbtowc>:
 8006516:	b082      	sub	sp, #8
 8006518:	b901      	cbnz	r1, 800651c <__ascii_mbtowc+0x6>
 800651a:	a901      	add	r1, sp, #4
 800651c:	b142      	cbz	r2, 8006530 <__ascii_mbtowc+0x1a>
 800651e:	b14b      	cbz	r3, 8006534 <__ascii_mbtowc+0x1e>
 8006520:	7813      	ldrb	r3, [r2, #0]
 8006522:	600b      	str	r3, [r1, #0]
 8006524:	7812      	ldrb	r2, [r2, #0]
 8006526:	1e10      	subs	r0, r2, #0
 8006528:	bf18      	it	ne
 800652a:	2001      	movne	r0, #1
 800652c:	b002      	add	sp, #8
 800652e:	4770      	bx	lr
 8006530:	4610      	mov	r0, r2
 8006532:	e7fb      	b.n	800652c <__ascii_mbtowc+0x16>
 8006534:	f06f 0001 	mvn.w	r0, #1
 8006538:	e7f8      	b.n	800652c <__ascii_mbtowc+0x16>

0800653a <_realloc_r>:
 800653a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800653e:	4680      	mov	r8, r0
 8006540:	4614      	mov	r4, r2
 8006542:	460e      	mov	r6, r1
 8006544:	b921      	cbnz	r1, 8006550 <_realloc_r+0x16>
 8006546:	4611      	mov	r1, r2
 8006548:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800654c:	f7fd be40 	b.w	80041d0 <_malloc_r>
 8006550:	b92a      	cbnz	r2, 800655e <_realloc_r+0x24>
 8006552:	f7fd fdcd 	bl	80040f0 <_free_r>
 8006556:	4625      	mov	r5, r4
 8006558:	4628      	mov	r0, r5
 800655a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800655e:	f000 f842 	bl	80065e6 <_malloc_usable_size_r>
 8006562:	4284      	cmp	r4, r0
 8006564:	4607      	mov	r7, r0
 8006566:	d802      	bhi.n	800656e <_realloc_r+0x34>
 8006568:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800656c:	d812      	bhi.n	8006594 <_realloc_r+0x5a>
 800656e:	4621      	mov	r1, r4
 8006570:	4640      	mov	r0, r8
 8006572:	f7fd fe2d 	bl	80041d0 <_malloc_r>
 8006576:	4605      	mov	r5, r0
 8006578:	2800      	cmp	r0, #0
 800657a:	d0ed      	beq.n	8006558 <_realloc_r+0x1e>
 800657c:	42bc      	cmp	r4, r7
 800657e:	4622      	mov	r2, r4
 8006580:	4631      	mov	r1, r6
 8006582:	bf28      	it	cs
 8006584:	463a      	movcs	r2, r7
 8006586:	f7ff fc27 	bl	8005dd8 <memcpy>
 800658a:	4631      	mov	r1, r6
 800658c:	4640      	mov	r0, r8
 800658e:	f7fd fdaf 	bl	80040f0 <_free_r>
 8006592:	e7e1      	b.n	8006558 <_realloc_r+0x1e>
 8006594:	4635      	mov	r5, r6
 8006596:	e7df      	b.n	8006558 <_realloc_r+0x1e>

08006598 <__ascii_wctomb>:
 8006598:	4603      	mov	r3, r0
 800659a:	4608      	mov	r0, r1
 800659c:	b141      	cbz	r1, 80065b0 <__ascii_wctomb+0x18>
 800659e:	2aff      	cmp	r2, #255	; 0xff
 80065a0:	d904      	bls.n	80065ac <__ascii_wctomb+0x14>
 80065a2:	228a      	movs	r2, #138	; 0x8a
 80065a4:	f04f 30ff 	mov.w	r0, #4294967295
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	4770      	bx	lr
 80065ac:	2001      	movs	r0, #1
 80065ae:	700a      	strb	r2, [r1, #0]
 80065b0:	4770      	bx	lr
	...

080065b4 <fiprintf>:
 80065b4:	b40e      	push	{r1, r2, r3}
 80065b6:	b503      	push	{r0, r1, lr}
 80065b8:	4601      	mov	r1, r0
 80065ba:	ab03      	add	r3, sp, #12
 80065bc:	4805      	ldr	r0, [pc, #20]	; (80065d4 <fiprintf+0x20>)
 80065be:	f853 2b04 	ldr.w	r2, [r3], #4
 80065c2:	6800      	ldr	r0, [r0, #0]
 80065c4:	9301      	str	r3, [sp, #4]
 80065c6:	f000 f83d 	bl	8006644 <_vfiprintf_r>
 80065ca:	b002      	add	sp, #8
 80065cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80065d0:	b003      	add	sp, #12
 80065d2:	4770      	bx	lr
 80065d4:	20000064 	.word	0x20000064

080065d8 <abort>:
 80065d8:	2006      	movs	r0, #6
 80065da:	b508      	push	{r3, lr}
 80065dc:	f000 fa0a 	bl	80069f4 <raise>
 80065e0:	2001      	movs	r0, #1
 80065e2:	f7fa fcd1 	bl	8000f88 <_exit>

080065e6 <_malloc_usable_size_r>:
 80065e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065ea:	1f18      	subs	r0, r3, #4
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	bfbc      	itt	lt
 80065f0:	580b      	ldrlt	r3, [r1, r0]
 80065f2:	18c0      	addlt	r0, r0, r3
 80065f4:	4770      	bx	lr

080065f6 <__sfputc_r>:
 80065f6:	6893      	ldr	r3, [r2, #8]
 80065f8:	b410      	push	{r4}
 80065fa:	3b01      	subs	r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	6093      	str	r3, [r2, #8]
 8006600:	da07      	bge.n	8006612 <__sfputc_r+0x1c>
 8006602:	6994      	ldr	r4, [r2, #24]
 8006604:	42a3      	cmp	r3, r4
 8006606:	db01      	blt.n	800660c <__sfputc_r+0x16>
 8006608:	290a      	cmp	r1, #10
 800660a:	d102      	bne.n	8006612 <__sfputc_r+0x1c>
 800660c:	bc10      	pop	{r4}
 800660e:	f000 b933 	b.w	8006878 <__swbuf_r>
 8006612:	6813      	ldr	r3, [r2, #0]
 8006614:	1c58      	adds	r0, r3, #1
 8006616:	6010      	str	r0, [r2, #0]
 8006618:	7019      	strb	r1, [r3, #0]
 800661a:	4608      	mov	r0, r1
 800661c:	bc10      	pop	{r4}
 800661e:	4770      	bx	lr

08006620 <__sfputs_r>:
 8006620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006622:	4606      	mov	r6, r0
 8006624:	460f      	mov	r7, r1
 8006626:	4614      	mov	r4, r2
 8006628:	18d5      	adds	r5, r2, r3
 800662a:	42ac      	cmp	r4, r5
 800662c:	d101      	bne.n	8006632 <__sfputs_r+0x12>
 800662e:	2000      	movs	r0, #0
 8006630:	e007      	b.n	8006642 <__sfputs_r+0x22>
 8006632:	463a      	mov	r2, r7
 8006634:	4630      	mov	r0, r6
 8006636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800663a:	f7ff ffdc 	bl	80065f6 <__sfputc_r>
 800663e:	1c43      	adds	r3, r0, #1
 8006640:	d1f3      	bne.n	800662a <__sfputs_r+0xa>
 8006642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006644 <_vfiprintf_r>:
 8006644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006648:	460d      	mov	r5, r1
 800664a:	4614      	mov	r4, r2
 800664c:	4698      	mov	r8, r3
 800664e:	4606      	mov	r6, r0
 8006650:	b09d      	sub	sp, #116	; 0x74
 8006652:	b118      	cbz	r0, 800665c <_vfiprintf_r+0x18>
 8006654:	6a03      	ldr	r3, [r0, #32]
 8006656:	b90b      	cbnz	r3, 800665c <_vfiprintf_r+0x18>
 8006658:	f7fc fdae 	bl	80031b8 <__sinit>
 800665c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800665e:	07d9      	lsls	r1, r3, #31
 8006660:	d405      	bmi.n	800666e <_vfiprintf_r+0x2a>
 8006662:	89ab      	ldrh	r3, [r5, #12]
 8006664:	059a      	lsls	r2, r3, #22
 8006666:	d402      	bmi.n	800666e <_vfiprintf_r+0x2a>
 8006668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800666a:	f7fc febc 	bl	80033e6 <__retarget_lock_acquire_recursive>
 800666e:	89ab      	ldrh	r3, [r5, #12]
 8006670:	071b      	lsls	r3, r3, #28
 8006672:	d501      	bpl.n	8006678 <_vfiprintf_r+0x34>
 8006674:	692b      	ldr	r3, [r5, #16]
 8006676:	b99b      	cbnz	r3, 80066a0 <_vfiprintf_r+0x5c>
 8006678:	4629      	mov	r1, r5
 800667a:	4630      	mov	r0, r6
 800667c:	f000 f93a 	bl	80068f4 <__swsetup_r>
 8006680:	b170      	cbz	r0, 80066a0 <_vfiprintf_r+0x5c>
 8006682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006684:	07dc      	lsls	r4, r3, #31
 8006686:	d504      	bpl.n	8006692 <_vfiprintf_r+0x4e>
 8006688:	f04f 30ff 	mov.w	r0, #4294967295
 800668c:	b01d      	add	sp, #116	; 0x74
 800668e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006692:	89ab      	ldrh	r3, [r5, #12]
 8006694:	0598      	lsls	r0, r3, #22
 8006696:	d4f7      	bmi.n	8006688 <_vfiprintf_r+0x44>
 8006698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800669a:	f7fc fea5 	bl	80033e8 <__retarget_lock_release_recursive>
 800669e:	e7f3      	b.n	8006688 <_vfiprintf_r+0x44>
 80066a0:	2300      	movs	r3, #0
 80066a2:	9309      	str	r3, [sp, #36]	; 0x24
 80066a4:	2320      	movs	r3, #32
 80066a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066aa:	2330      	movs	r3, #48	; 0x30
 80066ac:	f04f 0901 	mov.w	r9, #1
 80066b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80066b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006864 <_vfiprintf_r+0x220>
 80066b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066bc:	4623      	mov	r3, r4
 80066be:	469a      	mov	sl, r3
 80066c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066c4:	b10a      	cbz	r2, 80066ca <_vfiprintf_r+0x86>
 80066c6:	2a25      	cmp	r2, #37	; 0x25
 80066c8:	d1f9      	bne.n	80066be <_vfiprintf_r+0x7a>
 80066ca:	ebba 0b04 	subs.w	fp, sl, r4
 80066ce:	d00b      	beq.n	80066e8 <_vfiprintf_r+0xa4>
 80066d0:	465b      	mov	r3, fp
 80066d2:	4622      	mov	r2, r4
 80066d4:	4629      	mov	r1, r5
 80066d6:	4630      	mov	r0, r6
 80066d8:	f7ff ffa2 	bl	8006620 <__sfputs_r>
 80066dc:	3001      	adds	r0, #1
 80066de:	f000 80a9 	beq.w	8006834 <_vfiprintf_r+0x1f0>
 80066e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e4:	445a      	add	r2, fp
 80066e6:	9209      	str	r2, [sp, #36]	; 0x24
 80066e8:	f89a 3000 	ldrb.w	r3, [sl]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 80a1 	beq.w	8006834 <_vfiprintf_r+0x1f0>
 80066f2:	2300      	movs	r3, #0
 80066f4:	f04f 32ff 	mov.w	r2, #4294967295
 80066f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066fc:	f10a 0a01 	add.w	sl, sl, #1
 8006700:	9304      	str	r3, [sp, #16]
 8006702:	9307      	str	r3, [sp, #28]
 8006704:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006708:	931a      	str	r3, [sp, #104]	; 0x68
 800670a:	4654      	mov	r4, sl
 800670c:	2205      	movs	r2, #5
 800670e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006712:	4854      	ldr	r0, [pc, #336]	; (8006864 <_vfiprintf_r+0x220>)
 8006714:	f7fc fe69 	bl	80033ea <memchr>
 8006718:	9a04      	ldr	r2, [sp, #16]
 800671a:	b9d8      	cbnz	r0, 8006754 <_vfiprintf_r+0x110>
 800671c:	06d1      	lsls	r1, r2, #27
 800671e:	bf44      	itt	mi
 8006720:	2320      	movmi	r3, #32
 8006722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006726:	0713      	lsls	r3, r2, #28
 8006728:	bf44      	itt	mi
 800672a:	232b      	movmi	r3, #43	; 0x2b
 800672c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006730:	f89a 3000 	ldrb.w	r3, [sl]
 8006734:	2b2a      	cmp	r3, #42	; 0x2a
 8006736:	d015      	beq.n	8006764 <_vfiprintf_r+0x120>
 8006738:	4654      	mov	r4, sl
 800673a:	2000      	movs	r0, #0
 800673c:	f04f 0c0a 	mov.w	ip, #10
 8006740:	9a07      	ldr	r2, [sp, #28]
 8006742:	4621      	mov	r1, r4
 8006744:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006748:	3b30      	subs	r3, #48	; 0x30
 800674a:	2b09      	cmp	r3, #9
 800674c:	d94d      	bls.n	80067ea <_vfiprintf_r+0x1a6>
 800674e:	b1b0      	cbz	r0, 800677e <_vfiprintf_r+0x13a>
 8006750:	9207      	str	r2, [sp, #28]
 8006752:	e014      	b.n	800677e <_vfiprintf_r+0x13a>
 8006754:	eba0 0308 	sub.w	r3, r0, r8
 8006758:	fa09 f303 	lsl.w	r3, r9, r3
 800675c:	4313      	orrs	r3, r2
 800675e:	46a2      	mov	sl, r4
 8006760:	9304      	str	r3, [sp, #16]
 8006762:	e7d2      	b.n	800670a <_vfiprintf_r+0xc6>
 8006764:	9b03      	ldr	r3, [sp, #12]
 8006766:	1d19      	adds	r1, r3, #4
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	9103      	str	r1, [sp, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	bfbb      	ittet	lt
 8006770:	425b      	neglt	r3, r3
 8006772:	f042 0202 	orrlt.w	r2, r2, #2
 8006776:	9307      	strge	r3, [sp, #28]
 8006778:	9307      	strlt	r3, [sp, #28]
 800677a:	bfb8      	it	lt
 800677c:	9204      	strlt	r2, [sp, #16]
 800677e:	7823      	ldrb	r3, [r4, #0]
 8006780:	2b2e      	cmp	r3, #46	; 0x2e
 8006782:	d10c      	bne.n	800679e <_vfiprintf_r+0x15a>
 8006784:	7863      	ldrb	r3, [r4, #1]
 8006786:	2b2a      	cmp	r3, #42	; 0x2a
 8006788:	d134      	bne.n	80067f4 <_vfiprintf_r+0x1b0>
 800678a:	9b03      	ldr	r3, [sp, #12]
 800678c:	3402      	adds	r4, #2
 800678e:	1d1a      	adds	r2, r3, #4
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	9203      	str	r2, [sp, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	bfb8      	it	lt
 8006798:	f04f 33ff 	movlt.w	r3, #4294967295
 800679c:	9305      	str	r3, [sp, #20]
 800679e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006868 <_vfiprintf_r+0x224>
 80067a2:	2203      	movs	r2, #3
 80067a4:	4650      	mov	r0, sl
 80067a6:	7821      	ldrb	r1, [r4, #0]
 80067a8:	f7fc fe1f 	bl	80033ea <memchr>
 80067ac:	b138      	cbz	r0, 80067be <_vfiprintf_r+0x17a>
 80067ae:	2240      	movs	r2, #64	; 0x40
 80067b0:	9b04      	ldr	r3, [sp, #16]
 80067b2:	eba0 000a 	sub.w	r0, r0, sl
 80067b6:	4082      	lsls	r2, r0
 80067b8:	4313      	orrs	r3, r2
 80067ba:	3401      	adds	r4, #1
 80067bc:	9304      	str	r3, [sp, #16]
 80067be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c2:	2206      	movs	r2, #6
 80067c4:	4829      	ldr	r0, [pc, #164]	; (800686c <_vfiprintf_r+0x228>)
 80067c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067ca:	f7fc fe0e 	bl	80033ea <memchr>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d03f      	beq.n	8006852 <_vfiprintf_r+0x20e>
 80067d2:	4b27      	ldr	r3, [pc, #156]	; (8006870 <_vfiprintf_r+0x22c>)
 80067d4:	bb1b      	cbnz	r3, 800681e <_vfiprintf_r+0x1da>
 80067d6:	9b03      	ldr	r3, [sp, #12]
 80067d8:	3307      	adds	r3, #7
 80067da:	f023 0307 	bic.w	r3, r3, #7
 80067de:	3308      	adds	r3, #8
 80067e0:	9303      	str	r3, [sp, #12]
 80067e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e4:	443b      	add	r3, r7
 80067e6:	9309      	str	r3, [sp, #36]	; 0x24
 80067e8:	e768      	b.n	80066bc <_vfiprintf_r+0x78>
 80067ea:	460c      	mov	r4, r1
 80067ec:	2001      	movs	r0, #1
 80067ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80067f2:	e7a6      	b.n	8006742 <_vfiprintf_r+0xfe>
 80067f4:	2300      	movs	r3, #0
 80067f6:	f04f 0c0a 	mov.w	ip, #10
 80067fa:	4619      	mov	r1, r3
 80067fc:	3401      	adds	r4, #1
 80067fe:	9305      	str	r3, [sp, #20]
 8006800:	4620      	mov	r0, r4
 8006802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006806:	3a30      	subs	r2, #48	; 0x30
 8006808:	2a09      	cmp	r2, #9
 800680a:	d903      	bls.n	8006814 <_vfiprintf_r+0x1d0>
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0c6      	beq.n	800679e <_vfiprintf_r+0x15a>
 8006810:	9105      	str	r1, [sp, #20]
 8006812:	e7c4      	b.n	800679e <_vfiprintf_r+0x15a>
 8006814:	4604      	mov	r4, r0
 8006816:	2301      	movs	r3, #1
 8006818:	fb0c 2101 	mla	r1, ip, r1, r2
 800681c:	e7f0      	b.n	8006800 <_vfiprintf_r+0x1bc>
 800681e:	ab03      	add	r3, sp, #12
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	462a      	mov	r2, r5
 8006824:	4630      	mov	r0, r6
 8006826:	4b13      	ldr	r3, [pc, #76]	; (8006874 <_vfiprintf_r+0x230>)
 8006828:	a904      	add	r1, sp, #16
 800682a:	f7fb fe69 	bl	8002500 <_printf_float>
 800682e:	4607      	mov	r7, r0
 8006830:	1c78      	adds	r0, r7, #1
 8006832:	d1d6      	bne.n	80067e2 <_vfiprintf_r+0x19e>
 8006834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006836:	07d9      	lsls	r1, r3, #31
 8006838:	d405      	bmi.n	8006846 <_vfiprintf_r+0x202>
 800683a:	89ab      	ldrh	r3, [r5, #12]
 800683c:	059a      	lsls	r2, r3, #22
 800683e:	d402      	bmi.n	8006846 <_vfiprintf_r+0x202>
 8006840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006842:	f7fc fdd1 	bl	80033e8 <__retarget_lock_release_recursive>
 8006846:	89ab      	ldrh	r3, [r5, #12]
 8006848:	065b      	lsls	r3, r3, #25
 800684a:	f53f af1d 	bmi.w	8006688 <_vfiprintf_r+0x44>
 800684e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006850:	e71c      	b.n	800668c <_vfiprintf_r+0x48>
 8006852:	ab03      	add	r3, sp, #12
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	462a      	mov	r2, r5
 8006858:	4630      	mov	r0, r6
 800685a:	4b06      	ldr	r3, [pc, #24]	; (8006874 <_vfiprintf_r+0x230>)
 800685c:	a904      	add	r1, sp, #16
 800685e:	f7fc f8ef 	bl	8002a40 <_printf_i>
 8006862:	e7e4      	b.n	800682e <_vfiprintf_r+0x1ea>
 8006864:	08006f09 	.word	0x08006f09
 8006868:	08006f0f 	.word	0x08006f0f
 800686c:	08006f13 	.word	0x08006f13
 8006870:	08002501 	.word	0x08002501
 8006874:	08006621 	.word	0x08006621

08006878 <__swbuf_r>:
 8006878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687a:	460e      	mov	r6, r1
 800687c:	4614      	mov	r4, r2
 800687e:	4605      	mov	r5, r0
 8006880:	b118      	cbz	r0, 800688a <__swbuf_r+0x12>
 8006882:	6a03      	ldr	r3, [r0, #32]
 8006884:	b90b      	cbnz	r3, 800688a <__swbuf_r+0x12>
 8006886:	f7fc fc97 	bl	80031b8 <__sinit>
 800688a:	69a3      	ldr	r3, [r4, #24]
 800688c:	60a3      	str	r3, [r4, #8]
 800688e:	89a3      	ldrh	r3, [r4, #12]
 8006890:	071a      	lsls	r2, r3, #28
 8006892:	d525      	bpl.n	80068e0 <__swbuf_r+0x68>
 8006894:	6923      	ldr	r3, [r4, #16]
 8006896:	b31b      	cbz	r3, 80068e0 <__swbuf_r+0x68>
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	6922      	ldr	r2, [r4, #16]
 800689c:	b2f6      	uxtb	r6, r6
 800689e:	1a98      	subs	r0, r3, r2
 80068a0:	6963      	ldr	r3, [r4, #20]
 80068a2:	4637      	mov	r7, r6
 80068a4:	4283      	cmp	r3, r0
 80068a6:	dc04      	bgt.n	80068b2 <__swbuf_r+0x3a>
 80068a8:	4621      	mov	r1, r4
 80068aa:	4628      	mov	r0, r5
 80068ac:	f7ff fa30 	bl	8005d10 <_fflush_r>
 80068b0:	b9e0      	cbnz	r0, 80068ec <__swbuf_r+0x74>
 80068b2:	68a3      	ldr	r3, [r4, #8]
 80068b4:	3b01      	subs	r3, #1
 80068b6:	60a3      	str	r3, [r4, #8]
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	6022      	str	r2, [r4, #0]
 80068be:	701e      	strb	r6, [r3, #0]
 80068c0:	6962      	ldr	r2, [r4, #20]
 80068c2:	1c43      	adds	r3, r0, #1
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d004      	beq.n	80068d2 <__swbuf_r+0x5a>
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	07db      	lsls	r3, r3, #31
 80068cc:	d506      	bpl.n	80068dc <__swbuf_r+0x64>
 80068ce:	2e0a      	cmp	r6, #10
 80068d0:	d104      	bne.n	80068dc <__swbuf_r+0x64>
 80068d2:	4621      	mov	r1, r4
 80068d4:	4628      	mov	r0, r5
 80068d6:	f7ff fa1b 	bl	8005d10 <_fflush_r>
 80068da:	b938      	cbnz	r0, 80068ec <__swbuf_r+0x74>
 80068dc:	4638      	mov	r0, r7
 80068de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068e0:	4621      	mov	r1, r4
 80068e2:	4628      	mov	r0, r5
 80068e4:	f000 f806 	bl	80068f4 <__swsetup_r>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d0d5      	beq.n	8006898 <__swbuf_r+0x20>
 80068ec:	f04f 37ff 	mov.w	r7, #4294967295
 80068f0:	e7f4      	b.n	80068dc <__swbuf_r+0x64>
	...

080068f4 <__swsetup_r>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	4b2a      	ldr	r3, [pc, #168]	; (80069a0 <__swsetup_r+0xac>)
 80068f8:	4605      	mov	r5, r0
 80068fa:	6818      	ldr	r0, [r3, #0]
 80068fc:	460c      	mov	r4, r1
 80068fe:	b118      	cbz	r0, 8006908 <__swsetup_r+0x14>
 8006900:	6a03      	ldr	r3, [r0, #32]
 8006902:	b90b      	cbnz	r3, 8006908 <__swsetup_r+0x14>
 8006904:	f7fc fc58 	bl	80031b8 <__sinit>
 8006908:	89a3      	ldrh	r3, [r4, #12]
 800690a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800690e:	0718      	lsls	r0, r3, #28
 8006910:	d422      	bmi.n	8006958 <__swsetup_r+0x64>
 8006912:	06d9      	lsls	r1, r3, #27
 8006914:	d407      	bmi.n	8006926 <__swsetup_r+0x32>
 8006916:	2309      	movs	r3, #9
 8006918:	602b      	str	r3, [r5, #0]
 800691a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800691e:	f04f 30ff 	mov.w	r0, #4294967295
 8006922:	81a3      	strh	r3, [r4, #12]
 8006924:	e034      	b.n	8006990 <__swsetup_r+0x9c>
 8006926:	0758      	lsls	r0, r3, #29
 8006928:	d512      	bpl.n	8006950 <__swsetup_r+0x5c>
 800692a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800692c:	b141      	cbz	r1, 8006940 <__swsetup_r+0x4c>
 800692e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006932:	4299      	cmp	r1, r3
 8006934:	d002      	beq.n	800693c <__swsetup_r+0x48>
 8006936:	4628      	mov	r0, r5
 8006938:	f7fd fbda 	bl	80040f0 <_free_r>
 800693c:	2300      	movs	r3, #0
 800693e:	6363      	str	r3, [r4, #52]	; 0x34
 8006940:	89a3      	ldrh	r3, [r4, #12]
 8006942:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006946:	81a3      	strh	r3, [r4, #12]
 8006948:	2300      	movs	r3, #0
 800694a:	6063      	str	r3, [r4, #4]
 800694c:	6923      	ldr	r3, [r4, #16]
 800694e:	6023      	str	r3, [r4, #0]
 8006950:	89a3      	ldrh	r3, [r4, #12]
 8006952:	f043 0308 	orr.w	r3, r3, #8
 8006956:	81a3      	strh	r3, [r4, #12]
 8006958:	6923      	ldr	r3, [r4, #16]
 800695a:	b94b      	cbnz	r3, 8006970 <__swsetup_r+0x7c>
 800695c:	89a3      	ldrh	r3, [r4, #12]
 800695e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006966:	d003      	beq.n	8006970 <__swsetup_r+0x7c>
 8006968:	4621      	mov	r1, r4
 800696a:	4628      	mov	r0, r5
 800696c:	f000 f883 	bl	8006a76 <__smakebuf_r>
 8006970:	89a0      	ldrh	r0, [r4, #12]
 8006972:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006976:	f010 0301 	ands.w	r3, r0, #1
 800697a:	d00a      	beq.n	8006992 <__swsetup_r+0x9e>
 800697c:	2300      	movs	r3, #0
 800697e:	60a3      	str	r3, [r4, #8]
 8006980:	6963      	ldr	r3, [r4, #20]
 8006982:	425b      	negs	r3, r3
 8006984:	61a3      	str	r3, [r4, #24]
 8006986:	6923      	ldr	r3, [r4, #16]
 8006988:	b943      	cbnz	r3, 800699c <__swsetup_r+0xa8>
 800698a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800698e:	d1c4      	bne.n	800691a <__swsetup_r+0x26>
 8006990:	bd38      	pop	{r3, r4, r5, pc}
 8006992:	0781      	lsls	r1, r0, #30
 8006994:	bf58      	it	pl
 8006996:	6963      	ldrpl	r3, [r4, #20]
 8006998:	60a3      	str	r3, [r4, #8]
 800699a:	e7f4      	b.n	8006986 <__swsetup_r+0x92>
 800699c:	2000      	movs	r0, #0
 800699e:	e7f7      	b.n	8006990 <__swsetup_r+0x9c>
 80069a0:	20000064 	.word	0x20000064

080069a4 <_raise_r>:
 80069a4:	291f      	cmp	r1, #31
 80069a6:	b538      	push	{r3, r4, r5, lr}
 80069a8:	4604      	mov	r4, r0
 80069aa:	460d      	mov	r5, r1
 80069ac:	d904      	bls.n	80069b8 <_raise_r+0x14>
 80069ae:	2316      	movs	r3, #22
 80069b0:	6003      	str	r3, [r0, #0]
 80069b2:	f04f 30ff 	mov.w	r0, #4294967295
 80069b6:	bd38      	pop	{r3, r4, r5, pc}
 80069b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80069ba:	b112      	cbz	r2, 80069c2 <_raise_r+0x1e>
 80069bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069c0:	b94b      	cbnz	r3, 80069d6 <_raise_r+0x32>
 80069c2:	4620      	mov	r0, r4
 80069c4:	f000 f830 	bl	8006a28 <_getpid_r>
 80069c8:	462a      	mov	r2, r5
 80069ca:	4601      	mov	r1, r0
 80069cc:	4620      	mov	r0, r4
 80069ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069d2:	f000 b817 	b.w	8006a04 <_kill_r>
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d00a      	beq.n	80069f0 <_raise_r+0x4c>
 80069da:	1c59      	adds	r1, r3, #1
 80069dc:	d103      	bne.n	80069e6 <_raise_r+0x42>
 80069de:	2316      	movs	r3, #22
 80069e0:	6003      	str	r3, [r0, #0]
 80069e2:	2001      	movs	r0, #1
 80069e4:	e7e7      	b.n	80069b6 <_raise_r+0x12>
 80069e6:	2400      	movs	r4, #0
 80069e8:	4628      	mov	r0, r5
 80069ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80069ee:	4798      	blx	r3
 80069f0:	2000      	movs	r0, #0
 80069f2:	e7e0      	b.n	80069b6 <_raise_r+0x12>

080069f4 <raise>:
 80069f4:	4b02      	ldr	r3, [pc, #8]	; (8006a00 <raise+0xc>)
 80069f6:	4601      	mov	r1, r0
 80069f8:	6818      	ldr	r0, [r3, #0]
 80069fa:	f7ff bfd3 	b.w	80069a4 <_raise_r>
 80069fe:	bf00      	nop
 8006a00:	20000064 	.word	0x20000064

08006a04 <_kill_r>:
 8006a04:	b538      	push	{r3, r4, r5, lr}
 8006a06:	2300      	movs	r3, #0
 8006a08:	4d06      	ldr	r5, [pc, #24]	; (8006a24 <_kill_r+0x20>)
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	4608      	mov	r0, r1
 8006a0e:	4611      	mov	r1, r2
 8006a10:	602b      	str	r3, [r5, #0]
 8006a12:	f7fa faa9 	bl	8000f68 <_kill>
 8006a16:	1c43      	adds	r3, r0, #1
 8006a18:	d102      	bne.n	8006a20 <_kill_r+0x1c>
 8006a1a:	682b      	ldr	r3, [r5, #0]
 8006a1c:	b103      	cbz	r3, 8006a20 <_kill_r+0x1c>
 8006a1e:	6023      	str	r3, [r4, #0]
 8006a20:	bd38      	pop	{r3, r4, r5, pc}
 8006a22:	bf00      	nop
 8006a24:	20000388 	.word	0x20000388

08006a28 <_getpid_r>:
 8006a28:	f7fa ba97 	b.w	8000f5a <_getpid>

08006a2c <__swhatbuf_r>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	460c      	mov	r4, r1
 8006a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a34:	4615      	mov	r5, r2
 8006a36:	2900      	cmp	r1, #0
 8006a38:	461e      	mov	r6, r3
 8006a3a:	b096      	sub	sp, #88	; 0x58
 8006a3c:	da0c      	bge.n	8006a58 <__swhatbuf_r+0x2c>
 8006a3e:	89a3      	ldrh	r3, [r4, #12]
 8006a40:	2100      	movs	r1, #0
 8006a42:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a46:	bf0c      	ite	eq
 8006a48:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006a4c:	2340      	movne	r3, #64	; 0x40
 8006a4e:	2000      	movs	r0, #0
 8006a50:	6031      	str	r1, [r6, #0]
 8006a52:	602b      	str	r3, [r5, #0]
 8006a54:	b016      	add	sp, #88	; 0x58
 8006a56:	bd70      	pop	{r4, r5, r6, pc}
 8006a58:	466a      	mov	r2, sp
 8006a5a:	f000 f849 	bl	8006af0 <_fstat_r>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	dbed      	blt.n	8006a3e <__swhatbuf_r+0x12>
 8006a62:	9901      	ldr	r1, [sp, #4]
 8006a64:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006a68:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006a6c:	4259      	negs	r1, r3
 8006a6e:	4159      	adcs	r1, r3
 8006a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a74:	e7eb      	b.n	8006a4e <__swhatbuf_r+0x22>

08006a76 <__smakebuf_r>:
 8006a76:	898b      	ldrh	r3, [r1, #12]
 8006a78:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a7a:	079d      	lsls	r5, r3, #30
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	460c      	mov	r4, r1
 8006a80:	d507      	bpl.n	8006a92 <__smakebuf_r+0x1c>
 8006a82:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a86:	6023      	str	r3, [r4, #0]
 8006a88:	6123      	str	r3, [r4, #16]
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	6163      	str	r3, [r4, #20]
 8006a8e:	b002      	add	sp, #8
 8006a90:	bd70      	pop	{r4, r5, r6, pc}
 8006a92:	466a      	mov	r2, sp
 8006a94:	ab01      	add	r3, sp, #4
 8006a96:	f7ff ffc9 	bl	8006a2c <__swhatbuf_r>
 8006a9a:	9900      	ldr	r1, [sp, #0]
 8006a9c:	4605      	mov	r5, r0
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	f7fd fb96 	bl	80041d0 <_malloc_r>
 8006aa4:	b948      	cbnz	r0, 8006aba <__smakebuf_r+0x44>
 8006aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aaa:	059a      	lsls	r2, r3, #22
 8006aac:	d4ef      	bmi.n	8006a8e <__smakebuf_r+0x18>
 8006aae:	f023 0303 	bic.w	r3, r3, #3
 8006ab2:	f043 0302 	orr.w	r3, r3, #2
 8006ab6:	81a3      	strh	r3, [r4, #12]
 8006ab8:	e7e3      	b.n	8006a82 <__smakebuf_r+0xc>
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	6020      	str	r0, [r4, #0]
 8006abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac2:	81a3      	strh	r3, [r4, #12]
 8006ac4:	9b00      	ldr	r3, [sp, #0]
 8006ac6:	6120      	str	r0, [r4, #16]
 8006ac8:	6163      	str	r3, [r4, #20]
 8006aca:	9b01      	ldr	r3, [sp, #4]
 8006acc:	b15b      	cbz	r3, 8006ae6 <__smakebuf_r+0x70>
 8006ace:	4630      	mov	r0, r6
 8006ad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ad4:	f000 f81e 	bl	8006b14 <_isatty_r>
 8006ad8:	b128      	cbz	r0, 8006ae6 <__smakebuf_r+0x70>
 8006ada:	89a3      	ldrh	r3, [r4, #12]
 8006adc:	f023 0303 	bic.w	r3, r3, #3
 8006ae0:	f043 0301 	orr.w	r3, r3, #1
 8006ae4:	81a3      	strh	r3, [r4, #12]
 8006ae6:	89a3      	ldrh	r3, [r4, #12]
 8006ae8:	431d      	orrs	r5, r3
 8006aea:	81a5      	strh	r5, [r4, #12]
 8006aec:	e7cf      	b.n	8006a8e <__smakebuf_r+0x18>
	...

08006af0 <_fstat_r>:
 8006af0:	b538      	push	{r3, r4, r5, lr}
 8006af2:	2300      	movs	r3, #0
 8006af4:	4d06      	ldr	r5, [pc, #24]	; (8006b10 <_fstat_r+0x20>)
 8006af6:	4604      	mov	r4, r0
 8006af8:	4608      	mov	r0, r1
 8006afa:	4611      	mov	r1, r2
 8006afc:	602b      	str	r3, [r5, #0]
 8006afe:	f7fa fa91 	bl	8001024 <_fstat>
 8006b02:	1c43      	adds	r3, r0, #1
 8006b04:	d102      	bne.n	8006b0c <_fstat_r+0x1c>
 8006b06:	682b      	ldr	r3, [r5, #0]
 8006b08:	b103      	cbz	r3, 8006b0c <_fstat_r+0x1c>
 8006b0a:	6023      	str	r3, [r4, #0]
 8006b0c:	bd38      	pop	{r3, r4, r5, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000388 	.word	0x20000388

08006b14 <_isatty_r>:
 8006b14:	b538      	push	{r3, r4, r5, lr}
 8006b16:	2300      	movs	r3, #0
 8006b18:	4d05      	ldr	r5, [pc, #20]	; (8006b30 <_isatty_r+0x1c>)
 8006b1a:	4604      	mov	r4, r0
 8006b1c:	4608      	mov	r0, r1
 8006b1e:	602b      	str	r3, [r5, #0]
 8006b20:	f7fa fa8f 	bl	8001042 <_isatty>
 8006b24:	1c43      	adds	r3, r0, #1
 8006b26:	d102      	bne.n	8006b2e <_isatty_r+0x1a>
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	b103      	cbz	r3, 8006b2e <_isatty_r+0x1a>
 8006b2c:	6023      	str	r3, [r4, #0]
 8006b2e:	bd38      	pop	{r3, r4, r5, pc}
 8006b30:	20000388 	.word	0x20000388

08006b34 <_init>:
 8006b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b36:	bf00      	nop
 8006b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b3a:	bc08      	pop	{r3}
 8006b3c:	469e      	mov	lr, r3
 8006b3e:	4770      	bx	lr

08006b40 <_fini>:
 8006b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b42:	bf00      	nop
 8006b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b46:	bc08      	pop	{r3}
 8006b48:	469e      	mov	lr, r3
 8006b4a:	4770      	bx	lr
